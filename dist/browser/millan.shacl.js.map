{"version":3,"sources":["webpack://millan.[name]/webpack/universalModuleDefinition","webpack://millan.[name]/webpack/bootstrap","webpack://millan.[name]/./src/sparql/keywords.ts","webpack://millan.[name]/./src/turtle/TurtleParser.ts","webpack://millan.[name]/./src/helpers/regex.ts","webpack://millan.[name]/./src/helpers/matchers.ts","webpack://millan.[name]/./src/sparql/terminals.ts","webpack://millan.[name]/./src/helpers/types.ts","webpack://millan.[name]/./src/shacl/tokens.ts","webpack://millan.[name]/./src/sparql/tokens.ts","webpack://millan.[name]/./src/shacl/visitor.ts","webpack://millan.[name]/./src/shacl/ShaclParser.ts","webpack://millan.[name]/./src/shacl/index.ts","webpack://millan.[name]/./src/helpers/cst.ts","webpack://millan.[name]/./src/helpers/unescape.ts","webpack://millan.[name]/./src/turtle/tokens.ts"],"names":["root","factory","exports","module","define","amd","self","this","webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","3","1","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","oldJsonpFunction","slice","__webpack_exports__","keywords","chevrotain__WEBPACK_IMPORTED_MODULE_0__","MAX_LENGTH","pattern","SELECT","CONSTRUCT","DISTINCT","START","END","VIA","PATHS","PATHS_ALL","PATHS_SHORTEST","CYCLIC","AS","WHERE","A","GROUP_BY","ORDER_BY","BY","BASE","PREFIX","DESCRIBE","ASK","FROM","REDUCED","NAMED","HAVING","ASC","DESC","OFFSET","LIMIT","VALUES","LOAD","SILENT","INTO","CLEAR","DROP","CREATE","ADD","TO","MOVE","COPY","INSERT_DATA","DELETE_DATA","DELETE_WHERE","WITH","DELETE","INSERT","USING","DEFAULT","GRAPH","ALL","OPTIONAL","SERVICE","BIND","UNNEST","UNDEF","MINUS","UNION","FILTER","STR","LANG","LANGMATCHES","DATATYPE","BOUND","IRI","URI","BNODE","RAND","ABS","CEIL","FLOOR","ROUND","CONCAT","STRLEN","UCASE","LCASE","ENCODE_FOR_URI","CONTAINS","STRSTARTS","STRENDS","STRBEFORE","STRAFTER","YEAR","MONTH","DAY","HOURS","MINUTES","SECONDS","TIMEZONE","TZ","NOW","UUID","STRUUID","MD5","SHA1","SHA256","SHA384","SHA512","COALESCE","IF","STRLANG","STRDT","sameTerm","isIRI","isURI","isBLANK","isLITERAL","isNUMERIC","REGEX","SUBSTR","REPLACE","EXISTS","NOT_EXISTS","COUNT","SUM","MIN","AVG","SAMPLE","GROUP_CONCAT","SEPARATOR","TRUE","FALSE","IN","NOT_IN","MAX","longer_alt","TurtleParser","extendStatics","__extends","b","setPrototypeOf","__proto__","Array","__","constructor","__assign","assign","arguments","_a","turtleTokenTypes","turtleTokenMap","_super","config","tokens","lexerDefinition","performSelfAnalysis","_this","outputCst","recoveryEnabled","namespacesMap","semanticErrors","resetManagedState","tokenize","document","lexer","parse","input","cst","turtleDoc","errors","RULE","MANY","SUBRULE","statement","ARGS","OR","ALT","directive","triples","CONSUME","Period","prefixID","base","sparqlPrefix","sparqlBase","TTL_PREFIX","pnameNsToken","PNAME_NS","iriToken","IRIREF","pnameImageWithoutColon","image","iriImage","TTL_BASE","OR1","subject","GATE","EmbeddedTriplePattern","predicateObjectList","blankNodePropertyList","OPTION","SUBRULE1","triplesNotEmbedded","LEmbed","REmbed","verb","objectList","Semicolon","iri","BlankNode","collection","predicate","Comma","literal","RDFLiteral","NumericLiteral","BooleanLiteral","LBracket","RBracket","LParen","RParen","INTEGER","DECIMAL","DOUBLE","String","LANGTAG","DoubleCaret","STRING_LITERAL_QUOTE","STRING_LITERAL_SINGLE_QUOTE","STRING_LITERAL_LONG_SINGLE_QUOTE","STRING_LITERAL_LONG_QUOTE","PrefixedName","prefixedNameToken","PNAME_LN","indexOf","message","token","context","ruleStack","getHumanReadableRuleStack","ruleOccurrenceStack","RULE_OCCURRENCE_STACK","resyncedTokens","BLANK_NODE_LABEL","ANON","regex","or","_i","RegExp","map","source","join","and","option","many","CATCH_ALL_AT_LEAST_ONE","PN_CHARS_BASE","EXPONENT","ECHAR","HEX","PN_LOCAL_ESC","PN_CHARS_U","PN_CHARS","PN_PREFIX","PERCENT","PLX","PN_LOCAL","NIL","STRING_LITERAL1","STRING_LITERAL2","STRING_LITERAL_LONG1","STRING_LITERAL_LONG2","INTEGER_POSITIVE","DECIMAL_POSITIVE","DOUBLE_POSITIVE","INTEGER_NEGATIVE","DECIMAL_NEGATIVE","DOUBLE_NEGATIVE","VAR1","VAR2","_regex__WEBPACK_IMPORTED_MODULE_0__","WS","VARNAME","terminals","helpers_matchers__WEBPACK_IMPORTED_MODULE_1__","STRING_LITERAL_LONG1_TOKEN","STRING_LITERAL_LONG2_TOKEN","PNAME_LN_TOKEN","label","getAsTypedTuple","args","categoryTokenMap","categoryTokens","getShaclTokenMap","getShaclTokenTypes","tokens_a","sparqlTokenMap","ManyIriTakingPredicate","api","NA","SingleIriTakingPredicate","NodeKindIRI","IntTakingPredicate","StringLiteralQuoteTakingPredicate","LangStringTakingPredicate","BooleanTakingPredicate","ShapeExpectingPredicate","AnyLiteralTakingPredicate","keys","localNamesByCategory","other","xsdLocalNames","localNameToCategoryMap","reduce","nameToCategoryMap","category","forEach","localName","localNames","xsdUnprefixedTokenMap","tokenMap","tokenName","iriTokenName","iriOrPrefixCategoryToken","categories","shaclUnprefixedTokenMap","categoryToken","makePrefixer","prefix","memoize_one_esm","prefixes","prefixWithShacl","shacl","prefixWithXsd","xsd","shaclTokenMap","prefixedTokenName","lodash_isequal_default","a","pnameIndex","iriIndex","reverseSort","split","aName","aRemainder","_b","bName","bRemainder","aSortString","toLowerCase","bSortString","aSuffix","bSuffix","sort","accumulator","endsWith","iriTokens","pnameTokens","concat","baseTokens","pathsTokens","nonStandardTokens","stardogSparqlTokens","sparqlTokenTypes","_terminals__WEBPACK_IMPORTED_MODULE_1__","_keywords__WEBPACK_IMPORTED_MODULE_2__","Comment","group","LCurly","RCurly","WhiteSpace","SKIPPED","line_breaks","Star","Unknown","QuestionMark","Plus","Minus","Pipe","ForwardSlash","Caret","Bang","LogicalOr","LogicalAnd","Equals","NotEquals","LessThan","GreaterThan","LessThanEquals","GreaterThanEquals","indexOfSelect","getShaclLocalNameMatcher","shaclPrefix","escape_string_regexp_default","getUnderlyingStartToken","ctx","currentNode","children","currentNodeKey","getLocalName","matcher","exec","addPredicatesAndTypesToShape","shape","shaclRulePredicateObjectListNodes","node","child","verbTokenInsensitive","shapeTypeNode","SHACL_NodeShape","types","type","SHACL_PropertyShape","predicates","SHACL_nodeKind","SHACL_targetNode","SHACL_path","SHACL_hasValue","console","log","getShaclShapeFromBlankNodePropertyList","blankNodeNode","predicateObjectListNode","optionalPredicateObjectListNode","helpers_cst","shaclRulePredicateObjectList","getShaclVisitor","BaseVisitor","ShaclVisitor","shapes","visit","shaclShape","$resetState","$validateShapes","validationErrors","localNameMatcher","bnodeCount","shapesConsolidatedBySubject","consolidatedShapes","subjectImage","consolidatedShape","subjects","shapeType","pathPredicates","nonPathPredicateMap","predicateImage","prefixedImage","validateVisitor","ShaclParser_extends","ShaclParser_ShaclParser","ShaclParser","validateWithVisitor","shaclVisitor","BaseSrsVisitor","getBaseCstVisitorConstructorWithDefaults","OVERRIDE_RULE","shaclPredicateIRI","shaclNodeKind","shaclTargetNode","shaclPropertyPath","shaclLiteralConstraint","shaclListTakingConstraint","shaclShapeExpectingConstraint","shaclHasValueConstraint","shaclVerbShape","SUBRULE2","shaclIRIOrLiteral","shaclShapeType","SHACL_Shape","shaclPropertyPathPath","shaclPredicatePath","shaclSequencePath","shaclAlternativePath","shaclInversePath","shaclZeroOrMorePath","shaclOneOrMorePath","shaclZeroOrOnePath","AT_LEAST_ONE","SHACL_alternativePath","SHACL_inversePath","SHACL_zeroOrMorePath","SHACL_oneOrMorePath","SHACL_zeroOrOnePath","shaclIntConstraint","shaclStringConstraint","shaclStringLiteralQuoteConstraint","shaclLangStringConstraint","shaclBooleanConstraint","shaclAnyLiteralConstraint","shaclXsdInteger","SHACL_select","SHACL_ask","SHACL_xsd_string","CONSUME1","SHACL_xsd_anyURI","shaclXsdBoolean","shaclLanguageInConstraint","shaclShapeListTakingConstraint","shaclIRIListTakingConstraint","shaclShapeOrLiteralListTakingConstraint","SHACL_languageIn","shaclStringCollection","SHACL_and","SHACL_or","SHACL_xone","shaclShapeCollection","SHACL_ignoredProperties","shaclIRICollection","SHACL_in","shaclShapeOrLiteralCollection","shaclShapeOrLiteral","shaclStringWithDoubleCaret","SHACL_xsd_boolean","shaclXsdString","SHACL_xsd_integer","shaclXsdDate","SHACL_xsd_date","shaclXsdAnyURI","shaclTokens","traverse","unsafeTraverse","isCstNode","_traverse","Boolean","TraverseContext","parentCtx","visitSafely","childType","childCtx","transformedCtx","nextCtx","escapeSequence","escapeReplacements","\\","'","\"","f","_","~",".","-","!","$","&","(",")","*","+",",",";","=","/","?","#","@","%","unescapedStringLiteralQuote","unescapedStringLiteralSingleQuote","stringLiteralQuote","stringLiteralSingleQuote","stringLiteralLongQuote","stringLiteralLongSingleQuote","illegalIriChars","escapedIri","unescapedIri","unescape_unescape","item","replace","unicode4","unicode8","escapedChar","fromCharCode","parseInt","charCode","replacement","Error","error","unicodeRegexp","matchers","text","startOffset","match","textToMatch","UCHAR","test"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,OAAA,WAAAH,GACA,iBAAAC,QACAA,QAAA,MAAAD,KAEAD,EAAA,OAAAA,EAAA,WAAuCA,EAAA,aAAAC,KARvC,CASC,oBAAAK,UAAAC,KAAA,WACD,mBCTA,SAAAC,EAAAC,GAQA,IAPA,IAMAC,EAAAC,EANAC,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GAIAM,EAAA,EAAAC,EAAA,GACQD,EAAAH,EAAAK,OAAoBF,IAC5BJ,EAAAC,EAAAG,GACAG,EAAAP,IACAK,EAAAG,KAAAD,EAAAP,GAAA,IAEAO,EAAAP,GAAA,EAEA,IAAAD,KAAAG,EACAO,OAAAC,UAAAC,eAAAC,KAAAV,EAAAH,KACAc,EAAAd,GAAAG,EAAAH,IAKA,IAFAe,KAAAhB,GAEAO,EAAAC,QACAD,EAAAU,OAAAV,GAOA,OAHAW,EAAAR,KAAAS,MAAAD,EAAAb,GAAA,IAGAe,IAEA,SAAAA,IAEA,IADA,IAAAC,EACAf,EAAA,EAAiBA,EAAAY,EAAAV,OAA4BF,IAAA,CAG7C,IAFA,IAAAgB,EAAAJ,EAAAZ,GACAiB,GAAA,EACAC,EAAA,EAAkBA,EAAAF,EAAAd,OAA2BgB,IAAA,CAC7C,IAAAC,EAAAH,EAAAE,GACA,IAAAf,EAAAgB,KAAAF,GAAA,GAEAA,IACAL,EAAAQ,OAAApB,IAAA,GACAe,EAAAM,IAAAC,EAAAN,EAAA,KAGA,OAAAD,EAIA,IAAAQ,EAAA,GAKApB,EAAA,CACAqB,EAAA,EACAC,EAAA,GAGAb,EAAA,GAGA,SAAAS,EAAA1B,GAGA,GAAA4B,EAAA5B,GACA,OAAA4B,EAAA5B,GAAAR,QAGA,IAAAC,EAAAmC,EAAA5B,GAAA,CACAK,EAAAL,EACA+B,GAAA,EACAvC,QAAA,IAUA,OANAsB,EAAAd,GAAAa,KAAApB,EAAAD,QAAAC,IAAAD,QAAAkC,GAGAjC,EAAAsC,GAAA,EAGAtC,EAAAD,QAKAkC,EAAAM,EAAAlB,EAGAY,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAA1C,EAAA2C,EAAAC,GACAV,EAAAW,EAAA7C,EAAA2C,IACAzB,OAAA4B,eAAA9C,EAAA2C,EAAA,CAA0CI,YAAA,EAAAC,IAAAJ,KAK1CV,EAAAe,EAAA,SAAAjD,GACA,oBAAAkD,eAAAC,aACAjC,OAAA4B,eAAA9C,EAAAkD,OAAAC,YAAA,CAAwDC,MAAA,WAExDlC,OAAA4B,eAAA9C,EAAA,cAAiDoD,OAAA,KAQjDlB,EAAAmB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAlB,EAAAkB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAtC,OAAAuC,OAAA,MAGA,GAFAvB,EAAAe,EAAAO,GACAtC,OAAA4B,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAlB,EAAAQ,EAAAc,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAtB,EAAA0B,EAAA,SAAA3D,GACA,IAAA2C,EAAA3C,KAAAsD,WACA,WAA2B,OAAAtD,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAiC,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAgB,EAAAC,GAAsD,OAAA5C,OAAAC,UAAAC,eAAAC,KAAAwC,EAAAC,IAGtD5B,EAAA6B,EAAA,GAEA,IAAAC,GAAA,oBAAA5D,UAAAC,MAAA,kCAAAD,UAAAC,MAAA,iBACA4D,EAAAD,EAAA/C,KAAA0C,KAAAK,GACAA,EAAA/C,KAAAX,EACA0D,IAAAE,QACA,QAAArD,EAAA,EAAgBA,EAAAmD,EAAAjD,OAAuBF,IAAAP,EAAA0D,EAAAnD,IACvC,IAAAU,EAAA0C,EAMA,OAFAxC,EAAAR,KAAA,UAEAU,qCCvJAO,EAAAe,EAAAkB,GAAAjC,EAAAQ,EAAAyB,EAAA,6BAAAC,IAAA,IAAAC,EAAAnC,EAAA,GAEAoC,EAAiBpD,OAAAmD,EAAA,YAAAnD,CAAW,CAC5ByB,KAAA,aACA4B,QAAA,gBAEOH,EAAA,CACPI,OAAYtD,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEAE,UAAevD,OAAAmD,EAAA,YAAAnD,CAAW,CAC1ByB,KAAA,YACA4B,QAAA,eAEAG,SAAcxD,OAAAmD,EAAA,YAAAnD,CAAW,CACzByB,KAAA,WACA4B,QAAA,cAEAI,MAAWzD,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAK,IAAS1D,OAAAmD,EAAA,YAAAnD,CAAW,CACpByB,KAAA,MACA4B,QAAA,SAEAM,IAAS3D,OAAAmD,EAAA,YAAAnD,CAAW,CACpByB,KAAA,MACA4B,QAAA,SAEAO,MAAW5D,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAQ,UAAe7D,OAAAmD,EAAA,YAAAnD,CAAW,CAC1ByB,KAAA,YACA4B,QAAA,eAEAS,eAAoB9D,OAAAmD,EAAA,YAAAnD,CAAW,CAC/ByB,KAAA,iBACA4B,QAAA,oBAEAU,OAAY/D,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEAW,GAAQhE,OAAAmD,EAAA,YAAAnD,CAAW,CACnByB,KAAA,KACA4B,QAAA,QAEAY,MAAWjE,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAa,EAAOlE,OAAAmD,EAAA,YAAAnD,CAAW,CAClByB,KAAA,IACA4B,QAAA,MAEAc,SAAcnE,OAAAmD,EAAA,YAAAnD,CAAW,CACzByB,KAAA,WACA4B,QAAA,cAEAe,SAAcpE,OAAAmD,EAAA,YAAAnD,CAAW,CACzByB,KAAA,WACA4B,QAAA,cAEAgB,GAAQrE,OAAAmD,EAAA,YAAAnD,CAAW,CACnByB,KAAA,KACA4B,QAAA,QAEAiB,KAAUtE,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,UAEAkB,OAAYvE,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEAmB,SAAcxE,OAAAmD,EAAA,YAAAnD,CAAW,CACzByB,KAAA,WACA4B,QAAA,cAEAoB,IAASzE,OAAAmD,EAAA,YAAAnD,CAAW,CACpByB,KAAA,MACA4B,QAAA,SAEAqB,KAAU1E,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,UAEAsB,QAAa3E,OAAAmD,EAAA,YAAAnD,CAAW,CACxByB,KAAA,UACA4B,QAAA,aAEAuB,MAAW5E,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAwB,OAAY7E,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEAyB,IAAS9E,OAAAmD,EAAA,YAAAnD,CAAW,CACpByB,KAAA,MACA4B,QAAA,SAEA0B,KAAU/E,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,UAEA2B,OAAYhF,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEA4B,MAAWjF,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEA6B,OAAYlF,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEA8B,KAAUnF,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,UAEA+B,OAAYpF,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEAgC,KAAUrF,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,UAEAiC,MAAWtF,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAkC,KAAUvF,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,UAEAmC,OAAYxF,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEAoC,IAASzF,OAAAmD,EAAA,YAAAnD,CAAW,CACpByB,KAAA,MACA4B,QAAA,SAEAqC,GAAQ1F,OAAAmD,EAAA,YAAAnD,CAAW,CACnByB,KAAA,KACA4B,QAAA,QAEAsC,KAAU3F,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,UAEAuC,KAAU5F,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,UAEAwC,YAAiB7F,OAAAmD,EAAA,YAAAnD,CAAW,CAC5ByB,KAAA,cACA4B,QAAA,kBAEAyC,YAAiB9F,OAAAmD,EAAA,YAAAnD,CAAW,CAC5ByB,KAAA,cACA4B,QAAA,kBAEA0C,aAAkB/F,OAAAmD,EAAA,YAAAnD,CAAW,CAC7ByB,KAAA,eACA4B,QAAA,mBAEA2C,KAAUhG,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,UAEA4C,OAAYjG,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEA6C,OAAYlG,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEA8C,MAAWnG,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEA+C,QAAapG,OAAAmD,EAAA,YAAAnD,CAAW,CACxByB,KAAA,UACA4B,QAAA,aAEAgD,MAAWrG,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAiD,IAAStG,OAAAmD,EAAA,YAAAnD,CAAW,CACpByB,KAAA,MACA4B,QAAA,SAEAkD,SAAcvG,OAAAmD,EAAA,YAAAnD,CAAW,CACzByB,KAAA,WACA4B,QAAA,cAEAmD,QAAaxG,OAAAmD,EAAA,YAAAnD,CAAW,CACxByB,KAAA,UACA4B,QAAA,aAEAoD,KAAUzG,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,UAEAqD,OAAY1G,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEAsD,MAAW3G,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAuD,MAAW5G,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAwD,MAAW7G,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAyD,OAAY9G,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEA0D,IAAS/G,OAAAmD,EAAA,YAAAnD,CAAW,CACpByB,KAAA,MACA4B,QAAA,SAEA2D,KAAUhH,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,UAEA4D,YAAiBjH,OAAAmD,EAAA,YAAAnD,CAAW,CAC5ByB,KAAA,cACA4B,QAAA,iBAEA6D,SAAclH,OAAAmD,EAAA,YAAAnD,CAAW,CACzByB,KAAA,WACA4B,QAAA,cAEA8D,MAAWnH,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEA+D,IAASpH,OAAAmD,EAAA,YAAAnD,CAAW,CACpByB,KAAA,MACA4B,QAAA,SAEAgE,IAASrH,OAAAmD,EAAA,YAAAnD,CAAW,CACpByB,KAAA,MACA4B,QAAA,SAEAiE,MAAWtH,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAkE,KAAUvH,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,UAEAmE,IAASxH,OAAAmD,EAAA,YAAAnD,CAAW,CACpByB,KAAA,MACA4B,QAAA,SAEAoE,KAAUzH,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,UAEAqE,MAAW1H,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAsE,MAAW3H,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAuE,OAAY5H,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEAwE,OAAY7H,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEAyE,MAAW9H,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEA0E,MAAW/H,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEA2E,eAAoBhI,OAAAmD,EAAA,YAAAnD,CAAW,CAC/ByB,KAAA,iBACA4B,QAAA,oBAEA4E,SAAcjI,OAAAmD,EAAA,YAAAnD,CAAW,CACzByB,KAAA,WACA4B,QAAA,cAEA6E,UAAelI,OAAAmD,EAAA,YAAAnD,CAAW,CAC1ByB,KAAA,YACA4B,QAAA,eAEA8E,QAAanI,OAAAmD,EAAA,YAAAnD,CAAW,CACxByB,KAAA,UACA4B,QAAA,aAEA+E,UAAepI,OAAAmD,EAAA,YAAAnD,CAAW,CAC1ByB,KAAA,YACA4B,QAAA,eAEAgF,SAAcrI,OAAAmD,EAAA,YAAAnD,CAAW,CACzByB,KAAA,WACA4B,QAAA,cAEAiF,KAAUtI,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,UAEAkF,MAAWvI,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAmF,IAASxI,OAAAmD,EAAA,YAAAnD,CAAW,CACpByB,KAAA,MACA4B,QAAA,SAEAoF,MAAWzI,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAqF,QAAa1I,OAAAmD,EAAA,YAAAnD,CAAW,CACxByB,KAAA,UACA4B,QAAA,aAEAsF,QAAa3I,OAAAmD,EAAA,YAAAnD,CAAW,CACxByB,KAAA,UACA4B,QAAA,aAEAuF,SAAc5I,OAAAmD,EAAA,YAAAnD,CAAW,CACzByB,KAAA,WACA4B,QAAA,cAEAwF,GAAQ7I,OAAAmD,EAAA,YAAAnD,CAAW,CACnByB,KAAA,KACA4B,QAAA,QAEAyF,IAAS9I,OAAAmD,EAAA,YAAAnD,CAAW,CACpByB,KAAA,MACA4B,QAAA,SAEA0F,KAAU/I,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,UAEA2F,QAAahJ,OAAAmD,EAAA,YAAAnD,CAAW,CACxByB,KAAA,UACA4B,QAAA,aAEA4F,IAASjJ,OAAAmD,EAAA,YAAAnD,CAAW,CACpByB,KAAA,MACA4B,QAAA,SAEA6F,KAAUlJ,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,UAEA8F,OAAYnJ,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEA+F,OAAYpJ,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEAgG,OAAYrJ,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEAiG,SAActJ,OAAAmD,EAAA,YAAAnD,CAAW,CACzByB,KAAA,WACA4B,QAAA,cAEAkG,GAAQvJ,OAAAmD,EAAA,YAAAnD,CAAW,CACnByB,KAAA,KACA4B,QAAA,QAEAmG,QAAaxJ,OAAAmD,EAAA,YAAAnD,CAAW,CACxByB,KAAA,UACA4B,QAAA,aAEAoG,MAAWzJ,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAqG,SAAc1J,OAAAmD,EAAA,YAAAnD,CAAW,CACzByB,KAAA,WACA4B,QAAA,cAEAsG,MAAW3J,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAuG,MAAW5J,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAwG,QAAa7J,OAAAmD,EAAA,YAAAnD,CAAW,CACxByB,KAAA,UACA4B,QAAA,aAEAyG,UAAe9J,OAAAmD,EAAA,YAAAnD,CAAW,CAC1ByB,KAAA,YACA4B,QAAA,eAEA0G,UAAe/J,OAAAmD,EAAA,YAAAnD,CAAW,CAC1ByB,KAAA,YACA4B,QAAA,eAEA2G,MAAWhK,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEA4G,OAAYjK,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEA6G,QAAalK,OAAAmD,EAAA,YAAAnD,CAAW,CACxByB,KAAA,UACA4B,QAAA,aAEA8G,OAAYnK,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEA+G,WAAgBpK,OAAAmD,EAAA,YAAAnD,CAAW,CAC3ByB,KAAA,aACA4B,QAAA,gBAEAgH,MAAWrK,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAiH,IAAStK,OAAAmD,EAAA,YAAAnD,CAAW,CACpByB,KAAA,MACA4B,QAAA,SAEAkH,IAASvK,OAAAmD,EAAA,YAAAnD,CAAW,CACpByB,KAAA,MACA4B,QAAA,SAEAmH,IAASxK,OAAAmD,EAAA,YAAAnD,CAAW,CACpByB,KAAA,MACA4B,QAAA,SAEAoH,OAAYzK,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEAqH,aAAkB1K,OAAAmD,EAAA,YAAAnD,CAAW,CAC7ByB,KAAA,eACA4B,QAAA,kBAEAsH,UAAe3K,OAAAmD,EAAA,YAAAnD,CAAW,CAC1ByB,KAAA,YACA4B,QAAA,eAEAuH,KAAU5K,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,UAEAwH,MAAW7K,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,WAEAyH,GAAQ9K,OAAAmD,EAAA,YAAAnD,CAAW,CACnByB,KAAA,KACA4B,QAAA,QAEA0H,OAAY/K,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,YAEAD,aACA4H,IAAShL,OAAAmD,EAAA,YAAAnD,CAAW,CACpByB,KAAA,MACA4B,QAAA,OACA4H,WAAA7H,sCCnfApC,EAAAQ,EAAAyB,EAAA,sBAAAiI,eAAA,IACAC,EADAhI,EAAAnC,EAAA,GAAAoK,GACAD,EAAA,SAAA3J,EAAA6J,GAIA,OAHAF,EAAAnL,OAAAsL,gBACA,CAAcC,UAAA,cAAgBC,OAAA,SAAAhK,EAAA6J,GAAsC7J,EAAA+J,UAAAF,IACpE,SAAA7J,EAAA6J,GAA6B,QAAAxI,KAAAwI,IAAAnL,eAAA2C,KAAArB,EAAAqB,GAAAwI,EAAAxI,MAC7BrB,EAAA6J,IAEA,SAAA7J,EAAA6J,GAEA,SAAAI,IAAuBtM,KAAAuM,YAAAlK,EADvB2J,EAAA3J,EAAA6J,GAEA7J,EAAAvB,UAAA,OAAAoL,EAAArL,OAAAuC,OAAA8I,IAAAI,EAAAxL,UAAAoL,EAAApL,UAAA,IAAAwL,KAGAE,EAA4B,WAS5B,OARAA,EAAA3L,OAAA4L,QAAA,SAAAzJ,GACA,QAAAlB,EAAAtB,EAAA,EAAA+C,EAAAmJ,UAAAhM,OAAgDF,EAAA+C,EAAO/C,IAEvD,QAAAkD,KADA5B,EAAA4K,UAAAlM,GACAK,OAAAC,UAAAC,eAAAC,KAAAc,EAAA4B,KACAV,EAAAU,GAAA5B,EAAA4B,IAEA,OAAAV,IAEA3B,MAAArB,KAAA0M,YAEAC,EAAS9K,EAAQ,GAAU+K,EAAAD,EAAAC,iBAAAC,EAAAF,EAAAE,eAE3Bd,aAAA,SAAAe,GAEA,SAAAf,aAAAgB,EAAAC,EAAAC,EAAAC,QACA,IAAAH,IAAgCA,EAAA,SAChC,IAAAC,IAAgCA,EAAAJ,QAChC,IAAAK,IAAyCA,EAAAD,QACzC,IAAAE,IAA6CA,GAAA,GAC7C,IAAAC,EAAAL,EAAA9L,KAAAhB,KAAAgN,EAAAR,EAAA,CAAwDY,WAAA,EAAAC,iBAAA,GAAyCN,KAAA/M,KA6QjG,OAtQAmN,EAAAG,cAAA,GACAH,EAAAI,eAAA,GAGAJ,EAAAK,kBAAA,WACAL,EAAAG,cAAA,GACAH,EAAAI,eAAA,IAEAJ,EAAAM,SAAA,SAAAC,GACA,OAAAP,EAAAQ,MAAAF,SAAAC,GAAAV,QAKAG,EAAAS,MAAA,SAAAF,EAAAzK,QACA,IAAAA,IAAkCA,EAAA,YAClCkK,EAAAU,MAAAV,EAAAQ,MAAAF,SAAAC,GAAAV,OACA,IAAAc,EAAAX,EAAAY,UAAA,GAAA9K,IAGA+K,EAAAb,EAAAa,OAAAnK,QACA0J,EAAAJ,EAAAI,eAAA1J,QAEA,OADAsJ,EAAAK,oBACA,CACAQ,SACAT,iBACAO,QAGAX,EAAAY,UAAAZ,EAAAc,KAAA,qBAAAhL,GACAkK,EAAAe,KAAA,WAAoC,OAAAf,EAAAgB,QAAAhB,EAAAiB,UAAA,CAAwCC,KAAA,CAAApL,SAE5EkK,EAAAiB,UAAAjB,EAAAc,KAAA,qBAAAhL,GACAkK,EAAAmB,GAAA,CACA,CAAiBC,IAAA,WAAmB,OAAApB,EAAAgB,QAAAhB,EAAAqB,aACpC,CACAD,IAAA,WACApB,EAAAgB,QAAAhB,EAAAsB,QAAA,CAAsDJ,KAAA,CAAApL,KACtDkK,EAAAuB,QAAA7B,EAAA8B,cAKAxB,EAAAqB,UAAArB,EAAAc,KAAA,uBACAd,EAAAmB,GAAA,CACA,CAAiBC,IAAA,WAAmB,OAAApB,EAAAgB,QAAAhB,EAAAyB,YACpC,CAAiBL,IAAA,WAAmB,OAAApB,EAAAgB,QAAAhB,EAAA0B,QACpC,CAAiBN,IAAA,WAAmB,OAAApB,EAAAgB,QAAAhB,EAAA2B,gBACpC,CAAiBP,IAAA,WAAmB,OAAApB,EAAAgB,QAAAhB,EAAA4B,kBAGpC5B,EAAAyB,SAAAzB,EAAAc,KAAA,sBACAd,EAAAuB,QAAA7B,EAAAmC,YACA,IAAAC,EAAA9B,EAAAuB,QAAA7B,EAAAqC,UACAC,EAAAhC,EAAAuB,QAAA7B,EAAAuC,QACAC,EAAAJ,EAAAK,MAAAzL,MAAA,MACA0L,EAAAJ,EAAAG,MACAnC,EAAAG,cAAA+B,GAAAE,EACApC,EAAAuB,QAAA7B,EAAA8B,UAEAxB,EAAA0B,KAAA1B,EAAAc,KAAA,kBACAd,EAAAuB,QAAA7B,EAAA2C,UACArC,EAAAuB,QAAA7B,EAAAuC,QACAjC,EAAAuB,QAAA7B,EAAA8B,UAEAxB,EAAA4B,WAAA5B,EAAAc,KAAA,wBACAd,EAAAuB,QAAA7B,EAAA1H,MACAgI,EAAAuB,QAAA7B,EAAAuC,UAEAjC,EAAA2B,aAAA3B,EAAAc,KAAA,0BACAd,EAAAuB,QAAA7B,EAAAzH,QACA,IAAA6J,EAAA9B,EAAAuB,QAAA7B,EAAAqC,UACAC,EAAAhC,EAAAuB,QAAA7B,EAAAuC,QACAC,EAAAJ,EAAAK,MAAAzL,MAAA,MACA0L,EAAAJ,EAAAG,MACAnC,EAAAG,cAAA+B,GAAAE,IAEApC,EAAAsB,QAAAtB,EAAAc,KAAA,mBAAAhL,GACAkK,EAAAmB,GAAA,CACA,CACAC,IAAA,WACApB,EAAAsC,IAAA,CACA,CACAlB,IAAA,WAAkD,OAAApB,EAAAgB,QAAAhB,EAAAuC,WAElD,CACAC,KAAA,WAAmD,kBAAA1M,GACnDsL,IAAA,WAAkD,OAAApB,EAAAgB,QAAAhB,EAAAyC,2BAGlDzC,EAAAgB,QAAAhB,EAAA0C,uBAGA,CACAtB,IAAA,WACApB,EAAAgB,QAAAhB,EAAA2C,uBACA3C,EAAA4C,OAAA,WAAkD,OAAA5C,EAAA6C,SAAA7C,EAAA0C,6BAOlD1C,EAAA8C,mBAAA9C,EAAAc,KAAA,gCACAd,EAAAmB,GAAA,CACA,CACAC,IAAA,WACApB,EAAAgB,QAAAhB,EAAAuC,SACAvC,EAAAgB,QAAAhB,EAAA0C,uBAGA,CACAtB,IAAA,WACApB,EAAAgB,QAAAhB,EAAA2C,uBACA3C,EAAA4C,OAAA,WAAkD,OAAA5C,EAAA6C,SAAA7C,EAAA0C,6BASlD1C,EAAAyC,sBAAAzC,EAAAc,KAAA,mCACAd,EAAAuB,QAAA7B,EAAAqD,QACA/C,EAAAgB,QAAAhB,EAAA8C,oBACA9C,EAAAuB,QAAA7B,EAAAsD,UAEAhD,EAAA0C,oBAAA1C,EAAAc,KAAA,iCACAd,EAAAgB,QAAAhB,EAAAiD,MACAjD,EAAAgB,QAAAhB,EAAAkD,YACAlD,EAAAe,KAAA,WACAf,EAAAuB,QAAA7B,EAAAyD,WACAnD,EAAA4C,OAAA,WACA5C,EAAA6C,SAAA7C,EAAAiD,MACAjD,EAAA6C,SAAA7C,EAAAkD,kBAIAlD,EAAAuC,QAAAvC,EAAAc,KAAA,qBACAd,EAAAmB,GAAA,CACA,CAAiBC,IAAA,WAAmB,OAAApB,EAAAgB,QAAAhB,EAAAoD,OACpC,CAAiBhC,IAAA,WAAmB,OAAApB,EAAAgB,QAAAhB,EAAAqD,aACpC,CAAiBjC,IAAA,WAAmB,OAAApB,EAAAgB,QAAAhB,EAAAsD,kBAGpCtD,EAAAuD,UAAAvD,EAAAc,KAAA,uBACAd,EAAAgB,QAAAhB,EAAAoD,OAEApD,EAAAkD,WAAAlD,EAAAc,KAAA,wBACAd,EAAAgB,QAAAhB,EAAA3J,QACA2J,EAAAe,KAAA,WACAf,EAAAuB,QAAA7B,EAAA8D,OACAxD,EAAA6C,SAAA7C,EAAA3J,YAGA2J,EAAAiD,KAAAjD,EAAAc,KAAA,kBACAd,EAAAmB,GAAA,CACA,CAAiBC,IAAA,WAAmB,OAAApB,EAAAgB,QAAAhB,EAAAuD,aACpC,CAAiBnC,IAAA,WAAmB,OAAApB,EAAAuB,QAAA7B,EAAA9H,SAGpCoI,EAAAyD,QAAAzD,EAAAc,KAAA,qBACAd,EAAAmB,GAAA,CACA,CAAiBC,IAAA,WAAmB,OAAApB,EAAAgB,QAAAhB,EAAA0D,cACpC,CAAiBtC,IAAA,WAAmB,OAAApB,EAAAgB,QAAAhB,EAAA2D,kBACpC,CAAiBvC,IAAA,WAAmB,OAAApB,EAAAgB,QAAAhB,EAAA4D,sBAGpC5D,EAAA2C,sBAAA3C,EAAAc,KAAA,mCACAd,EAAAuB,QAAA7B,EAAAmE,UACA7D,EAAAgB,QAAAhB,EAAA0C,qBACA1C,EAAAuB,QAAA7B,EAAAoE,YAEA9D,EAAA3J,OAAA2J,EAAAc,KAAA,oBACAd,EAAAmB,GAAA,CACA,CAAiBC,IAAA,WAAmB,OAAApB,EAAAgB,QAAAhB,EAAAoD,OACpC,CAAiBhC,IAAA,WAAmB,OAAApB,EAAAgB,QAAAhB,EAAAqD,aACpC,CAAiBjC,IAAA,WAAmB,OAAApB,EAAAgB,QAAAhB,EAAAsD,cACpC,CAAiBlC,IAAA,WAAmB,OAAApB,EAAAgB,QAAAhB,EAAA2C,yBACpC,CAAiBvB,IAAA,WAAmB,OAAApB,EAAAgB,QAAAhB,EAAAyD,eAGpCzD,EAAAsD,WAAAtD,EAAAc,KAAA,wBACAd,EAAAuB,QAAA7B,EAAAqE,QACA/D,EAAAe,KAAA,WAAoC,OAAAf,EAAAgB,QAAAhB,EAAA3J,UACpC2J,EAAAuB,QAAA7B,EAAAsE,UAEAhE,EAAA2D,eAAA3D,EAAAc,KAAA,4BACAd,EAAAmB,GAAA,CACA,CAAiBC,IAAA,WAAmB,OAAApB,EAAAuB,QAAA7B,EAAAuE,WACpC,CAAiB7C,IAAA,WAAmB,OAAApB,EAAAuB,QAAA7B,EAAAwE,WACpC,CAAiB9C,IAAA,WAAmB,OAAApB,EAAAuB,QAAA7B,EAAAyE,cAGpCnE,EAAA0D,WAAA1D,EAAAc,KAAA,wBACAd,EAAAgB,QAAAhB,EAAAoE,QACApE,EAAA4C,OAAA,WACA5C,EAAAmB,GAAA,CACA,CAAqBC,IAAA,WAAmB,OAAApB,EAAAuB,QAAA7B,EAAA2E,WACxC,CACAjD,IAAA,WACApB,EAAAuB,QAAA7B,EAAA4E,aACAtE,EAAAgB,QAAAhB,EAAAoD,aAMApD,EAAA4D,eAAA5D,EAAAc,KAAA,4BACAd,EAAAmB,GAAA,CACA,CAAiBC,IAAA,WAAmB,OAAApB,EAAAuB,QAAA7B,EAAApB,QACpC,CAAiB8C,IAAA,WAAmB,OAAApB,EAAAuB,QAAA7B,EAAAnB,aAGpCyB,EAAAoE,OAAApE,EAAAc,KAAA,oBACAd,EAAAmB,GAAA,CACA,CAAiBC,IAAA,WAAmB,OAAApB,EAAAuB,QAAA7B,EAAA6E,wBACpC,CAAiBnD,IAAA,WAAmB,OAAApB,EAAAuB,QAAA7B,EAAA8E,+BACpC,CACApD,IAAA,WACA,OAAApB,EAAAuB,QAAA7B,EAAA+E,oCAGA,CAAiBrD,IAAA,WAAmB,OAAApB,EAAAuB,QAAA7B,EAAAgF,iCAGpC1E,EAAAoD,IAAApD,EAAAc,KAAA,iBACAd,EAAAmB,GAAA,CACA,CAAiBC,IAAA,WAAmB,OAAApB,EAAAuB,QAAA7B,EAAAuC,UACpC,CAAiBb,IAAA,WAAmB,OAAApB,EAAAgB,QAAAhB,EAAA2E,oBAGpC3E,EAAA2E,aAAA3E,EAAAc,KAAA,0BACA,IAAA8D,EAAA5E,EAAAmB,GAAA,CACA,CAAiBC,IAAA,WAAmB,OAAApB,EAAAuB,QAAA7B,EAAAmF,YACpC,CAAiBzD,IAAA,WAAmB,OAAApB,EAAAuB,QAAA7B,EAAAqC,cAEpC6C,EAAAzC,MAAAzL,MAAA,EAAAkO,EAAAzC,MAAA2C,QAAA,QACA9E,EAAAG,eACAH,EAAAI,eAAA3M,KAAA,CACA0B,KAAA,yBACA4P,QAAA,8DACAC,MAAAJ,EACAK,QAAA,CACAC,UAAAlF,EAAAmF,4BACAC,oBAAApF,EAAAqF,sBAAA3O,SAEA4O,eAAA,OAIAtF,EAAAqD,UAAArD,EAAAc,KAAA,uBACAd,EAAAmB,GAAA,CACA,CAAiBC,IAAA,WAAmB,OAAApB,EAAAuB,QAAA7B,EAAA6F,oBACpC,CAAiBnE,IAAA,WAAmB,OAAApB,EAAAuB,QAAA7B,EAAA8F,YAGpCxF,EAAAQ,MAAA,IAA0B3J,EAAA,MAAKiJ,GAC/BC,GACYlJ,EAAA,OAAMkJ,oBAAAC,GAElBA,EAEA,OArRAlB,EAAAF,aAAAe,GAqRAf,aAtRA,CAuRE/H,EAAA,wCCjTFnC,EAAAQ,EAAAyB,EAAA,sBAAA8O,IAAO,IAAAA,EAAA,CACPC,GAAA,WAEA,IADA,IAAAjQ,EAAA,GACAkQ,EAAA,EAAwBA,EAAApG,UAAAhM,OAAuBoS,IAC/ClQ,EAAAkQ,GAAApG,UAAAoG,GAEA,WAAAC,OAAAnQ,EAAAoQ,IAAA,SAAArG,GAEA,UADAA,EAAAsG,OACA,MACSC,KAAA,OAETC,IAAA,WAEA,IADA,IAAAvQ,EAAA,GACAkQ,EAAA,EAAwBA,EAAApG,UAAAhM,OAAuBoS,IAC/ClQ,EAAAkQ,GAAApG,UAAAoG,GAEA,WAAAC,OAAAnQ,EAAAoQ,IAAA,SAAArG,GAEA,UADAA,EAAAsG,OACA,MACSC,KAAA,MAETE,OAAA,SAAAxQ,GACA,WAAAmQ,OAAA,IAAAnQ,EAAAqQ,OAAA,OAEAI,KAAA,SAAAzQ,GACA,WAAAmQ,OAAA,IAAAnQ,EAAAqQ,OAAA,wCCzBApR,EAAAQ,EAAAyB,EAAA,sBAAAwP,IAAAzR,EAAAQ,EAAAyB,EAAA,sBAAAsL,IAAAvN,EAAAQ,EAAAyB,EAAA,sBAAAyP,IAAA1R,EAAAQ,EAAAyB,EAAA,sBAAA0N,IAAA3P,EAAAQ,EAAAyB,EAAA,sBAAAsN,IAAAvP,EAAAQ,EAAAyB,EAAA,sBAAAuN,IAAAxP,EAAAQ,EAAAyB,EAAA,sBAAA0P,IAAA3R,EAAAQ,EAAAyB,EAAA,sBAAA2P,IAAA5R,EAAAQ,EAAAyB,EAAA,sBAAA4P,IAAA7R,EAAAQ,EAAAyB,EAAA,sBAAA6P,IAAA9R,EAAAQ,EAAAyB,EAAA,sBAAA8P,IAAA/R,EAAAQ,EAAAyB,EAAA,sBAAA+P,IAAAhS,EAAAQ,EAAAyB,EAAA,sBAAAgQ,IAAAjS,EAAAQ,EAAAyB,EAAA,sBAAAiQ,IAAAlS,EAAAQ,EAAAyB,EAAA,sBAAAkQ,IAAAnS,EAAAQ,EAAAyB,EAAA,sBAAAmQ,IAAApS,EAAAQ,EAAAyB,EAAA,sBAAA6O,IAAA9Q,EAAAQ,EAAAyB,EAAA,sBAAAoQ,IAAArS,EAAAQ,EAAAyB,EAAA,sBAAAqQ,IAAAtS,EAAAQ,EAAAyB,EAAA,sBAAAsQ,IAAAvS,EAAAQ,EAAAyB,EAAA,sBAAAuQ,IAAAxS,EAAAQ,EAAAyB,EAAA,sBAAAwQ,IAAAzS,EAAAQ,EAAAyB,EAAA,sBAAAwN,IAAAzP,EAAAQ,EAAAyB,EAAA,sBAAAyQ,IAAA1S,EAAAQ,EAAAyB,EAAA,sBAAA0Q,IAAA3S,EAAAQ,EAAAyB,EAAA,sBAAA2Q,IAAA5S,EAAAQ,EAAAyB,EAAA,sBAAA4Q,IAAA7S,EAAAQ,EAAAyB,EAAA,sBAAA6Q,IAAA9S,EAAAQ,EAAAyB,EAAA,sBAAA8Q,IAAA/S,EAAAQ,EAAAyB,EAAA,sBAAA+Q,IAAAhT,EAAAQ,EAAAyB,EAAA,sBAAAgR,IAAAjT,EAAAQ,EAAAyB,EAAA,sBAAA4O,IAAA7Q,EAAAQ,EAAAyB,EAAA,sBAAAoL,IAAArN,EAAAQ,EAAAyB,EAAA,sBAAAkO,IAAA,IAAA+C,EAAAlT,EAAA,GAEOyR,EAAA,UACAlE,EAAA,gCACAmE,EAAA,yLACA/B,EAAA,6BACAJ,EAAA,MACAC,EAAA,wBACAmC,EAAA,eACAC,EAAA,gBACAuB,EAAA,6BACAtB,EAAA,cACAC,EAAA,8BACAC,EAAiBmB,EAAA,EAAKlC,GAAAU,EAAA,KACtBM,EAAekB,EAAA,EAAKlC,GAAAe,EAAA,uDACpBE,EAAgBiB,EAAA,EAAK5B,IAAAI,EAAoBwB,EAAA,EAAK3B,OAAQ2B,EAAA,EAAK5B,IAAK4B,EAAA,EAAK1B,KAAM0B,EAAA,EAAKlC,GAAAgB,EAAA,OAAAA,KAChFE,EAAcgB,EAAA,EAAK5B,IAAA,IAAAO,KACnBM,EAAUe,EAAA,EAAKlC,GAAAkB,EAAAJ,GACfM,EAAec,EAAA,EAAK5B,IAAK4B,EAAA,EAAKlC,GAAAe,EAAA,SAAAI,GAAiCe,EAAA,EAAK3B,OAAQ2B,EAAA,EAAK5B,IAAK4B,EAAA,EAAK1B,KAAM0B,EAAA,EAAKlC,GAAAgB,EAAA,SAAAG,IAAgCe,EAAA,EAAKlC,GAAAgB,EAAA,IAAAG,MAC3IiB,EAAcF,EAAA,EAAK5B,IAAK4B,EAAA,EAAKlC,GAAAe,EAAA,MAAuBmB,EAAA,EAAK1B,KAAM0B,EAAA,EAAKlC,GAAAe,EAAA,qDACpEjB,EAAWoC,EAAA,EAAK5B,IAAA,KAAW4B,EAAA,EAAK1B,KAAA2B,GAAA,MAChCd,EAAUa,EAAA,EAAK5B,IAAA,KAAW4B,EAAA,EAAK1B,KAAA2B,GAAA,MAC/Bb,EAAsBY,EAAA,EAAK5B,IAAA,IAAU4B,EAAA,EAAK1B,KAAM0B,EAAA,EAAKlC,GAAA,8BAAAY,IAAA,KACrDW,EAAsBW,EAAA,EAAK5B,IAAA,IAAU4B,EAAA,EAAK1B,KAAM0B,EAAA,EAAKlC,GAAA,8BAAAY,IAAA,KACrDY,EAA2BU,EAAA,EAAK5B,IAAA,MAAY4B,EAAA,EAAK1B,KAAM0B,EAAA,EAAK5B,IAAK4B,EAAA,EAAK3B,OAAQ2B,EAAA,EAAKlC,GAAA,WAAiBkC,EAAA,EAAKlC,GAAA,SAAAY,KAAA,OACzGa,EAA2BS,EAAA,EAAK5B,IAAA,MAAY4B,EAAA,EAAK1B,KAAM0B,EAAA,EAAK5B,IAAK4B,EAAA,EAAK3B,OAAQ2B,EAAA,EAAKlC,GAAA,WAAiBkC,EAAA,EAAKlC,GAAA,SAAAY,KAAA,OACzGnC,EAAayD,EAAA,EAAKlC,GAAIkC,EAAA,EAAK5B,IAAA,WAAAK,GAA4BuB,EAAA,EAAK5B,IAAA,QAAAK,GAAyBuB,EAAA,EAAK5B,IAAA,MAAAK,IAC1Fe,EAAuBQ,EAAA,EAAK5B,IAAA,KAAA/B,GAC5BoD,EAAuBO,EAAA,EAAK5B,IAAA,KAAA9B,GAC5BoD,EAAsBM,EAAA,EAAK5B,IAAA,KAAA7B,GAC3BoD,EAAuBK,EAAA,EAAK5B,IAAA,IAAA/B,GAC5BuD,EAAuBI,EAAA,EAAK5B,IAAA,IAAA9B,GAC5BuD,EAAsBG,EAAA,EAAK5B,IAAA,IAAA7B,GAC3BuD,EAAWE,EAAA,EAAK5B,IAAA,KAAA8B,GAChBH,EAAWC,EAAA,EAAK5B,IAAA,KAAA8B,GAChBvC,EAAuBqC,EAAA,EAAK5B,IAAA,KAAW4B,EAAA,EAAKlC,GAAAe,EAAA,MAAuBmB,EAAA,EAAK3B,OAAQ2B,EAAA,EAAK5B,IAAK4B,EAAA,EAAK1B,KAAM0B,EAAA,EAAKlC,GAAAgB,EAAA,OAAAA,KAC1G3E,EAAe6F,EAAA,EAAK5B,IAAK4B,EAAA,EAAK3B,OAAAU,GAAA,KAC9B9B,EAAe+C,EAAA,EAAK5B,IAAAjE,EAAA+E,mCCrC3BpS,EAAAe,EAAAkB,GAAAjC,EAAAQ,EAAAyB,EAAA,8BAAAoR,IAAA,IAAAlR,EAAAnC,EAAA,GAAAsT,EAAAtT,EAAA,GAGAuT,EAAiCvU,OAAAmD,EAAA,YAAAnD,CAAW,CAC5CyB,KAAA,uBACA4B,QAAaiR,EAAA,IAEbE,EAAiCxU,OAAAmD,EAAA,YAAAnD,CAAW,CAC5CyB,KAAA,uBACA4B,QAAaiR,EAAA,IAEbG,EAAqBzU,OAAAmD,EAAA,YAAAnD,CAAW,CAChCyB,KAAA,WACA4B,QAAaiR,EAAA,IAEND,EAAA,CACP9F,OAAYvO,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAiBiR,EAAA,EACjBI,MAAA,yBAEA/D,QAAa3Q,OAAAmD,EAAA,YAAAnD,CAAW,CACxByB,KAAA,UACA4B,QAAiBiR,EAAA,IAEjB/D,QAAavQ,OAAAmD,EAAA,YAAAnD,CAAW,CACxByB,KAAA,UACA4B,QAAiBiR,EAAA,IAEjB9D,QAAaxQ,OAAAmD,EAAA,YAAAnD,CAAW,CACxByB,KAAA,UACA4B,QAAiBiR,EAAA,IAEjB7D,OAAYzQ,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAiBiR,EAAA,IAEjBZ,iBAAsB1T,OAAAmD,EAAA,YAAAnD,CAAW,CACjCyB,KAAA,mBACA4B,QAAiBiR,EAAA,IAEjBX,iBAAsB3T,OAAAmD,EAAA,YAAAnD,CAAW,CACjCyB,KAAA,mBACA4B,QAAiBiR,EAAA,IAEjBV,gBAAqB5T,OAAAmD,EAAA,YAAAnD,CAAW,CAChCyB,KAAA,kBACA4B,QAAiBiR,EAAA,IAEjBT,iBAAsB7T,OAAAmD,EAAA,YAAAnD,CAAW,CACjCyB,KAAA,mBACA4B,QAAiBiR,EAAA,IAEjBR,iBAAsB9T,OAAAmD,EAAA,YAAAnD,CAAW,CACjCyB,KAAA,mBACA4B,QAAiBiR,EAAA,IAEjBP,gBAAqB/T,OAAAmD,EAAA,YAAAnD,CAAW,CAChCyB,KAAA,kBACA4B,QAAiBiR,EAAA,IAEjBd,qBAAAe,EACAd,qBAAAe,EACAlB,gBAAqBtT,OAAAmD,EAAA,YAAAnD,CAAW,CAChCyB,KAAA,kBACA4B,QAAiBiR,EAAA,EACjBrJ,WAAAsJ,IAEAhB,gBAAqBvT,OAAAmD,EAAA,YAAAnD,CAAW,CAChCyB,KAAA,kBACA4B,QAAiBiR,EAAA,EACjBrJ,WAAAuJ,IAEAnB,IAASrT,OAAAmD,EAAA,YAAAnD,CAAW,CACpByB,KAAA,MACA4B,QAAiBiR,EAAA,EACjBI,MAAA,OAEA5C,KAAU9R,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAiBiR,EAAA,EACjBI,MAAA,OAEAvD,SAAAsD,EACApG,SAAcrO,OAAAmD,EAAA,YAAAnD,CAAW,CACzByB,KAAA,WACA4B,QAAiBiR,EAAA,EACjBrJ,WAAAwJ,IAEA5C,iBAAsB7R,OAAAmD,EAAA,YAAAnD,CAAW,CACjCyB,KAAA,mBACA4B,QAAiBiR,EAAA,IAEjBN,KAAUhU,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAiBiR,EAAA,EACjBI,MAAA,SAEAT,KAAUjU,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAiBiR,EAAA,EACjBI,MAAA,SAEAxB,QAAalT,OAAAmD,EAAA,YAAAnD,CAAW,CACxByB,KAAA,UACA4B,QAAiBiR,EAAA,gECxGVK,EAAA,WAEP,IADA,IAAAC,EAAA,GACA3C,EAAA,EAAoBA,EAAApG,UAAAhM,OAAuBoS,IAC3C2C,EAAA3C,GAAApG,UAAAoG,GAEA,OAAA2C,oBCNA5T,EAAAQ,EAAAyB,EAAA,qCAAA4R,IAAA7T,EAAAQ,EAAAyB,EAAA,mCAAA6R,IAAA9T,EAAAQ,EAAAyB,EAAA,qCAAA8R,IAAA/T,EAAAQ,EAAAyB,EAAA,uCAAA+R,IAAA,IAAArJ,EAA4B,WAS5B,OARAA,EAAA3L,OAAA4L,QAAA,SAAAzJ,GACA,QAAAlB,EAAAtB,EAAA,EAAA+C,EAAAmJ,UAAAhM,OAAgDF,EAAA+C,EAAO/C,IAEvD,QAAAkD,KADA5B,EAAA4K,UAAAlM,GACAK,OAAAC,UAAAC,eAAAC,KAAAc,EAAA4B,KACAV,EAAAU,GAAA5B,EAAA4B,IAEA,OAAAV,IAEA3B,MAAArB,KAAA0M,YAEIoJ,EAAKjU,EAAQ,GAAkB+K,EAAsBkJ,EAAElJ,iBAAAC,EAAoCiJ,EAAEjJ,eACjGkJ,EAAqBlU,EAAQ,GAAkBkU,eAQxCL,EAAA,CACPM,uBAA4BnV,OAAAoV,EAAA,YAAApV,CAAW,CACvCyB,KAAA,yBACA4B,QAAiB+R,EAAA,MAAKC,KAEtBC,yBAA8BtV,OAAAoV,EAAA,YAAApV,CAAW,CACzCyB,KAAA,2BACA4B,QAAiB+R,EAAA,MAAKC,KAEtBE,YAAiBvV,OAAAoV,EAAA,YAAApV,CAAW,CAC5ByB,KAAA,cACA4B,QAAiB+R,EAAA,MAAKC,KAEtBG,mBAAwBxV,OAAAoV,EAAA,YAAApV,CAAW,CACnCyB,KAAA,qBACA4B,QAAiB+R,EAAA,MAAKC,KAEtBI,kCAAuCzV,OAAAoV,EAAA,YAAApV,CAAW,CAClDyB,KAAA,oCACA4B,QAAiB+R,EAAA,MAAKC,KAEtBK,0BAA+B1V,OAAAoV,EAAA,YAAApV,CAAW,CAC1CyB,KAAA,4BACA4B,QAAiB+R,EAAA,MAAKC,KAEtBM,uBAA4B3V,OAAAoV,EAAA,YAAApV,CAAW,CACvCyB,KAAA,yBACA4B,QAAiB+R,EAAA,MAAKC,KAEtBO,wBAA6B5V,OAAAoV,EAAA,YAAApV,CAAW,CACxCyB,KAAA,0BACA4B,QAAiB+R,EAAA,MAAKC,KAEtBQ,0BAA+B7V,OAAAoV,EAAA,YAAApV,CAAW,CAC1CyB,KAAA,4BACA4B,QAAiB+R,EAAA,MAAKC,MAGfP,EAAA9U,OAAA8V,KAAAjB,GAAA1C,IAAA,SAAA3P,GAAuE,OAAAqS,EAAArS,KAC9EuT,EAAA,CACAZ,uBAA4BR,EAAe,sGAC3CW,yBAA8BX,EAAe,+BAC7CY,YAAiBZ,EAAe,kFAChCa,mBAAwBb,EAAe,uFACvCc,kCAAuCd,EAAe,wCACtDe,0BAA+Bf,EAAe,2BAC9CgB,uBAA4BhB,EAAe,+EAC3CiB,wBAA6BjB,EAAe,yIAC5CkB,0BAA+BlB,EAAe,6DAC9CqB,MAAWrB,EAAe,kPAE1BsB,EAAoBtB,EAAe,yDAEnCuB,EAAAlW,OAAA8V,KAAAC,GAAAI,OAAA,SAAAC,EAAAC,GAGA,OAFAN,EAAAM,GACAC,QAAA,SAAAC,GAAqD,OAAAH,EAAAG,GAAAF,IACrDD,GACC,IACDI,EAAAxW,OAAA8V,KAAAI,GASAO,EAAAR,EAAAE,OAAA,SAAAO,EAAAH,GACA,IAAAzK,EACA6K,EAAA,aAAAJ,EACAK,EAAAD,EAAA,OAEAE,EAAmC7W,OAAAoV,EAAA,YAAApV,CAAW,CAC9CyB,KAAAkV,EACAtT,QAAiB+R,EAAA,MAAKC,KAEtB,OAAA1J,EAAA,GAAsB+K,IAAA5K,EAAA,IAAoB6K,GAAAE,EAAA/K,EAAA8K,GAA+D5W,OAAAoV,EAAA,YAAApV,CAAW,CACpHyB,KAAAmV,EACAvT,QAAA,qCAAAkT,EACAO,WAAA,CAAAD,EAAA7K,EAAAuC,UACKzC,KACJ,IAODiL,EAAAP,EAAAL,OAAA,SAAAO,EAAAH,GACA,IAAAzK,EACAuK,EAAAH,EAAAK,GACAS,EAAAnC,EAAAwB,GACAM,EAAA,SAAAJ,EACAK,EAAAD,EAAA,OAEAE,EAAmC7W,OAAAoV,EAAA,YAAApV,CAAW,CAC9CyB,KAAAkV,EACAtT,QAAiB+R,EAAA,MAAKC,GACtByB,WAAAE,EAAA,CAAAA,GAAA,KAEA,OAAArL,EAAA,GAAsB+K,IAAA5K,EAAA,IAAoB6K,GAAAE,EAAA/K,EAAA8K,GAA+D5W,OAAAoV,EAAA,YAAApV,CAAW,CACpHyB,KAAAmV,EACAvT,QAAA,+BAAAkT,EAAA,IACAO,WAAA,CAAAD,EAAA7K,EAAAuC,UACKzC,KACJ2K,GACDQ,EAAA,SAAAC,GAAsC,gBAAAX,GACtC,OAAAW,EAAA,IAAAX,IAWOxB,EAAuB/U,OAAAmX,EAAA,EAAAnX,CAAO,SAAAoX,GACrC,IAAAC,EAAAJ,EAAAG,EAAAE,OACAC,EAAAN,EAAAG,EAAAI,KAGAC,EAAAjB,EAAAL,OAAA,SAAAO,EAAAH,GACA,IAAAzK,EACA6K,EAAA,SAAAJ,EACAmB,EAAAf,EAAA,YACA,OAAAhL,EAAA,GAA0B+K,IAAA5K,EAAA,IAAoB4L,GAA0B1X,OAAAoV,EAAA,YAAApV,CAAW,CACnFyB,KAAAiW,EACArU,QAAAgU,EAAAd,GACAO,WAAA,CAAAJ,EAAAC,GAAA3K,EAAAmF,YACSrF,KACJiL,GAGL,OAAAd,EAAAE,OAAA,SAAAO,EAAAH,GACA,IAAAzK,EACA6K,EAAA,aAAAJ,EACAmB,EAAAf,EAAA,YACA,OAAAhL,EAAA,GAA0B+K,IAAA5K,EAAA,IAAoB4L,GAA0B1X,OAAAoV,EAAA,YAAApV,CAAW,CACnFyB,KAAAiW,EACArU,QAAA,GAAAkU,EAAAhB,GACAO,WAAA,CAAAJ,EAAAC,GAAA3K,EAAAmF,YACSrF,KACJ2L,IACFE,EAAAC,GAIHC,EAAA9L,EAAAqF,QAAA8D,EAAA7G,UACAyJ,EAAA/L,EAAAqF,QAAApF,EAAAuC,QAGAwJ,EAAA,SAAAH,EAAAvM,GAEA,IAAAS,EAAA8L,EAAAI,MAAA,KAAAC,GAAAnM,EAAA,GAAAA,EAAA,IAAAoM,EAAApM,EAAA9I,MAAA,GAEAmV,EAAA9M,EAAA2M,MAAA,KAAAI,GAAAD,EAAA,GAAAA,EAAA,IAAAE,EAAAF,EAAAnV,MAAA,GAEAsV,GAAA,QAAAL,EAAAC,EAAA,GAAAD,GAAAM,cACAC,GAAA,QAAAJ,EAAAC,EAAA,GAAAD,GAAAG,cACA,GAAAD,IAAAE,EAAA,CAEA,IAAAC,EAAA,QAAAR,EAAAC,EAAA,GAAAA,EAAA,GACAQ,EAAA,QAAAN,EAAAC,EAAA,GAAAA,EAAA,GACA,OAAAI,GAAAC,EACA,EAGAD,EAAA,KAIA,OAAAH,EAAAE,EAAA,EAAAA,EAAAF,GAAA,KAOOtD,EAAyBhV,OAAAmX,EAAA,EAAAnX,CAAO,SAAAoX,GACvC,IAAAV,EAAA3B,EAAAqC,GACAtL,EAAA9L,OAAA8V,KAAAY,GACAiC,KAAAZ,GACA5B,OAAA,SAAAyC,EAAApW,GAaA,OAZAA,EAAAqW,SAAA,SACAf,EAAAD,GACAe,EAAAE,UAAA/Y,KAAA2W,EAAAlU,EAAAQ,MAAA,QAEA4V,EAAAE,UAAA/Y,KAAA2W,EAAAlU,KAEAA,EAAAqW,SAAA,eACAhB,EAAAC,GACAc,EAAAG,YAAAhZ,KAAA2W,EAAAlU,EAAAQ,MAAA,QAEA4V,EAAAG,YAAAhZ,KAAA2W,EAAAlU,KAEAoW,GACK,CAAGG,YAAA,GAAAD,UAAA,KAAiCC,EAAAjN,EAAAiN,YAAAD,EAAAhN,EAAAgN,UACzC,OAAAjB,EAAAC,EACA/L,EAAA/I,MAAA,EAAA6U,GAAAmB,OAAAlE,EAAAiE,EAAAhN,EAAA/I,MAAA6U,EAAAC,GAAAgB,EAAA/M,EAAA/I,MAAA8U,IAGA/L,EAAA/I,MAAA,EAAA8U,GAAAkB,OAAAlE,EAAAgE,EAAA/M,EAAA/I,MAAA8U,EAAAD,GAAAkB,EAAAhN,EAAA/I,MAAA6U,KAEGF,EAAAC,mCCjOH5W,EAAAe,EAAAkB,GAAAjC,EAAAQ,EAAAyB,EAAA,mCAAAiS,IAAAlU,EAAAQ,EAAAyB,EAAA,+BAAAgW,IAAAjY,EAAAQ,EAAAyB,EAAA,gCAAAiW,IAAAlY,EAAAQ,EAAAyB,EAAA,sCAAAkW,IAAAnY,EAAAQ,EAAAyB,EAAA,wCAAAmW,IAAApY,EAAAQ,EAAAyB,EAAA,qCAAAoW,IAAA,IAAAlW,EAAAnC,EAAA,GAAAsY,EAAAtY,EAAA,GAAAuY,EAAAvY,EAAA,GAIOkU,EAAA,CACP3G,OAAY+K,EAAA,UAAS/K,OACrBoC,QAAa2I,EAAA,UAAS3I,QACtBJ,QAAa+I,EAAA,UAAS/I,QACtBC,QAAa8I,EAAA,UAAS9I,QACtBC,OAAY6I,EAAA,UAAS7I,OACrBiD,iBAAsB4F,EAAA,UAAS5F,iBAC/BC,iBAAsB2F,EAAA,UAAS3F,iBAC/BC,gBAAqB0F,EAAA,UAAS1F,gBAC9BC,iBAAsByF,EAAA,UAASzF,iBAC/BC,iBAAsBwF,EAAA,UAASxF,iBAC/BC,gBAAqBuF,EAAA,UAASvF,gBAC9BT,gBAAqBgG,EAAA,UAAShG,gBAC9BC,gBAAqB+F,EAAA,UAAS/F,gBAC9BC,qBAA0B8F,EAAA,UAAS9F,qBACnCC,qBAA0B6F,EAAA,UAAS7F,qBACnCJ,IAASiG,EAAA,UAASjG,IAClBvB,KAAUwH,EAAA,UAASxH,KACnBzD,SAAciL,EAAA,UAASjL,SACvB8C,SAAcmI,EAAA,UAASnI,SACvBU,iBAAsByH,EAAA,UAASzH,iBAC/BmC,KAAUsF,EAAA,UAAStF,KACnBC,KAAUqF,EAAA,UAASrF,KACnBf,QAAaoG,EAAA,UAASpG,QACtBsG,QAAaxZ,OAAAmD,EAAA,YAAAnD,CAAW,CACxByB,KAAA,UACA4B,QAAA,UACAoW,MAAA,aAEAC,OAAY1Z,OAAAmD,EAAA,YAAAnD,CAAW,CAAEyB,KAAA,SAAA4B,QAAA,MACzBsW,OAAY3Z,OAAAmD,EAAA,YAAAnD,CAAW,CAAEyB,KAAA,SAAA4B,QAAA,MACzBgN,OAAYrQ,OAAAmD,EAAA,YAAAnD,CAAW,CAAEyB,KAAA,SAAA4B,QAAA,MACzBiN,OAAYtQ,OAAAmD,EAAA,YAAAnD,CAAW,CAAEyB,KAAA,SAAA4B,QAAA,MACzBuW,WAAgB5Z,OAAAmD,EAAA,YAAAnD,CAAW,CAC3ByB,KAAA,aACA4B,QAAA,MACAoW,MAAetW,EAAA,MAAK0W,QACpBC,aAAA,IAEAC,KAAU/Z,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,MAEA2W,QAAaha,OAAAmD,EAAA,YAAAnD,CAAW,CACxByB,KAAA,UAMA4B,QAAA,uBAEAyK,OAAY9N,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,MAEA4W,aAAkBja,OAAAmD,EAAA,YAAAnD,CAAW,CAC7ByB,KAAA,eACA4B,QAAA,MAEA6W,KAAUla,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,MAEA8W,MAAWna,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,MAEA8M,SAAcnQ,OAAAmD,EAAA,YAAAnD,CAAW,CACzByB,KAAA,WACA4B,QAAA,MAEA+M,SAAcpQ,OAAAmD,EAAA,YAAAnD,CAAW,CACzByB,KAAA,WACA4B,QAAA,MAEAoM,UAAezP,OAAAmD,EAAA,YAAAnD,CAAW,CAC1ByB,KAAA,YACA4B,QAAA,MAEAyM,MAAW9P,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,MAEA+W,KAAUpa,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,MAEAgX,aAAkBra,OAAAmD,EAAA,YAAAnD,CAAW,CAC7ByB,KAAA,eACA4B,QAAA,MAEAiX,MAAWta,OAAAmD,EAAA,YAAAnD,CAAW,CACtByB,KAAA,QACA4B,QAAA,MAEAuN,YAAiB5Q,OAAAmD,EAAA,YAAAnD,CAAW,CAC5ByB,KAAA,cACA4B,QAAA,OAEAkX,KAAUva,OAAAmD,EAAA,YAAAnD,CAAW,CACrByB,KAAA,OACA4B,QAAA,MAEAmX,UAAexa,OAAAmD,EAAA,YAAAnD,CAAW,CAC1ByB,KAAA,YACA4B,QAAA,OAEAoX,WAAgBza,OAAAmD,EAAA,YAAAnD,CAAW,CAC3ByB,KAAA,aACA4B,QAAA,OAEAqX,OAAY1a,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,MAEAsX,UAAe3a,OAAAmD,EAAA,YAAAnD,CAAW,CAC1ByB,KAAA,YACA4B,QAAA,OAEAuX,SAAc5a,OAAAmD,EAAA,YAAAnD,CAAW,CACzByB,KAAA,WACA4B,QAAA,MAEAwX,YAAiB7a,OAAAmD,EAAA,YAAAnD,CAAW,CAC5ByB,KAAA,cACA4B,QAAA,MAEAyX,eAAoB9a,OAAAmD,EAAA,YAAAnD,CAAW,CAC/ByB,KAAA,iBACA4B,QAAA,OAEA0X,kBAAuB/a,OAAAmD,EAAA,YAAAnD,CAAW,CAClCyB,KAAA,oBACA4B,QAAA,OAEAgM,OAAYrP,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,OAEAiM,OAAYtP,OAAAmD,EAAA,YAAAnD,CAAW,CACvByB,KAAA,SACA4B,QAAA,OAEAC,OAAYiW,EAAA,SAAQjW,OACpBC,UAAegW,EAAA,SAAQhW,UACvBC,SAAc+V,EAAA,SAAQ/V,SACtBC,MAAW8V,EAAA,SAAQ9V,MACnBC,IAAS6V,EAAA,SAAQ7V,IACjBC,IAAS4V,EAAA,SAAQ5V,IACjBI,OAAYwV,EAAA,SAAQxV,OACpBD,eAAoByV,EAAA,SAAQzV,eAC5BD,UAAe0V,EAAA,SAAQ1V,UACvBD,MAAW2V,EAAA,SAAQ3V,MACnBI,GAAQuV,EAAA,SAAQvV,GAChBC,MAAWsV,EAAA,SAAQtV,MACnBC,EAAOqV,EAAA,SAAQrV,EACfC,SAAcoV,EAAA,SAAQpV,SACtBC,SAAcmV,EAAA,SAAQnV,SACtBC,GAAQkV,EAAA,SAAQlV,GAChBC,KAAUiV,EAAA,SAAQjV,KAClBC,OAAYgV,EAAA,SAAQhV,OACpBC,SAAc+U,EAAA,SAAQ/U,SACtBC,IAAS8U,EAAA,SAAQ9U,IACjBC,KAAU6U,EAAA,SAAQ7U,KAClBC,QAAa4U,EAAA,SAAQ5U,QACrBC,MAAW2U,EAAA,SAAQ3U,MACnBC,OAAY0U,EAAA,SAAQ1U,OACpBC,IAASyU,EAAA,SAAQzU,IACjBC,KAAUwU,EAAA,SAAQxU,KAClBC,OAAYuU,EAAA,SAAQvU,OACpBC,MAAWsU,EAAA,SAAQtU,MACnBC,OAAYqU,EAAA,SAAQrU,OACpBC,KAAUoU,EAAA,SAAQpU,KAClBC,OAAYmU,EAAA,SAAQnU,OACpBC,KAAUkU,EAAA,SAAQlU,KAClBC,MAAWiU,EAAA,SAAQjU,MACnBC,KAAUgU,EAAA,SAAQhU,KAClBC,OAAY+T,EAAA,SAAQ/T,OACpBC,IAAS8T,EAAA,SAAQ9T,IACjBC,GAAQ6T,EAAA,SAAQ7T,GAChBC,KAAU4T,EAAA,SAAQ5T,KAClBC,KAAU2T,EAAA,SAAQ3T,KAClBC,YAAiB0T,EAAA,SAAQ1T,YACzBC,YAAiByT,EAAA,SAAQzT,YACzBC,aAAkBwT,EAAA,SAAQxT,aAC1BC,KAAUuT,EAAA,SAAQvT,KAClBC,OAAYsT,EAAA,SAAQtT,OACpBC,OAAYqT,EAAA,SAAQrT,OACpBC,MAAWoT,EAAA,SAAQpT,MACnBC,QAAamT,EAAA,SAAQnT,QACrBC,MAAWkT,EAAA,SAAQlT,MACnBC,IAASiT,EAAA,SAAQjT,IACjBC,SAAcgT,EAAA,SAAQhT,SACtBC,QAAa+S,EAAA,SAAQ/S,QACrBC,KAAU8S,EAAA,SAAQ9S,KAClBC,OAAY6S,EAAA,SAAQ7S,OACpBC,MAAW4S,EAAA,SAAQ5S,MACnBC,MAAW2S,EAAA,SAAQ3S,MACnBC,MAAW0S,EAAA,SAAQ1S,MACnBC,OAAYyS,EAAA,SAAQzS,OACpBC,IAASwS,EAAA,SAAQxS,IACjBC,KAAUuS,EAAA,SAAQvS,KAClBC,YAAiBsS,EAAA,SAAQtS,YACzBC,SAAcqS,EAAA,SAAQrS,SACtBC,MAAWoS,EAAA,SAAQpS,MACnBC,IAASmS,EAAA,SAAQnS,IACjBC,IAASkS,EAAA,SAAQlS,IACjBC,MAAWiS,EAAA,SAAQjS,MACnBC,KAAUgS,EAAA,SAAQhS,KAClBC,IAAS+R,EAAA,SAAQ/R,IACjBC,KAAU8R,EAAA,SAAQ9R,KAClBC,MAAW6R,EAAA,SAAQ7R,MACnBC,MAAW4R,EAAA,SAAQ5R,MACnBC,OAAY2R,EAAA,SAAQ3R,OACpBC,OAAY0R,EAAA,SAAQ1R,OACpBC,MAAWyR,EAAA,SAAQzR,MACnBC,MAAWwR,EAAA,SAAQxR,MACnBC,eAAoBuR,EAAA,SAAQvR,eAC5BC,SAAcsR,EAAA,SAAQtR,SACtBC,UAAeqR,EAAA,SAAQrR,UACvBC,QAAaoR,EAAA,SAAQpR,QACrBC,UAAemR,EAAA,SAAQnR,UACvBC,SAAckR,EAAA,SAAQlR,SACtBC,KAAUiR,EAAA,SAAQjR,KAClBC,MAAWgR,EAAA,SAAQhR,MACnBC,IAAS+Q,EAAA,SAAQ/Q,IACjBC,MAAW8Q,EAAA,SAAQ9Q,MACnBC,QAAa6Q,EAAA,SAAQ7Q,QACrBC,QAAa4Q,EAAA,SAAQ5Q,QACrBC,SAAc2Q,EAAA,SAAQ3Q,SACtBC,GAAQ0Q,EAAA,SAAQ1Q,GAChBC,IAASyQ,EAAA,SAAQzQ,IACjBC,KAAUwQ,EAAA,SAAQxQ,KAClBC,QAAauQ,EAAA,SAAQvQ,QACrBC,IAASsQ,EAAA,SAAQtQ,IACjBC,KAAUqQ,EAAA,SAAQrQ,KAClBC,OAAYoQ,EAAA,SAAQpQ,OACpBC,OAAYmQ,EAAA,SAAQnQ,OACpBC,OAAYkQ,EAAA,SAAQlQ,OACpBC,SAAciQ,EAAA,SAAQjQ,SACtBC,GAAQgQ,EAAA,SAAQhQ,GAChBC,QAAa+P,EAAA,SAAQ/P,QACrBC,MAAW8P,EAAA,SAAQ9P,MACnBC,SAAc6P,EAAA,SAAQ7P,SACtBC,MAAW4P,EAAA,SAAQ5P,MACnBC,MAAW2P,EAAA,SAAQ3P,MACnBC,QAAa0P,EAAA,SAAQ1P,QACrBC,UAAeyP,EAAA,SAAQzP,UACvBC,UAAewP,EAAA,SAAQxP,UACvBC,MAAWuP,EAAA,SAAQvP,MACnBC,OAAYsP,EAAA,SAAQtP,OACpBC,QAAaqP,EAAA,SAAQrP,QACrBC,OAAYoP,EAAA,SAAQpP,OACpBC,WAAgBmP,EAAA,SAAQnP,WACxBC,MAAWkP,EAAA,SAAQlP,MACnBC,IAASiP,EAAA,SAAQjP,IACjBC,IAASgP,EAAA,SAAQhP,IACjBC,IAAS+O,EAAA,SAAQ/O,IACjBC,OAAY8O,EAAA,SAAQ9O,OACpBC,aAAkB6O,EAAA,SAAQ7O,aAC1BC,UAAe4O,EAAA,SAAQ5O,UACvBC,KAAU2O,EAAA,SAAQ3O,KAClBC,MAAW0O,EAAA,SAAQ1O,MACnBC,GAAQyO,EAAA,SAAQzO,GAChBC,OAAYwO,EAAA,SAAQxO,OACpB3H,WAAgBmW,EAAA,SAAQnW,WACxB4H,IAASuO,EAAA,SAAQvO,KAEViO,EAAA,CACP/D,EAAA7B,IACA6B,EAAApD,KACAoD,EAAAwE,OACAxE,EAAAyE,OACAzE,EAAA7E,OACA6E,EAAA5E,OACA4E,EAAA0E,WACA1E,EAAA3G,OACA2G,EAAAvE,QACAuE,EAAAzE,OACAyE,EAAA1E,QACA0E,EAAA3E,QACA2E,EAAAtB,gBACAsB,EAAAvB,iBACAuB,EAAAxB,iBACAwB,EAAAnB,gBACAmB,EAAApB,iBACAoB,EAAArB,iBACAqB,EAAA5B,gBACA4B,EAAA3B,gBACA2B,EAAA1B,qBACA0B,EAAAzB,qBACAyB,EAAA7G,SACA6G,EAAA/D,SACA+D,EAAArD,iBACAqD,EAAAlB,KACAkB,EAAAjB,KACAiB,EAAAsE,QACAtE,EAAA5R,OACA4R,EAAA3R,UACA2R,EAAA1R,SACA0R,EAAA6E,KACA7E,EAAAjR,MACAiR,EAAA/Q,SACA+Q,EAAA9Q,SACA8Q,EAAA7Q,GACA6Q,EAAApH,OACAoH,EAAA+E,aACA/E,EAAAgF,KACAhF,EAAAiF,MACAjF,EAAA/E,SACA+E,EAAA9E,SACA8E,EAAAhC,QACAgC,EAAA5Q,KACA4Q,EAAA3Q,OACA2Q,EAAA1Q,SACA0Q,EAAAzQ,IACAyQ,EAAAxQ,KACAwQ,EAAAvQ,QACAuQ,EAAAtQ,MACAsQ,EAAArQ,OACAqQ,EAAApQ,IACAoQ,EAAAnQ,KACAmQ,EAAAlQ,OACAkQ,EAAAjQ,MACAiQ,EAAAhQ,OACAgQ,EAAA/P,KACA+P,EAAA9P,OACA8P,EAAA7P,KACA6P,EAAAlR,GACAkR,EAAA5P,MACA4P,EAAA3P,KACA2P,EAAA1P,OACA0P,EAAAzP,IACAyP,EAAAxP,GACAwP,EAAAvP,KACAuP,EAAAtP,KACAsP,EAAArP,YACAqP,EAAApP,YACAoP,EAAAnP,aACAmP,EAAAlP,KACAkP,EAAAjP,OACAiP,EAAAhP,OACAgP,EAAA/O,MACA+O,EAAA9O,QACA8O,EAAA7O,MACA6O,EAAA5O,IACA4O,EAAA3O,SACA2O,EAAA1O,QACA0O,EAAAzO,KACAyO,EAAAvO,MACAuO,EAAAtO,MACAsO,EAAArO,MACAqO,EAAApO,OACAoO,EAAAjO,YACAiO,EAAAlO,KACAkO,EAAAhO,SACAgO,EAAA/N,MACA+N,EAAA9N,IACA8N,EAAA7N,IACA6N,EAAA5N,MACA4N,EAAA3N,KACA2N,EAAA1N,IACA0N,EAAAzN,KACAyN,EAAAxN,MACAwN,EAAAvN,MACAuN,EAAAtN,OACAsN,EAAArN,OACAqN,EAAApN,MACAoN,EAAAnN,MACAmN,EAAAlN,eACAkN,EAAAjN,SACAiN,EAAAhN,UACAgN,EAAA/M,QACA+M,EAAA9M,UACA8M,EAAA7M,SACA6M,EAAA5M,KACA4M,EAAA3M,MACA2M,EAAA1M,IACA0M,EAAAzM,MACAyM,EAAAxM,QACAwM,EAAAvM,QACAuM,EAAAtM,SACAsM,EAAArM,GACAqM,EAAApM,IACAoM,EAAAnM,KACAmM,EAAAlM,QACAkM,EAAAjM,IACAiM,EAAAhM,KACAgM,EAAA/L,OACA+L,EAAA9L,OACA8L,EAAA7L,OACA6L,EAAA5L,SACA4L,EAAA3L,GACA2L,EAAA1L,QACA0L,EAAAzL,MACAyL,EAAAnO,IACAmO,EAAAxL,SACAwL,EAAAvL,MACAuL,EAAAtL,MACAsL,EAAArL,QACAqL,EAAApL,UACAoL,EAAAnL,UACAmL,EAAAlL,MACAkL,EAAAjL,OACAiL,EAAAhL,QACAgL,EAAA/K,OACA+K,EAAA9K,WACA8K,EAAA7K,MACA6K,EAAA5K,IACA4K,EAAA3K,IACA2K,EAAA9R,WACA8R,EAAAlK,IACAkK,EAAA1K,IACA0K,EAAAzK,OACAyK,EAAAxK,aACAwK,EAAAvK,UACAuK,EAAAtK,KACAsK,EAAArK,MACAqK,EAAAzF,UACAyF,EAAApF,MACAoF,EAAAmF,aACAnF,EAAAtE,YACAsE,EAAAoF,MACApF,EAAAsF,UACAtF,EAAAkF,KACAlF,EAAAuF,WACAvF,EAAAyF,UACAzF,EAAAqF,KACArF,EAAAwF,OACAxF,EAAA4F,eACA5F,EAAA6F,kBACA7F,EAAA7F,OACA6F,EAAA5F,OACA4F,EAAA0F,SACA1F,EAAA2F,YACA3F,EAAApK,GACAoK,EAAAnK,OACAmK,EAAA8E,QACA9E,EAAAhR,GAEOgV,EAAA,CACPhE,EAAAzR,MACAyR,EAAAxR,IACAwR,EAAAvR,IACAuR,EAAAnR,OACAmR,EAAApR,eACAoR,EAAArR,UACAqR,EAAAtR,OAEOuV,EAAAD,EAAAF,OAAA,CAAA9D,EAAAxO,SACPsU,EAAA/B,EAAA7H,QAAA8D,EAAA5R,QACO8V,EAAAH,EAAAjW,MAAA,EAAAgY,GAAAhC,OAAAG,EAAAF,EAAAjW,MAAAgY,IACA3B,EAAAJ,EAAAD,OAAAG,+CCxcPhO,oDADAC,GACAD,EAAA,SAAA3J,EAAA6J,GAIA,OAHAF,EAAAnL,OAAAsL,gBACA,CAAcC,UAAA,cAAgBC,OAAA,SAAAhK,EAAA6J,GAAsC7J,EAAA+J,UAAAF,IACpE,SAAA7J,EAAA6J,GAA6B,QAAAxI,KAAAwI,IAAAnL,eAAA2C,KAAArB,EAAAqB,GAAAwI,EAAAxI,MAC7BrB,EAAA6J,IAEA,SAAA7J,EAAA6J,GAEA,SAAAI,IAAuBtM,KAAAuM,YAAAlK,EADvB2J,EAAA3J,EAAA6J,GAEA7J,EAAAvB,UAAA,OAAAoL,EAAArL,OAAAuC,OAAA8I,IAAAI,EAAAxL,UAAAoL,EAAApL,UAAA,IAAAwL,KAQAwP,EAAA,SAAAC,GACA,WAAAhJ,OAAA,aAAqCiJ,IAAkBD,GAAA,iBAKvDE,EAAA,SAAAC,GAEA,IADA,IAAAC,EAAAD,EACAC,EAAAC,UAAA,CACA,IAAAC,EAAAxb,OAAA8V,KAAAwF,EAAAC,UAAA,GACAD,IAAAC,SAAAC,GAAA,GAEA,OAAAF,GAIAG,EAAA,SAAA/L,EAAAgM,GACA,IAAAhb,EAAAgb,EAAAC,KAAAjM,GACA,GAAAhP,EACA,OAAAA,EAAA,IAQAkb,EAAA,SAAAC,EAAAC,GACAA,EAAAxF,QAAA,SAAAyF,GACA,IAAAC,EAAAD,EAAAR,SAAAvb,OAAA8V,KAAAiG,EAAAR,UAAA,OACA,OAAAS,EAAAva,MACA,qBACA,IACAwa,EADAb,EAAAY,GACAvN,MAAA8J,cAKA,KAJA,MAAA0D,GACA,aAAAA,GAEA,sDADAA,GAGA,OAEAjc,OAAA8V,KAAAkG,EAAAT,UAAAjF,QAAA,SAAA9T,GACA,sBAAAA,EAAA,CAGA,IAAA0Z,EAAAF,EAAAT,SAAA/Y,GAAA,GACA0Z,EAAAX,SAAAY,gBACAN,EAAAO,MAAArc,KAAA,CACAsc,KAAA,YACA/K,MAAA8J,EAAAc,KAGAA,EAAAX,SAAAe,qBACAT,EAAAO,MAAArc,KAAA,CACAsc,KAAA,gBACA/K,MAAA8J,EAAAc,QAIA,MAEA,wBACAF,EAAAT,SAAAjG,yBACAuG,EAAAU,WAAAxc,KAAA,CACAsc,KAAA,2BACA/K,MAAA8J,EAAAY,EAAAT,SACAjG,yBAAA,MAGA0G,EAAAT,SAAApG,wBACA0G,EAAAU,WAAAxc,KAAA,CACAsc,KAAA,yBACA/K,MAAA8J,EAAAY,EAAAT,SACApG,uBAAA,MAGA,MAEA,oBACA0G,EAAAU,WAAAxc,KAAA,CACAsc,KAAA,WACA/K,MAAA0K,EAAAT,SAAAiB,eAAA,KAEA,MACA,sBACAX,EAAAU,WAAAxc,KAAA,CACAsc,KAAA,aACA/K,MAAA0K,EAAAT,SAAAkB,iBAAA,KAEA,MACA,wBACAZ,EAAAU,WAAAxc,KAAA,CACAsc,KAAA,OACA/K,MAAA0K,EAAAT,SAAAmB,WAAA,KAEA,MACA,6BACAb,EAAAU,WAAAxc,KAAA,CACAsc,KAAA,oBACA/K,MAAA8J,EAAAY,KAEA,MACA,gCACAH,EAAAU,WAAAxc,KAAA,CACAsc,KAAA,uBACA/K,MAAA8J,EAAAY,KAEA,MACA,oCACAH,EAAAU,WAAAxc,KAAA,CACAsc,KAAA,0BACA/K,MAAA0K,EAAAT,SAAA3F,wBAAA,KAEA,MACA,8BACAiG,EAAAU,WAAAxc,KAAA,CACAsc,KAAA,WACA/K,MAAA0K,EAAAT,SAAAoB,eAAA,KAEA,MACA,QACAC,QAAAC,IAAA,uCAAAb,EAAAva,KAAA,wBAMAqb,EAAA,SAAAzB,GACA,IAAA0B,EAAA1B,EAAApM,sBAAA,GACA+N,EAAAD,EAAAxB,SAAAvM,oBAAA,GACAiO,EAAA5B,EAAArM,oBACAqM,EAAArM,oBAAA,GACA,KACA,GAAShP,OAAAkd,EAAA,EAAAld,CAASgd,IACThd,OAAAkd,EAAA,EAAAld,CAASid,GADlB,CAIA,IAAAnB,EAAAmB,GACAA,EAAA1B,UACA0B,EAAA1B,SAAA4B,8BACAH,EAAAzB,SAAA4B,8BACA,IAAAnE,OAAAiE,EAAA1B,SACA4B,8BAAAH,EAAAzB,SAAA4B,6BACA,GAAArB,EAAA,CAGA,IAAAD,EAAA,CACAhN,QAAA,CACAwN,KAAA,wBACA/K,MAAA8J,EAAA2B,IAEAX,MAAA,GACAG,WAAA,IAGA,OADAX,EAAAC,EAAAC,GACAD,KAMOuB,EAAA,SAAAC,GAqMP,WApMA,SAAApR,GAEA,SAAAqR,IACA,IAAAhR,EAAAL,EAAA9L,KAAAhB,YA6LA,OAzLAmN,EAAAsB,QAAA,SAAAyN,GACA,GAAAA,EAAAxM,QAAA,CACA,IAAAmO,EAAA3B,EAAArM,oBAAA,GACA,IAAyBhP,OAAAkd,EAAA,EAAAld,CAASgd,GAClC,OAEA,IAAAlB,EAAAkB,EAAAzB,SAAA4B,6BACA,IAAArB,EACA,OAEA,IAAAD,EAAA,CACAhN,QAAA,CACAwN,KAAA,eAAArc,OAAA8V,KAAAuF,EAAAxM,QAAA,GAAA0M,UAAA,GACA,aACA,UACAjK,MAAA8J,EAAAC,EAAAxM,QAAA,KAEAuN,MAAA,GACAG,WAAA,IAEAX,EAAAC,EAAAC,GACAxP,EAAAiR,OAAAxd,KAAA8b,GACAvP,EAAAkR,MAAAnC,EAAAxM,SACAvC,EAAAkR,MAAAR,OAEA,CAEA,KADAnB,EAAAiB,EAAAzB,IAEA,OAEA/O,EAAAiR,OAAAxd,KAAA8b,GACAvP,EAAAkR,MAAAnC,EAAApM,uBACAoM,EAAArM,qBACA1C,EAAAkR,MAAAnC,EAAArM,uBAMA1C,EAAAmR,WAAA,SAAApC,GACA,GAAAA,EAAApM,sBAAA,CAIA,IAAA4M,EAAAiB,EAAAzB,GACAQ,IAGAvP,EAAAiR,OAAAxd,KAAA8b,GACAvP,EAAAkR,MAAAnC,EAAApM,0BAEA3C,EAAAoR,YAAA,WACApR,EAAAiR,OAAA,IAEAjR,EAAAqR,gBAAA,SAAA7R,GACA,IAAAoP,EAAApP,EAAAwL,MACAsG,EAAA,GACAC,EAAA5C,EAAAC,GACA4C,EAAA,EACAC,EAAAzR,EAAAiR,OAAApH,OAAA,SAAA6H,EAAAnC,GACA,IAAApN,EAAAoN,EAAAhN,QAAAyC,MAAA7C,MACAwP,EAAA,MAAAxP,EAAA,WAAAqP,EAAArP,EACA,GAAAuP,EAAAC,GAOA,CACA,IAAAC,EAAAF,EAAAC,GACAD,EAAAC,GAAA,CACAE,SAAAD,EAAAC,SAAAnF,OAAA,CAAA6C,EAAAhN,UACAuN,MAAA8B,EAAA9B,MAAApD,OAAA6C,EAAAO,OACAG,WAAA2B,EAAA3B,WAAAvD,OAAA6C,EAAAU,kBAXAyB,EAAAC,GAAA,CACAE,SAAA,CAAAtC,EAAAhN,SACAuN,MAAAP,EAAAO,MACAG,WAAAV,EAAAU,YAWA,OAAAyB,GACiB,IAuGjB,OAtGAhe,OAAA8V,KAAAiI,GAAAzH,QAAA,SAAA2H,GACA,IACAG,EADAtS,EAAAiS,EAAAE,GAAAE,EAAArS,EAAAqS,SAAA/B,EAAAtQ,EAAAsQ,MAAAG,EAAAzQ,EAAAyQ,WAEAH,EAAA9F,QAAA,SAAAxK,GACA,IAAAuQ,EAAAvQ,EAAAuQ,KACA+B,GAAA/B,IAAA+B,EACAR,EAAA7d,KAAA,CACA0B,KAAA,iBACA4P,QAAA,kEACAC,MAAA6M,EAAA,GAAA7M,QAGA8M,IACAA,EAAA/B,KAGA,IAAAgC,EAAA,GACAC,EAAA,GACA/B,EAAAjG,QAAA,SAAAzG,GACA,IAAApB,EAAAoB,EAAAyB,MAAA7C,MACA8H,EAAAkF,EAAAhN,EAAAoP,GACAU,EAAAhI,EACA2E,EAAA,IAAA3E,EACA9H,EACA8P,IAAArD,EAAA,QACAmD,EAAAte,KAAA8P,IAGAyO,EAAAC,KACAD,EAAAC,GAAA,IAEAD,EAAAC,GAAAxe,KAAA8P,MAGAwO,EAAAxe,OAAA,IACA,cAAAue,EACAR,EAAA7d,KAAA,CACA0B,KAAA,qBACA4P,QAAA,8EACAC,MAAA+M,EAAA,GAAA/M,QAIA8M,EAAA,gBAEAC,EAAAxe,OAAA,GACA+d,EAAA7d,KAAA,CACA0B,KAAA,qBACA4P,QAAA,kDACAC,MAAA+M,EAAA,GAAA/M,SAIA,cAAA8M,EACA,CACA,WACA,WACA,aACA,WACA,mBACA,uBACA9H,QAAA,SAAA7H,GACA,IAAA+P,EAAAtD,EAAA,IAAAzM,EACA6P,EAAAE,IACAZ,EAAA7d,KAAA,CACA0B,KAAA,qBACA4P,QAAA,yCAAAmN,EAAA,IACAlN,MAAAgN,EAAAE,GAAA,GAAAlN,UAMA,CACA,cACA,WACA,WACA,WACA,WACA,WACA,eACA,eACA,eACA,eACA,YACA,YACA,aACA,aACA,MACAgF,QAAA,SAAA7H,GACA,IAAA+P,EAAAtD,EAAA,IAAAzM,EACA6P,EAAAE,IACAF,EAAAE,GAAA3e,OAAA,GACA+d,EAAA7d,KAAA,CACA0B,KAAA,qBACA4P,QAAA,0CAAAmN,EAAA,IACAlN,MAAAgN,EAAAE,GAAA,GAAAlN,YAMA,CAAwBsM,qBAExBtR,EAAAmS,kBACAnS,EAAAiR,OAAA,GACAjR,EAEA,OAjMAlB,EAAAkS,EAAArR,GAiMAqR,EAlMA,CAmMKD,KCvXDqB,EAAyB,WAC7B,IAAAvT,EAAA,SAAA3J,EAAA6J,GAIA,OAHAF,EAAAnL,OAAAsL,gBACA,CAAcC,UAAA,cAAgBC,OAAA,SAAAhK,EAAA6J,GAAsC7J,EAAA+J,UAAAF,IACpE,SAAA7J,EAAA6J,GAA6B,QAAAxI,KAAAwI,IAAAnL,eAAA2C,KAAArB,EAAAqB,GAAAwI,EAAAxI,MAC7BrB,EAAA6J,IAEA,gBAAA7J,EAAA6J,GAEA,SAAAI,IAAuBtM,KAAAuM,YAAAlK,EADvB2J,EAAA3J,EAAA6J,GAEA7J,EAAAvB,UAAA,OAAAoL,EAAArL,OAAAuC,OAAA8I,IAAAI,EAAAxL,UAAAoL,EAAApL,UAAA,IAAAwL,IAV6B,GAa7BE,EAA4B,WAS5B,OARAA,EAAA3L,OAAA4L,QAAA,SAAAzJ,GACA,QAAAlB,EAAAtB,EAAA,EAAA+C,EAAAmJ,UAAAhM,OAAgDF,EAAA+C,EAAO/C,IAEvD,QAAAkD,KADA5B,EAAA4K,UAAAlM,GACAK,OAAAC,UAAAC,eAAAC,KAAAc,EAAA4B,KACAV,EAAAU,GAAA5B,EAAA4B,IAEA,OAAAV,IAEA3B,MAAArB,KAAA0M,YAKAC,EAAS9K,EAAQ,IAAUgU,EAAAlJ,EAAAkJ,mBAAAD,EAAAjJ,EAAAiJ,iBAAAF,EAAA/I,EAAA+I,iBAC3B7I,EAAqBhL,EAAQ,GAAkBgL,eAO3C2S,EAAW,SAAA1S,GAEf,SAAA2S,EAAA1S,EAAAkL,QACA,IAAAA,IAAkCA,EAAA,CAAaE,MAAA,KAAAE,IAAA,QAC/C,IAAAlL,EAAAL,EAAA9L,KAAAhB,KAAAwM,EAAA,CAAgDY,WAAA,EAAAC,iBAAA,GAAyCN,GAAA8I,EAAAoC,GAAApC,EAAAoC,IAAA,IAAAjY,KA+dzF,OA3dAmN,EAAAuS,oBAAA,SAAA5R,GAEA,GAAAX,EAAAwS,aAKAxS,EAAAwS,aAAApB,kBALA,CACA,IAAAqB,EAAAzS,EAAA0S,2CACA1S,EAAAwS,aAAqC1B,EAAe2B,GAMpD,OADAzS,EAAAwS,aAAAtB,MAAAvQ,GACAX,EAAAwS,aAAAnB,gBAAArR,EAAA8K,WAEA9K,EAAAM,SAAA,SAAAC,GACA,OAAAP,EAAAQ,MAAAF,SAAAC,GAAAV,QAEAG,EAAAS,MAAA,SAAAF,GACAP,EAAAU,MAAAV,EAAAM,SAAAC,GACA,IAAAI,EAAAX,EAAAY,YACA0Q,EAAAtR,EAAAuS,oBAAA5R,GAAA2Q,iBAKA,OACAzQ,OAHAb,EAAAa,OAAAnK,QAIA0J,eAHAJ,EAAAI,eAAAsM,OAAA4E,GAIA3Q,QAGAX,EAAA0C,oBAAA1C,EAAA2S,cAAA,iCACA3S,EAAAmB,GAAA,CACA,CACAC,IAAA,WACApB,EAAAgB,QAAAhB,EAAA6Q,gCAGA,CACAzP,IAAA,WACApB,EAAAgB,QAAAhB,EAAAiD,MACAjD,EAAAgB,QAAAhB,EAAAkD,gBAIAlD,EAAAe,KAAA,WACAf,EAAAuB,QAAA7B,EAAAyD,WACAnD,EAAA4C,OAAA,WACA5C,EAAAsC,IAAA,CACA,CACAlB,IAAA,WACApB,EAAA6C,SAAA7C,EAAA6Q,gCAGA,CACAzP,IAAA,WACApB,EAAA6C,SAAA7C,EAAAiD,MACAjD,EAAA6C,SAAA7C,EAAAkD,sBAOAlD,EAAA6Q,6BAAA7Q,EAAAc,KAAA,0CACAd,EAAAmB,GAAA,CACA,CACAC,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAA4S,qBAEtC,CACAxR,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAA6S,iBAEtC,CACAzR,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAA8S,mBAEtC,CACA1R,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAA+S,qBAEtC,CACA3R,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAgT,0BAEtC,CACA5R,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAiT,6BAEtC,CACA7R,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAkT,iCAEtC,CACA9R,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAmT,2BAEtC,CACA/R,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAoT,sBAItCpT,EAAA4S,kBAAA5S,EAAAc,KAAA,+BACAd,EAAAmB,GAAA,CACA,CACAC,IAAA,WACApB,EAAAuB,QAAAgH,EAAAS,0BACAhJ,EAAAgB,QAAAhB,EAAAoD,OAGA,CACAhC,IAAA,WACApB,EAAAuB,QAAAgH,EAAAM,wBACA7I,EAAA6C,SAAA7C,EAAAoD,KACApD,EAAAe,KAAA,WACAf,EAAAuB,QAAA7B,EAAA8D,OACAxD,EAAAqT,SAAArT,EAAAoD,aAMApD,EAAA6S,cAAA7S,EAAAc,KAAA,2BACAd,EAAAuB,QAAAvB,EAAAmL,cAAA+E,gBACAlQ,EAAAuB,QAAAgH,EAAAU,eAEAjJ,EAAA8S,gBAAA9S,EAAAc,KAAA,6BACAd,EAAAuB,QAAAvB,EAAAmL,cAAAgF,kBACAnQ,EAAAgB,QAAAhB,EAAAsT,mBACAtT,EAAAe,KAAA,WACAf,EAAAuB,QAAA7B,EAAA8D,OACAxD,EAAA6C,SAAA7C,EAAAsT,uBAGAtT,EAAAoT,eAAApT,EAAAc,KAAA,4BACAd,EAAAgB,QAAAhB,EAAAiD,MACAjD,EAAAgB,QAAAhB,EAAAuT,gBACAvT,EAAAe,KAAA,WACAf,EAAAuB,QAAA7B,EAAA8D,OACAxD,EAAA6C,SAAA7C,EAAAuT,oBAGAvT,EAAAuT,eAAAvT,EAAAc,KAAA,4BACAd,EAAAmB,GAAA,CACA,CACAC,IAAA,WAAsC,OAAApB,EAAAuB,QAAAvB,EAAAmL,cAAAqI,eAEtC,CACApS,IAAA,WAAsC,OAAApB,EAAAuB,QAAAvB,EAAAmL,cAAA0E,mBAEtC,CACAzO,IAAA,WAAsC,OAAApB,EAAAuB,QAAAvB,EAAAmL,cAAA6E,2BAItChQ,EAAA+S,kBAAA/S,EAAAc,KAAA,+BACAd,EAAAuB,QAAAvB,EAAAmL,cAAAiF,YACApQ,EAAAgB,QAAAhB,EAAAyT,yBAEAzT,EAAAyT,sBAAAzT,EAAAc,KAAA,mCACAd,EAAAmB,GAAA,CACA,CACAC,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAA0T,sBAEtC,CACAtS,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAA2T,qBAEtC,CACAvS,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAA4T,wBAEtC,CACAxS,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAA6T,oBAEtC,CACAzS,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAA8T,uBAEtC,CACA1S,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAA+T,sBAEtC,CACA3S,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAgU,0BAItChU,EAAA0T,mBAAA1T,EAAAc,KAAA,gCACAd,EAAAmB,GAAA,CACA,CACAC,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAoD,OAEtC,CAGAhC,IAAA,WACApB,EAAAuB,QAAA7B,EAAAqE,QACA/D,EAAA6C,SAAA7C,EAAAoD,KACApD,EAAAuB,QAAA7B,EAAAsE,cAKAhE,EAAA2T,kBAAA3T,EAAAc,KAAA,+BACAd,EAAAuB,QAAA7B,EAAAqE,QACA/D,EAAAgB,QAAAhB,EAAAyT,uBACAzT,EAAAiU,aAAA,WAA4C,OAAAjU,EAAA6C,SAAA7C,EAAAyT,yBAC5CzT,EAAA4C,OAAA,WAAsC,OAAA5C,EAAAuB,QAAA7B,EAAAyD,aACtCnD,EAAAuB,QAAA7B,EAAAsE,UAEAhE,EAAA4T,qBAAA5T,EAAAc,KAAA,kCACAd,EAAAuB,QAAA7B,EAAAmE,UACA7D,EAAAuB,QAAAvB,EAAAmL,cAAA+I,uBACAlU,EAAAgB,QAAAhB,EAAAyT,uBACAzT,EAAA4C,OAAA,WAAsC,OAAA5C,EAAAuB,QAAA7B,EAAAyD,aACtCnD,EAAAuB,QAAA7B,EAAAoE,YAEA9D,EAAA6T,iBAAA7T,EAAAc,KAAA,8BACAd,EAAAuB,QAAA7B,EAAAmE,UACA7D,EAAAuB,QAAAvB,EAAAmL,cAAAgJ,mBACAnU,EAAAgB,QAAAhB,EAAAyT,uBACAzT,EAAA4C,OAAA,WAAsC,OAAA5C,EAAAuB,QAAA7B,EAAAyD,aACtCnD,EAAAuB,QAAA7B,EAAAoE,YAEA9D,EAAA8T,oBAAA9T,EAAAc,KAAA,iCACAd,EAAAuB,QAAA7B,EAAAmE,UACA7D,EAAAuB,QAAAvB,EAAAmL,cAAAiJ,sBACApU,EAAAgB,QAAAhB,EAAAyT,uBACAzT,EAAA4C,OAAA,WAAsC,OAAA5C,EAAAuB,QAAA7B,EAAAyD,aACtCnD,EAAAuB,QAAA7B,EAAAoE,YAEA9D,EAAA+T,mBAAA/T,EAAAc,KAAA,gCACAd,EAAAuB,QAAA7B,EAAAmE,UACA7D,EAAAuB,QAAAvB,EAAAmL,cAAAkJ,qBACArU,EAAAgB,QAAAhB,EAAAyT,uBACAzT,EAAA4C,OAAA,WAAsC,OAAA5C,EAAAuB,QAAA7B,EAAAyD,aACtCnD,EAAAuB,QAAA7B,EAAAoE,YAEA9D,EAAAgU,mBAAAhU,EAAAc,KAAA,gCACAd,EAAAuB,QAAA7B,EAAAmE,UACA7D,EAAAuB,QAAAvB,EAAAmL,cAAAmJ,qBACAtU,EAAAgB,QAAAhB,EAAAyT,uBACAzT,EAAA4C,OAAA,WAAsC,OAAA5C,EAAAuB,QAAA7B,EAAAyD,aACtCnD,EAAAuB,QAAA7B,EAAAoE,YAEA9D,EAAAgT,uBAAAhT,EAAAc,KAAA,oCACAd,EAAAmB,GAAA,CACA,CACAC,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAuU,sBAGtC,CACAnT,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAwU,yBAEtC,CACApT,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAyU,qCAEtC,CACArT,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAA0U,6BAEtC,CACAtT,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAA2U,0BAEtC,CACAvT,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAA4U,iCAItC5U,EAAAuU,mBAAAvU,EAAAc,KAAA,gCACAd,EAAAuB,QAAAgH,EAAAW,oBACAlJ,EAAAmB,GAAA,CACA,CACAC,IAAA,WAAsC,OAAApB,EAAAuB,QAAA7B,EAAAuE,WAEtC,CACA7C,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAA6U,uBAItC7U,EAAAwU,sBAAAxU,EAAAc,KAAA,mCACAd,EAAAmB,GAAA,CACA,CACAC,IAAA,WAAsC,OAAApB,EAAAuB,QAAAvB,EAAAmL,cAAA2J,gBAEtC,CACA1T,IAAA,WAAsC,OAAApB,EAAAuB,QAAAvB,EAAAmL,cAAA4J,eAGtC/U,EAAAgB,QAAAhB,EAAAoE,UAEApE,EAAAyU,kCAAAzU,EAAAc,KAAA,+CACAd,EAAAuB,QAAAgH,EAAAY,mCACAnJ,EAAAuB,QAAA7B,EAAA6E,sBACAvE,EAAA4C,OAAA,WACA5C,EAAAmB,GAAA,CACA,CACAC,IAAA,WAA0C,OAAApB,EAAAuB,QAAA7B,EAAA2E,WAE1C,CACAjD,IAAA,WACApB,EAAAuB,QAAA7B,EAAA4E,aACAtE,EAAAuB,QAAAvB,EAAAmL,cAAA6J,oBAGA,CACA5T,IAAA,WACApB,EAAAiV,SAAAvV,EAAA4E,aACAtE,EAAAuB,QAAAvB,EAAAmL,cAAA+J,0BAMAlV,EAAA0U,0BAAA1U,EAAAc,KAAA,uCACAd,EAAAuB,QAAAgH,EAAAa,2BACApJ,EAAAgB,QAAAhB,EAAAoE,QACApE,EAAA4C,OAAA,WACA5C,EAAAmB,GAAA,CACA,CACAC,IAAA,WAA0C,OAAApB,EAAAuB,QAAA7B,EAAA2E,WAE1C,CACAjD,IAAA,WACApB,EAAAuB,QAAA7B,EAAA4E,aACAtE,EAAAuB,QAAAvB,EAAAmL,cAAA6J,0BAMAhV,EAAA2U,uBAAA3U,EAAAc,KAAA,oCACAd,EAAAuB,QAAAgH,EAAAc,wBACArJ,EAAAmB,GAAA,CACA,CACAC,IAAA,WAAsC,OAAApB,EAAAuB,QAAA7B,EAAApB,QAEtC,CACA8C,IAAA,WAAsC,OAAApB,EAAAuB,QAAA7B,EAAAnB,SAEtC,CACA6C,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAmV,uBAItCnV,EAAA4U,0BAAA5U,EAAAc,KAAA,uCACAd,EAAAuB,QAAAgH,EAAAgB,2BACAvJ,EAAAgB,QAAAhB,EAAAyD,WAEAzD,EAAAiT,0BAAAjT,EAAAc,KAAA,uCACAd,EAAAmB,GAAA,CACA,CACAC,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAoV,6BAEtC,CACAhU,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAqV,kCAEtC,CACAjU,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAsV,gCAEtC,CACAlU,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAuV,+CAItCvV,EAAAoV,0BAAApV,EAAAc,KAAA,uCACAd,EAAAuB,QAAAvB,EAAAmL,cAAAqK,kBACAxV,EAAAgB,QAAAhB,EAAAyV,yBAEAzV,EAAAyV,sBAAAzV,EAAAc,KAAA,mCACAd,EAAAuB,QAAA7B,EAAAqE,QACA/D,EAAAe,KAAA,WACAf,EAAAuB,QAAA7B,EAAA6E,wBAEAvE,EAAAuB,QAAA7B,EAAAsE,UAEAhE,EAAAqV,+BAAArV,EAAAc,KAAA,4CACAd,EAAAmB,GAAA,CACA,CACAC,IAAA,WAAsC,OAAApB,EAAAuB,QAAAvB,EAAAmL,cAAAuK,aAEtC,CACAtU,IAAA,WAAsC,OAAApB,EAAAuB,QAAAvB,EAAAmL,cAAAwK,YAEtC,CACAvU,IAAA,WAAsC,OAAApB,EAAAuB,QAAAvB,EAAAmL,cAAAyK,gBAGtC5V,EAAAgB,QAAAhB,EAAA6V,wBAEA7V,EAAA6V,qBAAA7V,EAAAc,KAAA,kCACAd,EAAAuB,QAAA7B,EAAAqE,QACA/D,EAAAe,KAAA,WACAf,EAAAgB,QAAAhB,EAAAmR,cAEAnR,EAAAuB,QAAA7B,EAAAsE,UAEAhE,EAAAsV,6BAAAtV,EAAAc,KAAA,0CACAd,EAAAuB,QAAAvB,EAAAmL,cAAA2K,yBACA9V,EAAAgB,QAAAhB,EAAA+V,sBAEA/V,EAAA+V,mBAAA/V,EAAAc,KAAA,gCACAd,EAAAuB,QAAA7B,EAAAqE,QACA/D,EAAAe,KAAA,WACAf,EAAAgB,QAAAhB,EAAAoD,OAEApD,EAAAuB,QAAA7B,EAAAsE,UAEAhE,EAAAuV,wCAAAvV,EAAAc,KAAA,qDACAd,EAAAuB,QAAAvB,EAAAmL,cAAA6K,UACAhW,EAAAgB,QAAAhB,EAAAiW,iCAEAjW,EAAAiW,8BAAAjW,EAAAc,KAAA,2CACAd,EAAAuB,QAAA7B,EAAAqE,QACA/D,EAAAe,KAAA,WACAf,EAAAgB,QAAAhB,EAAAkW,uBAEAlW,EAAAuB,QAAA7B,EAAAsE,UAEAhE,EAAAkT,8BAAAlT,EAAAc,KAAA,2CACAd,EAAAuB,QAAAgH,EAAAe,yBACAtJ,EAAAgB,QAAAhB,EAAAmR,cAEAnR,EAAAmT,wBAAAnT,EAAAc,KAAA,qCACAd,EAAAuB,QAAAvB,EAAAmL,cAAAkF,gBACArQ,EAAAgB,QAAAhB,EAAAkW,uBAEAlW,EAAAmR,WAAAnR,EAAAc,KAAA,wBACAd,EAAAmB,GAAA,CACA,CACAC,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAoD,OAEtC,CACAhC,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAA2C,yBAEtC,CACAvB,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAqD,iBAItCrD,EAAAkW,oBAAAlW,EAAAc,KAAA,iCACAd,EAAAmB,GAAA,CACA,CACAC,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAmR,cAEtC,CACA/P,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAyD,eAItCzD,EAAAsT,kBAAAtT,EAAAc,KAAA,+BACAd,EAAAmB,GAAA,CACA,CACAC,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAoD,OAEtC,CACAhC,IAAA,WAAsC,OAAApB,EAAAgB,QAAAhB,EAAAyD,eAItCzD,EAAAmV,gBAAAnV,EAAAc,KAAA,6BACAd,EAAAgB,QAAAhB,EAAAmW,4BACAnW,EAAAuB,QAAAvB,EAAAmL,cAAAiL,qBAEApW,EAAAqW,eAAArW,EAAAc,KAAA,4BACAd,EAAAgB,QAAAhB,EAAAmW,4BACAnW,EAAAuB,QAAAvB,EAAAmL,cAAA6J,oBAEAhV,EAAA6U,gBAAA7U,EAAAc,KAAA,6BACAd,EAAAgB,QAAAhB,EAAAmW,4BACAnW,EAAAuB,QAAAvB,EAAAmL,cAAAmL,qBAEAtW,EAAAuW,aAAAvW,EAAAc,KAAA,0BACAd,EAAAgB,QAAAhB,EAAAmW,4BACAnW,EAAAuB,QAAAvB,EAAAmL,cAAAqL,kBAEAxW,EAAAyW,eAAAzW,EAAAc,KAAA,4BACAd,EAAAgB,QAAAhB,EAAAmW,4BACAnW,EAAAuB,QAAAvB,EAAAmL,cAAA+J,oBAEAlV,EAAAmW,2BAAAnW,EAAAc,KAAA,wCACAd,EAAAgB,QAAAhB,EAAAoE,QACApE,EAAAuB,QAAA7B,EAAA4E,eAEAtE,EAAA8K,WACA9K,EAAAQ,MAAA,IAA0BsI,EAAA,MAAKJ,EAAAoC,IAC/B9K,EAAAmL,cAAA1C,EAAAqC,GACQhC,EAAA,OAAM/I,oBAAAC,GACdA,EAEA,OApeIoS,EAASE,EAAA3S,GAoeb2S,EAree,CAseb1T,aAAA,GCzgBFlK,EAAAQ,EAAAyB,EAAA,gCAAA+f,IAAAhiB,EAAAQ,EAAAyB,EAAA,gCAAA0b,IAGO,IAAAqE,EAAkBhiB,EAAQ,oCCHjCA,EAAAQ,EAAAyB,EAAA,sBAAAggB,IAAAjiB,EAAAQ,EAAAyB,EAAA,sBAAAigB,IAAAliB,EAAAQ,EAAAyB,EAAA,sBAAAkgB,IAAA,IAAAxX,EAA4B,WAS5B,OARAA,EAAA3L,OAAA4L,QAAA,SAAAzJ,GACA,QAAAlB,EAAAtB,EAAA,EAAA+C,EAAAmJ,UAAAhM,OAAgDF,EAAA+C,EAAO/C,IAEvD,QAAAkD,KADA5B,EAAA4K,UAAAlM,GACAK,OAAAC,UAAAC,eAAAC,KAAAc,EAAA4B,KACAV,EAAAU,GAAA5B,EAAA4B,IAEA,OAAAV,IAEA3B,MAAArB,KAAA0M,YAEOoX,EAAA,SAAArkB,EAAA4e,GACP4F,EAAAxkB,EAAA,KAAA4e,IAEO0F,EAAA,SAAAtkB,EAAA4e,GACP4F,EAAAxkB,EAAA,KAAA4e,GAAA,IAEO,SAAA2F,EAAAxgB,GACP,OAAA0gB,QAAA1gB,GAAA,SAAAA,GAEA,IAAA2gB,EAAA,WAMA,OALA,SAAAxX,GACA,IAAAiQ,EAAAjQ,EAAAiQ,KAAAwH,EAAAzX,EAAAyX,UACApkB,KAAA4c,KAAApQ,EAAA,GAA+BoQ,GAC/B5c,KAAAokB,UAAA5X,EAAA,GAAoC4X,IAJpC,GAQAH,EAAA,SAAAxkB,EAAAyc,EAAAmC,EAAAgG,GAGA,QAFA,IAAAnI,IAAyBA,EAAA,IAAAiI,EAAA,CAA4BvH,KAAAnd,UACrD,IAAA4kB,IAAiCA,GAAA,IACjCL,EAAAvkB,GAEA,OAAA4e,EAAAgG,EAAA7X,EAAA,GAA8C0P,MAG9C,IAAAE,EAAA3c,EAAA2c,SACAvb,OAAA8V,KAAAyF,GAAAjF,QAAA,SAAA9T,GACA,IAAAihB,EAAAlI,EAAA/Y,GACAihB,EAAA5jB,QAGA4jB,EAAAnN,QAAA,SAAA0F,GACA,IAAA0H,EAAAF,EACA,IAAAF,EAAA,CAAuCvH,KAAAC,EAAAuH,UAAAlI,IACvC,CAAmBU,KAAAC,EAAAuH,UAAAlI,GAgBnBmC,EAAAkG,EAfA,SAAAC,GACA,IAAAC,EAAAF,EACAC,IACAC,EAAAJ,EACA,IAAAF,EAAA,CACAvH,KAAA4H,EAAA5H,KACAwH,UAAAI,EAAAJ,YAEA,CACAxH,KAAA4H,EAAA5H,KACAwH,UAAAI,EAAAJ,YAGAH,EAAApH,EAAA4H,EAAApG,EAAAgG,0ECjDAK,EAAA,wDACAC,EAAA,CACAC,KAAA,KACAC,IAAA,IACAC,IAAA,IACAvhB,EAAA,KACAX,EAAA,KACAI,EAAA,KACA+hB,EAAA,KACA7Y,EAAA,KACA8Y,EAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,EAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAM,IACNC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,KAEOC,EAAA,mBACAC,EAAA,mBACAC,EAAA,mCACAC,EAAA,mCACAC,EAAA,8CACAC,EAAA,8CACAC,EAAA,6BACAC,EAAA,oCACAC,EAAA,0CAEIC,EAAQ,SAAAC,GACnB,IACA,OAAAA,EAAAC,QAAApC,EAAA,SAAAM,EAAA+B,EAAAC,EAAAC,GACA,GAAAF,EACA,OAAAxV,OAAA2V,aAAAC,SAAAJ,EAAA,KAEA,GAAAC,EAAA,CACA,IAAAI,EAAAD,SAAAH,EAAA,IACA,OAAAI,GAAA,MACA7V,OAAA2V,aAAAE,GAEA7V,OAAA2V,aAAA,OAAAE,GAAA,wBAAAA,IAGA,IAAAC,EAAA1C,EAAAsC,GACA,IAAAI,EACA,UAAAC,MAEA,OAAAD,IAIA,MAAAE,GACA,cCzEA1lB,EAAAQ,EAAAyB,EAAA,mCAAA+I,IAAAhL,EAAAQ,EAAAyB,EAAA,qCAAA8I,IAAA,IAAAmJ,EAAqBlU,EAAQ,GAAkBkU,eAK/CyR,EAAA,mIACO3a,EAAA,CACPwN,QAAaxZ,OAAAoV,EAAA,YAAApV,CAAW,CACxByB,KAAA,UACA4B,QAAA,UACAoW,MAAA,aAEAtJ,SAAA+E,EAAA/E,SACAC,SAAA8E,EAAA9E,SACAC,OAAA6E,EAAA7E,OACAC,OAAA4E,EAAA5E,OACAxC,OAAAoH,EAAApH,OACA8L,WAAA1E,EAAA0E,WAEAhP,KAAU5K,OAAAoV,EAAA,YAAApV,CAAW,CACrByB,KAAA,OACA4B,QAAA,SAEAwH,MAAW7K,OAAAoV,EAAA,YAAApV,CAAW,CACtByB,KAAA,QACA4B,QAAA,UAEAuN,YAAAsE,EAAAtE,YACAvB,OAAA6F,EAAA7F,OACAC,OAAA4F,EAAA5F,OACAQ,MAAAoF,EAAApF,MACAL,UAAAyF,EAAAzF,UACAvL,EAAAgR,EAAAhR,EACAK,OAAA2Q,EAAA3Q,OACAD,KAAA4Q,EAAA5Q,KACA+J,SAAA6G,EAAA7G,SACA8C,SAAA+D,EAAA/D,SACAU,iBAAAqD,EAAArD,iBACAlD,SAAc3O,OAAAoV,EAAA,YAAApV,CAAW,CAAEyB,KAAA,WAAA4B,QAAA,UAC3B8K,WAAgBnO,OAAAoV,EAAA,YAAApV,CAAW,CAAEyB,KAAA,aAAA4B,QAAA,YAC7BsN,QAAAuE,EAAAvE,QACAJ,QAAavQ,OAAAoV,EAAA,YAAApV,CAAW,CACxByB,KAAA,UACA4B,QAAiB0O,EAAA,EAAKO,IAAKP,EAAA,EAAKQ,OAAA,iBAEhC/B,QAAaxQ,OAAAoV,EAAA,YAAApV,CAAW,CACxByB,KAAA,UACA4B,QAAiB0O,EAAA,EAAKO,IAAKP,EAAA,EAAKQ,OAAA,wBAEhC9B,OAAYzQ,OAAAoV,EAAA,YAAApV,CAAW,CACvByB,KAAA,SACA4B,QAAiB0O,EAAA,EAAKO,IAAKP,EAAA,EAAKQ,OAAA,QAAiBR,EAAA,EAAKC,GAAID,EAAA,EAAKO,IAAA,WAAiBsU,EAAA,GAAW7U,EAAA,EAAKO,IAAA,QAAcsU,EAAA,GAAW7U,EAAA,EAAKO,IAAA,MAAYsU,EAAA,OAE1IjU,SAAc3S,OAAAoV,EAAA,YAAApV,CAAW,CAAEyB,KAAA,WAAA4B,QAA4BujB,EAAA,IACvDhU,MAAW5S,OAAAoV,EAAA,YAAApV,CAAW,CAAEyB,KAAA,QAAA4B,QAAyBujB,EAAA,IACjD9U,KAAAoD,EAAApD,KACAqB,IAASnT,OAAAoV,EAAA,YAAApV,CAAW,CAAEyB,KAAA,MAAA4B,QAAuBujB,EAAA,IAC7C1T,QAAAgC,EAAAhC,QACAL,IAAS7S,OAAAoV,EAAA,YAAApV,CAAW,CAAEyB,KAAA,MAAA4B,QAAuBujB,EAAA,IAC7C7V,iCAAsC/Q,OAAAoV,EAAA,YAAApV,CAAW,CACjDyB,KAAA,mCACA4B,QAAA,SAAAwjB,EAAAC,QACA,IAAAA,IAAyCA,EAAA,GACzC,IAAAC,EAAwBpB,EAA4BhK,KAAAkL,EAAA7jB,MAAA8jB,IACpD,OAAAC,GAAkC,OAARhB,EAAQgB,EAAA,IAIlCA,EAFA,MAIAjN,aAAA,IAEA9I,0BAA+BhR,OAAAoV,EAAA,YAAApV,CAAW,CAC1CyB,KAAA,4BACA4B,QAAA,SAAAwjB,EAAAC,QACA,IAAAA,IAAyCA,EAAA,GACzC,IAAAC,EAAwBrB,EAAsB/J,KAAAkL,EAAA7jB,MAAA8jB,IAC9C,OAAAC,GAAkC,OAARhB,EAAQgB,EAAA,IAIlCA,EAFA,MAIAjN,aAAA,IAEAjJ,qBAA0B7Q,OAAAoV,EAAA,YAAApV,CAAW,CACrCyB,KAAA,uBACA4B,QAAA,SAAAwjB,EAAAC,QACA,IAAAA,IAAyCA,EAAA,GACzC,IAAAE,EAAAH,EAAA7jB,MAAA8jB,GACAC,EAAwBzB,EAA2B3J,KAAAqL,GACnD,OAAAD,KAGAA,EAAoBvB,EAAkB7J,KAAAqL,IAId,OAARjB,EAAQgB,EAAA,IAExB,KAEAA,EANA,OAQAjN,aAAA,IAEAhJ,4BAAiC9Q,OAAAoV,EAAA,YAAApV,CAAW,CAC5CyB,KAAA,8BACA4B,QAAA,SAAAwjB,EAAAC,QACA,IAAAA,IAAyCA,EAAA,GACzC,IAAAE,EAAAH,EAAA7jB,MAAA8jB,GACAC,EAAwBxB,EAAiC5J,KAAAqL,GACzD,OAAAD,KAGAA,EAAoBtB,EAAwB9J,KAAAqL,IAIpB,OAARjB,EAAQgB,EAAA,IAExB,KAEAA,EANA,OAQAjN,aAAA,IAEAmN,MAAWjnB,OAAAoV,EAAA,YAAApV,CAAW,CACtByB,KAAA,QACA4B,QAAA,SAAAwjB,EAAAC,GAEA,YADA,IAAAA,IAAyCA,EAAA,GACzCH,EAAAhL,KAAAkL,EAAA7jB,MAAA8jB,KAEAhN,aAAA,IAEAvL,OAAYvO,OAAAoV,EAAA,YAAApV,CAAW,CACvByB,KAAA,SACA4B,QAAA,SAAAwjB,EAAAC,QACA,IAAAA,IAAyCA,EAAA,GACzC,IAAAE,EAAAH,EAAA7jB,MAAA8jB,GACAC,EAAwBjB,EAAYnK,KAAAqL,GACpC,GAAAD,EACA,OAAAA,EAGA,KADAA,EAAoBlB,EAAUlK,KAAAqL,IAE9B,YAEA,IAAA9kB,EAAwB6jB,EAAQgB,EAAA,IAChC,cAAA7kB,GAAkC0jB,EAAesB,KAAAhlB,GACjD,KAEA6kB,GAEAjN,aAAA,IAEApH,cAAmB1S,OAAAoV,EAAA,YAAApV,CAAW,CAAEyB,KAAA,gBAAA4B,QAAiCujB,EAAA,IACjE7T,WAAgB/S,OAAAoV,EAAA,YAAApV,CAAW,CAAEyB,KAAA,aAAA4B,QAA8BujB,EAAA,IAC3D5T,SAAchT,OAAAoV,EAAA,YAAApV,CAAW,CAAEyB,KAAA,WAAA4B,QAA4BujB,EAAA,IACvD3T,UAAejT,OAAAoV,EAAA,YAAApV,CAAW,CAAEyB,KAAA,YAAA4B,QAA6BujB,EAAA,IACzDxT,SAAcpT,OAAAoV,EAAA,YAAApV,CAAW,CAAEyB,KAAA,WAAA4B,QAA4BujB,EAAA,IACvD9T,aAAkB9S,OAAAoV,EAAA,YAAApV,CAAW,CAAEyB,KAAA,eAAA4B,QAAgCujB,EAAA,IAC/D5M,QAAaha,OAAAoV,EAAA,YAAApV,CAAW,CACxByB,KAAA,UACA4B,QAAA,SAGO0I,EAAA,CACPC,EAAAwN,QACAtE,EAAApD,KACAoD,EAAA/E,SACA+E,EAAA9E,SACA8E,EAAA7E,OACA6E,EAAA5E,OACA4E,EAAA0E,WACA5N,EAAApB,KACAoB,EAAAnB,MACAqK,EAAApF,MACAoF,EAAAzF,UACAyF,EAAA7G,SACA6G,EAAAhR,EACAgR,EAAA3Q,OACA2Q,EAAA5Q,KACA4Q,EAAA/D,SACA+D,EAAArD,iBACA7F,EAAA2C,SACA3C,EAAAmC,WACA+G,EAAAvE,QACA3E,EAAAyE,OACAzE,EAAAwE,QACA0E,EAAApH,OACAoH,EAAAtE,YACA5E,EAAAqD,OACArD,EAAAsD,OACAtD,EAAAuC,OACAvC,EAAA+E,iCACA/E,EAAAgF,0BACAhF,EAAA6E,qBACA7E,EAAA8E,4BACA9E,EAAAuE,QACAvE,EAAA2G,SACA3G,EAAAmH,IACA+B,EAAAhC,QACAlH,EAAA6G,IACA7G,EAAA0G,cACA1G,EAAA+G,WACA/G,EAAAgH,SACAhH,EAAAiH,UACAjH,EAAAoH,SACApH,EAAA8G,aACA9G,EAAA4G,MACA5G,EAAAib,MACAjb,EAAAgO","file":"millan.shacl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"shacl\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"shacl\"] = factory();\n\telse\n\t\troot[\"millan\"] = root[\"millan\"] || {}, root[\"millan\"][\"shacl\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t3: 0,\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([66,0,9]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// @ts-ignore: import types for declarations\nimport { createToken } from 'chevrotain';\nvar MAX_LENGTH = createToken({\n    name: 'MAX_LENGTH',\n    pattern: /MAX LENGTH/i,\n});\nexport var keywords = {\n    SELECT: createToken({\n        name: 'SELECT',\n        pattern: /SELECT/i,\n    }),\n    CONSTRUCT: createToken({\n        name: 'CONSTRUCT',\n        pattern: /CONSTRUCT/i,\n    }),\n    DISTINCT: createToken({\n        name: 'DISTINCT',\n        pattern: /DISTINCT/i,\n    }),\n    START: createToken({\n        name: 'START',\n        pattern: /START/i,\n    }),\n    END: createToken({\n        name: 'END',\n        pattern: /END/i,\n    }),\n    VIA: createToken({\n        name: 'VIA',\n        pattern: /VIA/i,\n    }),\n    PATHS: createToken({\n        name: 'PATHS',\n        pattern: /PATHS/i,\n    }),\n    PATHS_ALL: createToken({\n        name: 'PATHS_ALL',\n        pattern: /PATHS ALL/i,\n    }),\n    PATHS_SHORTEST: createToken({\n        name: 'PATHS_SHORTEST',\n        pattern: /PATHS SHORTEST/i,\n    }),\n    CYCLIC: createToken({\n        name: 'CYCLIC',\n        pattern: /CYCLIC/i,\n    }),\n    AS: createToken({\n        name: 'AS',\n        pattern: /AS/i,\n    }),\n    WHERE: createToken({\n        name: 'WHERE',\n        pattern: /WHERE/i,\n    }),\n    A: createToken({\n        name: 'A',\n        pattern: /a/,\n    }),\n    GROUP_BY: createToken({\n        name: 'GROUP_BY',\n        pattern: /GROUP BY/i,\n    }),\n    ORDER_BY: createToken({\n        name: 'ORDER_BY',\n        pattern: /ORDER BY/i,\n    }),\n    BY: createToken({\n        name: 'BY',\n        pattern: /BY/i,\n    }),\n    BASE: createToken({\n        name: 'BASE',\n        pattern: /BASE/i,\n    }),\n    PREFIX: createToken({\n        name: 'PREFIX',\n        pattern: /PREFIX/i,\n    }),\n    DESCRIBE: createToken({\n        name: 'DESCRIBE',\n        pattern: /DESCRIBE/i,\n    }),\n    ASK: createToken({\n        name: 'ASK',\n        pattern: /ASK/i,\n    }),\n    FROM: createToken({\n        name: 'FROM',\n        pattern: /FROM/i,\n    }),\n    REDUCED: createToken({\n        name: 'REDUCED',\n        pattern: /REDUCED/i,\n    }),\n    NAMED: createToken({\n        name: 'NAMED',\n        pattern: /NAMED/i,\n    }),\n    HAVING: createToken({\n        name: 'HAVING',\n        pattern: /HAVING/i,\n    }),\n    ASC: createToken({\n        name: 'ASC',\n        pattern: /ASC/i,\n    }),\n    DESC: createToken({\n        name: 'DESC',\n        pattern: /DESC/i,\n    }),\n    OFFSET: createToken({\n        name: 'OFFSET',\n        pattern: /OFFSET/i,\n    }),\n    LIMIT: createToken({\n        name: 'LIMIT',\n        pattern: /LIMIT/i,\n    }),\n    VALUES: createToken({\n        name: 'VALUES',\n        pattern: /VALUES/i,\n    }),\n    LOAD: createToken({\n        name: 'LOAD',\n        pattern: /LOAD/i,\n    }),\n    SILENT: createToken({\n        name: 'SILENT',\n        pattern: /SILENT/i,\n    }),\n    INTO: createToken({\n        name: 'INTO',\n        pattern: /INTO/i,\n    }),\n    CLEAR: createToken({\n        name: 'CLEAR',\n        pattern: /CLEAR/i,\n    }),\n    DROP: createToken({\n        name: 'DROP',\n        pattern: /DROP/i,\n    }),\n    CREATE: createToken({\n        name: 'CREATE',\n        pattern: /CREATE/i,\n    }),\n    ADD: createToken({\n        name: 'ADD',\n        pattern: /ADD/i,\n    }),\n    TO: createToken({\n        name: 'TO',\n        pattern: /TO/i,\n    }),\n    MOVE: createToken({\n        name: 'MOVE',\n        pattern: /MOVE/i,\n    }),\n    COPY: createToken({\n        name: 'COPY',\n        pattern: /COPY/i,\n    }),\n    INSERT_DATA: createToken({\n        name: 'INSERT_DATA',\n        pattern: /INSERT +DATA/i,\n    }),\n    DELETE_DATA: createToken({\n        name: 'DELETE_DATA',\n        pattern: /DELETE +DATA/i,\n    }),\n    DELETE_WHERE: createToken({\n        name: 'DELETE_WHERE',\n        pattern: /DELETE +WHERE/i,\n    }),\n    WITH: createToken({\n        name: 'WITH',\n        pattern: /WITH/i,\n    }),\n    DELETE: createToken({\n        name: 'DELETE',\n        pattern: /DELETE/i,\n    }),\n    INSERT: createToken({\n        name: 'INSERT',\n        pattern: /INSERT/i,\n    }),\n    USING: createToken({\n        name: 'USING',\n        pattern: /USING/i,\n    }),\n    DEFAULT: createToken({\n        name: 'DEFAULT',\n        pattern: /DEFAULT/i,\n    }),\n    GRAPH: createToken({\n        name: 'GRAPH',\n        pattern: /GRAPH/i,\n    }),\n    ALL: createToken({\n        name: 'ALL',\n        pattern: /ALL/i,\n    }),\n    OPTIONAL: createToken({\n        name: 'OPTIONAL',\n        pattern: /OPTIONAL/i,\n    }),\n    SERVICE: createToken({\n        name: 'SERVICE',\n        pattern: /SERVICE/i,\n    }),\n    BIND: createToken({\n        name: 'BIND',\n        pattern: /BIND/i,\n    }),\n    UNNEST: createToken({\n        name: 'UNNEST',\n        pattern: /UNNEST/i,\n    }),\n    UNDEF: createToken({\n        name: 'UNDEF',\n        pattern: /UNDEF/i,\n    }),\n    MINUS: createToken({\n        name: 'MINUS',\n        pattern: /MINUS/i,\n    }),\n    UNION: createToken({\n        name: 'UNION',\n        pattern: /UNION/i,\n    }),\n    FILTER: createToken({\n        name: 'FILTER',\n        pattern: /FILTER/i,\n    }),\n    STR: createToken({\n        name: 'STR',\n        pattern: /STR/i,\n    }),\n    LANG: createToken({\n        name: 'LANG',\n        pattern: /LANG/i,\n    }),\n    LANGMATCHES: createToken({\n        name: 'LANGMATCHES',\n        pattern: /LANGMATCHES/i,\n    }),\n    DATATYPE: createToken({\n        name: 'DATATYPE',\n        pattern: /DATATYPE/i,\n    }),\n    BOUND: createToken({\n        name: 'BOUND',\n        pattern: /BOUND/i,\n    }),\n    IRI: createToken({\n        name: 'IRI',\n        pattern: /IRI/i,\n    }),\n    URI: createToken({\n        name: 'URI',\n        pattern: /URI/i,\n    }),\n    BNODE: createToken({\n        name: 'BNODE',\n        pattern: /BNODE/i,\n    }),\n    RAND: createToken({\n        name: 'RAND',\n        pattern: /RAND/i,\n    }),\n    ABS: createToken({\n        name: 'ABS',\n        pattern: /ABS/i,\n    }),\n    CEIL: createToken({\n        name: 'CEIL',\n        pattern: /CEIL/i,\n    }),\n    FLOOR: createToken({\n        name: 'FLOOR',\n        pattern: /FLOOR/i,\n    }),\n    ROUND: createToken({\n        name: 'ROUND',\n        pattern: /ROUND/i,\n    }),\n    CONCAT: createToken({\n        name: 'CONCAT',\n        pattern: /CONCAT/i,\n    }),\n    STRLEN: createToken({\n        name: 'STRLEN',\n        pattern: /STRLEN/i,\n    }),\n    UCASE: createToken({\n        name: 'UCASE',\n        pattern: /UCASE/i,\n    }),\n    LCASE: createToken({\n        name: 'LCASE',\n        pattern: /LCASE/i,\n    }),\n    ENCODE_FOR_URI: createToken({\n        name: 'ENCODE_FOR_URI',\n        pattern: /ENCODE_FOR_URI/i,\n    }),\n    CONTAINS: createToken({\n        name: 'CONTAINS',\n        pattern: /CONTAINS/i,\n    }),\n    STRSTARTS: createToken({\n        name: 'STRSTARTS',\n        pattern: /STRSTARTS/i,\n    }),\n    STRENDS: createToken({\n        name: 'STRENDS',\n        pattern: /STRENDS/i,\n    }),\n    STRBEFORE: createToken({\n        name: 'STRBEFORE',\n        pattern: /STRBEFORE/i,\n    }),\n    STRAFTER: createToken({\n        name: 'STRAFTER',\n        pattern: /STRAFTER/i,\n    }),\n    YEAR: createToken({\n        name: 'YEAR',\n        pattern: /YEAR/i,\n    }),\n    MONTH: createToken({\n        name: 'MONTH',\n        pattern: /MONTH/i,\n    }),\n    DAY: createToken({\n        name: 'DAY',\n        pattern: /DAY/i,\n    }),\n    HOURS: createToken({\n        name: 'HOURS',\n        pattern: /HOURS/i,\n    }),\n    MINUTES: createToken({\n        name: 'MINUTES',\n        pattern: /MINUTES/i,\n    }),\n    SECONDS: createToken({\n        name: 'SECONDS',\n        pattern: /SECONDS/i,\n    }),\n    TIMEZONE: createToken({\n        name: 'TIMEZONE',\n        pattern: /TIMEZONE/i,\n    }),\n    TZ: createToken({\n        name: 'TZ',\n        pattern: /TZ/i,\n    }),\n    NOW: createToken({\n        name: 'NOW',\n        pattern: /NOW/i,\n    }),\n    UUID: createToken({\n        name: 'UUID',\n        pattern: /UUID/i,\n    }),\n    STRUUID: createToken({\n        name: 'STRUUID',\n        pattern: /STRUUID/i,\n    }),\n    MD5: createToken({\n        name: 'MD5',\n        pattern: /MD5/i,\n    }),\n    SHA1: createToken({\n        name: 'SHA1',\n        pattern: /SHA1/i,\n    }),\n    SHA256: createToken({\n        name: 'SHA256',\n        pattern: /SHA256/i,\n    }),\n    SHA384: createToken({\n        name: 'SHA384',\n        pattern: /SHA384/i,\n    }),\n    SHA512: createToken({\n        name: 'SHA512',\n        pattern: /SHA512/i,\n    }),\n    COALESCE: createToken({\n        name: 'COALESCE',\n        pattern: /COALESCE/i,\n    }),\n    IF: createToken({\n        name: 'IF',\n        pattern: /IF/i,\n    }),\n    STRLANG: createToken({\n        name: 'STRLANG',\n        pattern: /STRLANG/i,\n    }),\n    STRDT: createToken({\n        name: 'STRDT',\n        pattern: /STRDT/i,\n    }),\n    sameTerm: createToken({\n        name: 'sameTerm',\n        pattern: /sameTerm/i,\n    }),\n    isIRI: createToken({\n        name: 'isIRI',\n        pattern: /isIRI/i,\n    }),\n    isURI: createToken({\n        name: 'isURI',\n        pattern: /isURI/i,\n    }),\n    isBLANK: createToken({\n        name: 'isBLANK',\n        pattern: /isBLANK/i,\n    }),\n    isLITERAL: createToken({\n        name: 'isLITERAL',\n        pattern: /isLITERAL/i,\n    }),\n    isNUMERIC: createToken({\n        name: 'isNUMERIC',\n        pattern: /isNUMERIC/i,\n    }),\n    REGEX: createToken({\n        name: 'REGEX',\n        pattern: /REGEX/i,\n    }),\n    SUBSTR: createToken({\n        name: 'SUBSTR',\n        pattern: /SUBSTR/i,\n    }),\n    REPLACE: createToken({\n        name: 'REPLACE',\n        pattern: /REPLACE/i,\n    }),\n    EXISTS: createToken({\n        name: 'EXISTS',\n        pattern: /EXISTS/i,\n    }),\n    NOT_EXISTS: createToken({\n        name: 'NOT_EXISTS',\n        pattern: /NOT EXISTS/i,\n    }),\n    COUNT: createToken({\n        name: 'COUNT',\n        pattern: /COUNT/i,\n    }),\n    SUM: createToken({\n        name: 'SUM',\n        pattern: /SUM/i,\n    }),\n    MIN: createToken({\n        name: 'MIN',\n        pattern: /MIN/i,\n    }),\n    AVG: createToken({\n        name: 'AVG',\n        pattern: /AVG/i,\n    }),\n    SAMPLE: createToken({\n        name: 'SAMPLE',\n        pattern: /SAMPLE/i,\n    }),\n    GROUP_CONCAT: createToken({\n        name: 'GROUP_CONCAT',\n        pattern: /GROUP_CONCAT/i,\n    }),\n    SEPARATOR: createToken({\n        name: 'SEPARATOR',\n        pattern: /SEPARATOR/i,\n    }),\n    TRUE: createToken({\n        name: 'TRUE',\n        pattern: /TRUE/i,\n    }),\n    FALSE: createToken({\n        name: 'FALSE',\n        pattern: /FALSE/i,\n    }),\n    IN: createToken({\n        name: 'IN',\n        pattern: /IN/i,\n    }),\n    NOT_IN: createToken({\n        name: 'NOT_IN',\n        pattern: /NOT IN/i,\n    }),\n    MAX_LENGTH: MAX_LENGTH,\n    MAX: createToken({\n        name: 'MAX',\n        pattern: /MAX/i,\n        longer_alt: MAX_LENGTH,\n    }),\n};\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a = require('./tokens'), turtleTokenTypes = _a.turtleTokenTypes, turtleTokenMap = _a.turtleTokenMap;\nimport { Parser, Lexer, } from 'chevrotain';\nvar TurtleParser = /** @class */ (function (_super) {\n    __extends(TurtleParser, _super);\n    function TurtleParser(config, tokens, lexerDefinition, performSelfAnalysis) {\n        if (config === void 0) { config = {}; }\n        if (tokens === void 0) { tokens = turtleTokenTypes; }\n        if (lexerDefinition === void 0) { lexerDefinition = tokens; }\n        if (performSelfAnalysis === void 0) { performSelfAnalysis = true; }\n        var _this = _super.call(this, tokens, __assign({ outputCst: true, recoveryEnabled: true }, config)) || this;\n        // Parsing Turtle requires that the parser keep a map of namespaces in state.\n        // Empty prefixes, for example, are allowed only if the empty prefix has been\n        // added to the namespaces map (for now, that's all this tracks). (TODO: We\n        // might want to use a visitor for this, but I'm doing it quick-and-dirty for\n        // now.)\n        // See here: https://www.w3.org/TR/turtle/#handle-PNAME_LN\n        _this.namespacesMap = {};\n        _this.semanticErrors = [];\n        // Clears the state that we have to manage on our own for each parse (see\n        // above for details).\n        _this.resetManagedState = function () {\n            _this.namespacesMap = {};\n            _this.semanticErrors = [];\n        };\n        _this.tokenize = function (document) {\n            return _this.lexer.tokenize(document).tokens;\n        };\n        // NOTE: This parser can parse in two modes, 'standard' and 'stardog'. The\n        // latter includes non-standard features like embedded triples patterns (edge\n        // properties).\n        _this.parse = function (document, mode) {\n            if (mode === void 0) { mode = 'standard'; }\n            _this.input = _this.lexer.tokenize(document).tokens;\n            var cst = _this.turtleDoc(0, [mode]);\n            // Next two items are copied so that they can be returned/held after parse\n            // state is cleared.\n            var errors = _this.errors.slice();\n            var semanticErrors = _this.semanticErrors.slice();\n            _this.resetManagedState();\n            return {\n                errors: errors,\n                semanticErrors: semanticErrors,\n                cst: cst,\n            };\n        };\n        _this.turtleDoc = _this.RULE('turtleDoc', function (mode) {\n            _this.MANY(function () { return _this.SUBRULE(_this.statement, { ARGS: [mode] }); });\n        });\n        _this.statement = _this.RULE('statement', function (mode) {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.directive); } },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.triples, { ARGS: [mode] });\n                        _this.CONSUME(turtleTokenMap.Period);\n                    },\n                },\n            ]);\n        });\n        _this.directive = _this.RULE('directive', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.prefixID); } },\n                { ALT: function () { return _this.SUBRULE(_this.base); } },\n                { ALT: function () { return _this.SUBRULE(_this.sparqlPrefix); } },\n                { ALT: function () { return _this.SUBRULE(_this.sparqlBase); } },\n            ]);\n        });\n        _this.prefixID = _this.RULE('prefixID', function () {\n            _this.CONSUME(turtleTokenMap.TTL_PREFIX);\n            var pnameNsToken = _this.CONSUME(turtleTokenMap.PNAME_NS);\n            var iriToken = _this.CONSUME(turtleTokenMap.IRIREF);\n            var pnameImageWithoutColon = pnameNsToken.image.slice(0, -1);\n            var iriImage = iriToken.image;\n            _this.namespacesMap[pnameImageWithoutColon] = iriImage;\n            _this.CONSUME(turtleTokenMap.Period);\n        });\n        _this.base = _this.RULE('base', function () {\n            _this.CONSUME(turtleTokenMap.TTL_BASE);\n            _this.CONSUME(turtleTokenMap.IRIREF);\n            _this.CONSUME(turtleTokenMap.Period);\n        });\n        _this.sparqlBase = _this.RULE('sparqlBase', function () {\n            _this.CONSUME(turtleTokenMap.BASE);\n            _this.CONSUME(turtleTokenMap.IRIREF);\n        });\n        _this.sparqlPrefix = _this.RULE('sparqlPrefix', function () {\n            _this.CONSUME(turtleTokenMap.PREFIX);\n            var pnameNsToken = _this.CONSUME(turtleTokenMap.PNAME_NS);\n            var iriToken = _this.CONSUME(turtleTokenMap.IRIREF);\n            var pnameImageWithoutColon = pnameNsToken.image.slice(0, -1);\n            var iriImage = iriToken.image;\n            _this.namespacesMap[pnameImageWithoutColon] = iriImage;\n        });\n        _this.triples = _this.RULE('triples', function (mode) {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.OR1([\n                            {\n                                ALT: function () { return _this.SUBRULE(_this.subject); },\n                            },\n                            {\n                                GATE: function () { return mode === 'stardog'; },\n                                ALT: function () { return _this.SUBRULE(_this.EmbeddedTriplePattern); },\n                            },\n                        ]);\n                        _this.SUBRULE(_this.predicateObjectList);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.blankNodePropertyList);\n                        _this.OPTION(function () { return _this.SUBRULE1(_this.predicateObjectList); });\n                    },\n                },\n            ]);\n        });\n        // NOTE: Not part of Turtle spec. Part of Stardog's support for edge\n        // properties/embedded triples/a subset of RDF*.\n        _this.triplesNotEmbedded = _this.RULE('triplesNotEmbedded', function () {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.subject);\n                        _this.SUBRULE(_this.predicateObjectList);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.blankNodePropertyList);\n                        _this.OPTION(function () { return _this.SUBRULE1(_this.predicateObjectList); });\n                    },\n                },\n            ]);\n        });\n        // NOTE: Not part of Turtle spec. Part of Stardog's support for edge\n        // properties/embedded triples/a subset of RDF*.\n        // ALSO NOTE: Intentionally does not conform to the RDF* spec. Stardog does\n        // not allow nesting of embedded triples.\n        _this.EmbeddedTriplePattern = _this.RULE('EmbeddedTriplePattern', function () {\n            _this.CONSUME(turtleTokenMap.LEmbed);\n            _this.SUBRULE(_this.triplesNotEmbedded);\n            _this.CONSUME(turtleTokenMap.REmbed);\n        });\n        _this.predicateObjectList = _this.RULE('predicateObjectList', function () {\n            _this.SUBRULE(_this.verb);\n            _this.SUBRULE(_this.objectList);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.SUBRULE1(_this.verb);\n                    _this.SUBRULE1(_this.objectList);\n                });\n            });\n        });\n        _this.subject = _this.RULE('subject', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.collection); } },\n            ]);\n        });\n        _this.predicate = _this.RULE('predicate', function () {\n            _this.SUBRULE(_this.iri);\n        });\n        _this.objectList = _this.RULE('objectList', function () {\n            _this.SUBRULE(_this.object);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Comma);\n                _this.SUBRULE1(_this.object);\n            });\n        });\n        _this.verb = _this.RULE('verb', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.predicate); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.A); } },\n            ]);\n        });\n        _this.literal = _this.RULE('literal', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n            ]);\n        });\n        _this.blankNodePropertyList = _this.RULE('blankNodePropertyList', function () {\n            _this.CONSUME(turtleTokenMap.LBracket);\n            _this.SUBRULE(_this.predicateObjectList);\n            _this.CONSUME(turtleTokenMap.RBracket);\n        });\n        _this.object = _this.RULE('object', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.collection); } },\n                { ALT: function () { return _this.SUBRULE(_this.blankNodePropertyList); } },\n                { ALT: function () { return _this.SUBRULE(_this.literal); } },\n            ]);\n        });\n        _this.collection = _this.RULE('collection', function () {\n            _this.CONSUME(turtleTokenMap.LParen);\n            _this.MANY(function () { return _this.SUBRULE(_this.object); });\n            _this.CONSUME(turtleTokenMap.RParen);\n        });\n        _this.NumericLiteral = _this.RULE('NumericLiteral', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.INTEGER); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.DECIMAL); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.DOUBLE); } },\n            ]);\n        });\n        _this.RDFLiteral = _this.RULE('RDFLiteral', function () {\n            _this.SUBRULE(_this.String);\n            _this.OPTION(function () {\n                _this.OR([\n                    { ALT: function () { return _this.CONSUME(turtleTokenMap.LANGTAG); } },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(turtleTokenMap.DoubleCaret);\n                            _this.SUBRULE(_this.iri);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.BooleanLiteral = _this.RULE('BooleanLiteral', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.TRUE); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.FALSE); } },\n            ]);\n        });\n        _this.String = _this.RULE('String', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_QUOTE); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_SINGLE_QUOTE); } },\n                {\n                    ALT: function () {\n                        return _this.CONSUME(turtleTokenMap.STRING_LITERAL_LONG_SINGLE_QUOTE);\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_LONG_QUOTE); } },\n            ]);\n        });\n        _this.iri = _this.RULE('iri', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.IRIREF); } },\n                { ALT: function () { return _this.SUBRULE(_this.PrefixedName); } },\n            ]);\n        });\n        _this.PrefixedName = _this.RULE('PrefixedName', function () {\n            var prefixedNameToken = _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.PNAME_LN); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.PNAME_NS); } },\n            ]);\n            var pnameNsImage = prefixedNameToken.image.slice(0, prefixedNameToken.image.indexOf(':'));\n            if (!(pnameNsImage in _this.namespacesMap)) {\n                _this.semanticErrors.push({\n                    name: 'NoNamespacePrefixError',\n                    message: 'A prefix was used for which there was no namespace defined.',\n                    token: prefixedNameToken,\n                    context: {\n                        ruleStack: _this.getHumanReadableRuleStack(),\n                        ruleOccurrenceStack: _this.RULE_OCCURRENCE_STACK.slice(),\n                    },\n                    resyncedTokens: [],\n                });\n            }\n        });\n        _this.BlankNode = _this.RULE('BlankNode', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.BLANK_NODE_LABEL); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.ANON); } },\n            ]);\n        });\n        _this.lexer = new Lexer(lexerDefinition);\n        if (performSelfAnalysis) {\n            Parser.performSelfAnalysis(_this);\n        }\n        return _this;\n    }\n    return TurtleParser;\n}(Parser));\nexport { TurtleParser };\n","export var regex = {\n    or: function () {\n        var r = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            r[_i] = arguments[_i];\n        }\n        return new RegExp(r.map(function (_a) {\n            var source = _a.source;\n            return \"(\" + source + \")\";\n        }).join('|'));\n    },\n    and: function () {\n        var r = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            r[_i] = arguments[_i];\n        }\n        return new RegExp(r.map(function (_a) {\n            var source = _a.source;\n            return \"(\" + source + \")\";\n        }).join(''));\n    },\n    option: function (r) {\n        return new RegExp(\"(\" + r.source + \")?\");\n    },\n    many: function (r) {\n        return new RegExp(\"(\" + r.source + \")*\");\n    },\n};\n","import { regex } from './regex';\nexport var CATCH_ALL = /[\\s\\S]*/; // equivalent to /.*/s, which isn't a JS standard yet\nexport var CATCH_ALL_AT_LEAST_ONE = /[\\s\\S]+/; // equivalent to /.+/s, which isn't a JS standard yet\nexport var IRIREF = /<[^<>\\\\{}|\\^`\\u0000-\\u0020]*>/;\nexport var PN_CHARS_BASE = /[A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\nexport var LANGTAG = /@[a-zA-Z]+(-[a-zA-Z0-9]+)*/;\nexport var INTEGER = /\\d+/;\nexport var DECIMAL = /(\\d*\\.\\d+)|(\\d+\\.\\d*)/;\nexport var EXPONENT = /[eE][+-]?\\d+/;\nexport var ECHAR = /\\\\[tbnrf\"'\\\\]/;\nexport var WS = /[\\u0020\\u0009\\u000d\\u000a]/;\nexport var HEX = /[0-9A-Fa-f]/;\nexport var PN_LOCAL_ESC = /\\\\[_~.\\-!\\$&'()*+,=\\/?#@%;]/;\nexport var PN_CHARS_U = regex.or(PN_CHARS_BASE, /_/);\nexport var PN_CHARS = regex.or(PN_CHARS_U, /-/, /\\d/, /\\u00b7/, /[\\u0300-\\u036f]/, /[\\u203f-\\u2040]/);\nexport var PN_PREFIX = regex.and(PN_CHARS_BASE, regex.option(regex.and(regex.many(regex.or(PN_CHARS, /\\./)), PN_CHARS)));\nexport var PERCENT = regex.and(/%/, HEX, HEX);\nexport var PLX = regex.or(PERCENT, PN_LOCAL_ESC);\nexport var PN_LOCAL = regex.and(regex.or(PN_CHARS_U, /:/, /\\d/, PLX), regex.option(regex.and(regex.many(regex.or(PN_CHARS, /\\./, /:/, PLX)), regex.or(PN_CHARS, /:/, PLX))));\nexport var VARNAME = regex.and(regex.or(PN_CHARS_U, /\\d/), regex.many(regex.or(PN_CHARS_U, /\\d/, /\\u00b7/, /[\\u0300-\\u036f]/, /[\\u203f-\\u2040]/)));\nexport var ANON = regex.and(/\\[/, regex.many(WS), /\\]/);\nexport var NIL = regex.and(/\\(/, regex.many(WS), /\\)/);\nexport var STRING_LITERAL1 = regex.and(/'/, regex.many(regex.or(/[^\\u0027\\u005C\\u000A\\u000D]/, ECHAR)), /'/);\nexport var STRING_LITERAL2 = regex.and(/\"/, regex.many(regex.or(/[^\\u0022\\u005C\\u000A\\u000D]/, ECHAR)), /\"/);\nexport var STRING_LITERAL_LONG1 = regex.and(/'''/, regex.many(regex.and(regex.option(regex.or(/'/, /''/)), regex.or(/[^'\\\\]/, ECHAR))), /'''/);\nexport var STRING_LITERAL_LONG2 = regex.and(/\"\"\"/, regex.many(regex.and(regex.option(regex.or(/\"/, /\"\"/)), regex.or(/[^\"\\\\]/, ECHAR))), /\"\"\"/);\nexport var DOUBLE = regex.or(regex.and(/\\d+\\.\\d*/, EXPONENT), regex.and(/\\.\\d+/, EXPONENT), regex.and(/\\d+/, EXPONENT));\nexport var INTEGER_POSITIVE = regex.and(/\\+/, INTEGER);\nexport var DECIMAL_POSITIVE = regex.and(/\\+/, DECIMAL);\nexport var DOUBLE_POSITIVE = regex.and(/\\+/, DOUBLE);\nexport var INTEGER_NEGATIVE = regex.and(/-/, INTEGER);\nexport var DECIMAL_NEGATIVE = regex.and(/-/, DECIMAL);\nexport var DOUBLE_NEGATIVE = regex.and(/-/, DOUBLE);\nexport var VAR1 = regex.and(/\\?/, VARNAME);\nexport var VAR2 = regex.and(/\\$/, VARNAME);\nexport var BLANK_NODE_LABEL = regex.and(/_:/, regex.or(PN_CHARS_U, /\\d/), regex.option(regex.and(regex.many(regex.or(PN_CHARS, /\\./)), PN_CHARS)));\nexport var PNAME_NS = regex.and(regex.option(PN_PREFIX), /:/);\nexport var PNAME_LN = regex.and(PNAME_NS, PN_LOCAL);\n","// @ts-ignore: import types for declarations\nimport { createToken } from 'chevrotain';\nimport { STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, PNAME_LN, IRIREF, LANGTAG, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, STRING_LITERAL1, STRING_LITERAL2, NIL, ANON, PNAME_NS, BLANK_NODE_LABEL, VAR1, VAR2, PERCENT, } from 'helpers/matchers';\nvar STRING_LITERAL_LONG1_TOKEN = createToken({\n    name: 'STRING_LITERAL_LONG1',\n    pattern: STRING_LITERAL_LONG1,\n});\nvar STRING_LITERAL_LONG2_TOKEN = createToken({\n    name: 'STRING_LITERAL_LONG2',\n    pattern: STRING_LITERAL_LONG2,\n});\nvar PNAME_LN_TOKEN = createToken({\n    name: 'PNAME_LN',\n    pattern: PNAME_LN,\n});\nexport var terminals = {\n    IRIREF: createToken({\n        name: 'IRIREF',\n        pattern: IRIREF,\n        label: '<http://example.com>',\n    }),\n    LANGTAG: createToken({\n        name: 'LANGTAG',\n        pattern: LANGTAG,\n    }),\n    INTEGER: createToken({\n        name: 'INTEGER',\n        pattern: INTEGER,\n    }),\n    DECIMAL: createToken({\n        name: 'DECIMAL',\n        pattern: DECIMAL,\n    }),\n    DOUBLE: createToken({\n        name: 'DOUBLE',\n        pattern: DOUBLE,\n    }),\n    INTEGER_POSITIVE: createToken({\n        name: 'INTEGER_POSITIVE',\n        pattern: INTEGER_POSITIVE,\n    }),\n    DECIMAL_POSITIVE: createToken({\n        name: 'DECIMAL_POSITIVE',\n        pattern: DECIMAL_POSITIVE,\n    }),\n    DOUBLE_POSITIVE: createToken({\n        name: 'DOUBLE_POSITIVE',\n        pattern: DOUBLE_POSITIVE,\n    }),\n    INTEGER_NEGATIVE: createToken({\n        name: 'INTEGER_NEGATIVE',\n        pattern: INTEGER_NEGATIVE,\n    }),\n    DECIMAL_NEGATIVE: createToken({\n        name: 'DECIMAL_NEGATIVE',\n        pattern: DECIMAL_NEGATIVE,\n    }),\n    DOUBLE_NEGATIVE: createToken({\n        name: 'DOUBLE_NEGATIVE',\n        pattern: DOUBLE_NEGATIVE,\n    }),\n    STRING_LITERAL_LONG1: STRING_LITERAL_LONG1_TOKEN,\n    STRING_LITERAL_LONG2: STRING_LITERAL_LONG2_TOKEN,\n    STRING_LITERAL1: createToken({\n        name: 'STRING_LITERAL1',\n        pattern: STRING_LITERAL1,\n        longer_alt: STRING_LITERAL_LONG1_TOKEN,\n    }),\n    STRING_LITERAL2: createToken({\n        name: 'STRING_LITERAL2',\n        pattern: STRING_LITERAL2,\n        longer_alt: STRING_LITERAL_LONG2_TOKEN,\n    }),\n    NIL: createToken({\n        name: 'NIL',\n        pattern: NIL,\n        label: '()',\n    }),\n    ANON: createToken({\n        name: 'ANON',\n        pattern: ANON,\n        label: '[]',\n    }),\n    PNAME_LN: PNAME_LN_TOKEN,\n    PNAME_NS: createToken({\n        name: 'PNAME_NS',\n        pattern: PNAME_NS,\n        longer_alt: PNAME_LN_TOKEN,\n    }),\n    BLANK_NODE_LABEL: createToken({\n        name: 'BLANK_NODE_LABEL',\n        pattern: BLANK_NODE_LABEL,\n    }),\n    VAR1: createToken({\n        name: 'VAR1',\n        pattern: VAR1,\n        label: '?foo',\n    }),\n    VAR2: createToken({\n        name: 'VAR2',\n        pattern: VAR2,\n        label: '?bar',\n    }),\n    PERCENT: createToken({\n        name: 'PERCENT',\n        pattern: PERCENT,\n    }),\n};\n","import { IToken, CstNode, TokenType, } from 'chevrotain';\nexport var getAsTypedTuple = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return args;\n};\n// exported for convenience\nexport { IToken, CstNode, TokenType };\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a = require('../turtle/tokens'), turtleTokenTypes = _a.turtleTokenTypes, turtleTokenMap = _a.turtleTokenMap;\nvar sparqlTokenMap = require('../sparql/tokens').sparqlTokenMap;\nimport { createToken, Lexer } from 'chevrotain';\nimport memoize from 'memoize-one';\nimport { getAsTypedTuple } from 'helpers/types';\nimport isDeepEqual from 'lodash.isequal';\nvar shaclIriNamespace = 'http://www.w3.org/ns/shacl#';\nvar xsdIriNamespace = 'http://www.w3.org/2001/XMLSchema#';\n// Token categories, useful for making the parser rules simpler.\nexport var categoryTokenMap = {\n    ManyIriTakingPredicate: createToken({\n        name: 'ManyIriTakingPredicate',\n        pattern: Lexer.NA,\n    }),\n    SingleIriTakingPredicate: createToken({\n        name: 'SingleIriTakingPredicate',\n        pattern: Lexer.NA,\n    }),\n    NodeKindIRI: createToken({\n        name: 'NodeKindIRI',\n        pattern: Lexer.NA,\n    }),\n    IntTakingPredicate: createToken({\n        name: 'IntTakingPredicate',\n        pattern: Lexer.NA,\n    }),\n    StringLiteralQuoteTakingPredicate: createToken({\n        name: 'StringLiteralQuoteTakingPredicate',\n        pattern: Lexer.NA,\n    }),\n    LangStringTakingPredicate: createToken({\n        name: 'LangStringTakingPredicate',\n        pattern: Lexer.NA,\n    }),\n    BooleanTakingPredicate: createToken({\n        name: 'BooleanTakingPredicate',\n        pattern: Lexer.NA,\n    }),\n    ShapeExpectingPredicate: createToken({\n        name: 'ShapeExpectingPredicate',\n        pattern: Lexer.NA,\n    }),\n    AnyLiteralTakingPredicate: createToken({\n        name: 'AnyLiteralTakingPredicate',\n        pattern: Lexer.NA,\n    }),\n};\nexport var categoryTokens = Object.keys(categoryTokenMap).map(function (key) { return categoryTokenMap[key]; });\nvar localNamesByCategory = {\n    ManyIriTakingPredicate: getAsTypedTuple('equals', 'disjoint', 'lessThan', 'lessThanOrEquals', 'targetClass', 'targetSubjectsOf', 'targetObjectsOf'),\n    SingleIriTakingPredicate: getAsTypedTuple('class', 'datatype', 'severity'),\n    NodeKindIRI: getAsTypedTuple('IRI', 'BlankNode', 'Literal', 'BlankNodeOrIRI', 'BlankNodeOrLiteral', 'IRIOrLiteral'),\n    IntTakingPredicate: getAsTypedTuple('minCount', 'maxCount', 'minLength', 'maxLength', 'qualifiedMinCount', 'qualifiedMaxCount'),\n    StringLiteralQuoteTakingPredicate: getAsTypedTuple('pattern', 'flags', 'prefix', 'namespace'),\n    LangStringTakingPredicate: getAsTypedTuple('message', 'labelTemplate'),\n    BooleanTakingPredicate: getAsTypedTuple('uniqueLang', 'qualifiedValueShapesDisjoint', 'closed', 'deactivated', 'optional'),\n    ShapeExpectingPredicate: getAsTypedTuple('not', 'node', 'property', 'qualifiedValueShape', 'sparql', 'declare', 'prefixes', 'parameter', 'nodeValidator', 'propertyValidator', 'validator'),\n    AnyLiteralTakingPredicate: getAsTypedTuple('minExclusive', 'minInclusive', 'maxExclusive', 'maxInclusive'),\n    other: getAsTypedTuple('Shape', 'NodeShape', 'PropertyShape', 'targetNode', 'message', 'path', 'alternativePath', 'inversePath', 'zeroOrMorePath', 'oneOrMorePath', 'zeroOrOnePath', 'nodeKind', 'languageIn', 'and', 'or', 'xone', 'ignoredProperties', 'hasValue', 'in', 'select', 'ask'),\n};\nvar xsdLocalNames = getAsTypedTuple('boolean', 'integer', 'string', 'date', 'dateTime', 'anyURI');\n// Map of local names back to their categories, for easier lookup:\nvar localNameToCategoryMap = Object.keys(localNamesByCategory).reduce(function (nameToCategoryMap, category) {\n    var categoryLocalNames = localNamesByCategory[category];\n    categoryLocalNames.forEach(function (localName) { return (nameToCategoryMap[localName] = category); });\n    return nameToCategoryMap;\n}, {});\nvar localNames = Object.keys(localNameToCategoryMap);\n// We can pre-compute all tokens for the `xsd` namespace except for those that\n// include prefixes (since we don't know a priori what the prefix will be).\n// For each XSD local name, we will create a \"category\" token that will\n// ultimately be used as the single token encompassing either the full\n// (un-prefixed) IRI or the prefixed name (i.e., `xsd:string). At this point,\n// we create only the category token and the full (un-prefixed) IRI token; the\n// prefixed token is created later (via `getShaclTokenTypes`) once we actually\n// know what the `xsd` prefix is.\nvar xsdUnprefixedTokenMap = xsdLocalNames.reduce(function (tokenMap, localName) {\n    var _a;\n    var tokenName = \"SHACL_xsd_\" + localName; // category token name\n    var iriTokenName = tokenName + \"_IRI\"; // IRI token name\n    // Category token that will ultimately select either an XSD IRI or an XSD PN_LOCAL:\n    var iriOrPrefixCategoryToken = createToken({\n        name: tokenName,\n        pattern: Lexer.NA,\n    });\n    return __assign({}, tokenMap, (_a = {}, _a[tokenName] = iriOrPrefixCategoryToken, _a[iriTokenName] = createToken({\n        name: iriTokenName,\n        pattern: \"<\" + xsdIriNamespace + localName,\n        categories: [iriOrPrefixCategoryToken, turtleTokenMap.IRIREF],\n    }), _a));\n}, {});\n// We can also pre-compute all SHACL tokens except for those that include\n// prefixes (again, since we don't know a priori what the SHACL prefix will be).\n// This helps keep our parser quick. We do it in the same way that we did for\n// XSD tokens, above -- we create a \"category\" token for each SHACL local name\n// that will be used to match either the full (un-prefixed) IRI or the prefixed\n// name (once we know what the SHACL prefix is).\nvar shaclUnprefixedTokenMap = localNames.reduce(function (tokenMap, localName) {\n    var _a;\n    var category = localNameToCategoryMap[localName];\n    var categoryToken = categoryTokenMap[category];\n    var tokenName = \"SHACL_\" + localName;\n    var iriTokenName = tokenName + \"_IRI\";\n    // Category token that will select either a SHACL IRI or a SHACL PN_LOCAL:\n    var iriOrPrefixCategoryToken = createToken({\n        name: tokenName,\n        pattern: Lexer.NA,\n        categories: categoryToken ? [categoryToken] : [],\n    });\n    return __assign({}, tokenMap, (_a = {}, _a[tokenName] = iriOrPrefixCategoryToken, _a[iriTokenName] = createToken({\n        name: iriTokenName,\n        pattern: \"<\" + shaclIriNamespace + localName + \">\",\n        categories: [iriOrPrefixCategoryToken, turtleTokenMap.IRIREF],\n    }), _a));\n}, xsdUnprefixedTokenMap);\nvar makePrefixer = function (prefix) { return function (localName) {\n    return prefix + \":\" + localName;\n}; };\n// Retrieves the complete map of all SHACL/XSD tokens, given the SHACL and XSD\n// prefixes. The map contains, for every local name, a token matching the full\n// IRI, a token matching the prefixed local name, and a \"category\" token that\n// matches both. The category token is useful for simplifying parser rules (not\n// having to match every SHACL token as both a full IRI and a prefixed local\n// name.)\n// This function is called by the SHACL parser. It is memoized because the\n// arguments are small and unlikely to change often, and the parser needs to be\n// fast, so we should avoid re-computing.\nexport var getShaclTokenMap = memoize(function (prefixes) {\n    var prefixWithShacl = makePrefixer(prefixes.shacl);\n    var prefixWithXsd = makePrefixer(prefixes.xsd);\n    // Add the prefixed local names to the SHACL token map now that we know the\n    // prefixes.\n    var shaclTokenMap = localNames.reduce(function (tokenMap, localName) {\n        var _a;\n        var tokenName = \"SHACL_\" + localName;\n        var prefixedTokenName = tokenName + \"_prefixed\";\n        return __assign({}, tokenMap, (_a = {}, _a[prefixedTokenName] = createToken({\n            name: prefixedTokenName,\n            pattern: prefixWithShacl(localName),\n            categories: [tokenMap[tokenName], turtleTokenMap.PNAME_LN],\n        }), _a));\n    }, shaclUnprefixedTokenMap);\n    // Add the prefixed local names to the XSD token map now that we know the\n    // prefixes.\n    return xsdLocalNames.reduce(function (tokenMap, localName) {\n        var _a;\n        var tokenName = \"SHACL_xsd_\" + localName;\n        var prefixedTokenName = tokenName + \"_prefixed\";\n        return __assign({}, tokenMap, (_a = {}, _a[prefixedTokenName] = createToken({\n            name: prefixedTokenName,\n            pattern: \"\" + prefixWithXsd(localName),\n            categories: [tokenMap[tokenName], turtleTokenMap.PNAME_LN],\n        }), _a));\n    }, shaclTokenMap);\n}, isDeepEqual);\n// Get the index of PNAME_NS and IRIREF so that we can re-use existing Turtle\n// tokens but ensure that our special SHACL/XSD tokens are inserted at the\n// right place (since order of tokens matters for chevrotain).\nvar pnameIndex = turtleTokenTypes.indexOf(sparqlTokenMap.PNAME_NS);\nvar iriIndex = turtleTokenTypes.indexOf(turtleTokenMap.IRIREF);\n// tokenMap keys will need to be sorted in reverse order so that tokens with\n// partial overlap are in the right order in the TokenType array.\nvar reverseSort = function (a, b) {\n    // @ts-ignore: unused variable\n    var _a = a.split('_'), aIgnored = _a[0], aName = _a[1], aRemainder = _a.slice(2);\n    // @ts-ignore: unused variable\n    var _b = b.split('_'), bIgnored = _b[0], bName = _b[1], bRemainder = _b.slice(2);\n    // Grab the local name and lowercase it:\n    var aSortString = (aName === 'xsd' ? aRemainder[0] : aName).toLowerCase();\n    var bSortString = (bName === 'xsd' ? bRemainder[0] : bName).toLowerCase();\n    if (aSortString === bSortString) {\n        // If local names are identical, prefer the one without a suffix to those with suffixes.\n        var aSuffix = aName === 'xsd' ? aRemainder[1] : aRemainder[0];\n        var bSuffix = bName === 'xsd' ? bRemainder[1] : bRemainder[0];\n        if (aSuffix && bSuffix) {\n            return 0; // when both local names have suffixes, treat as lexicographically the same for sorting\n        }\n        else {\n            return aSuffix ? 1 : -1;\n        }\n    }\n    else {\n        return aSortString < bSortString ? 1 : bSortString < aSortString ? -1 : 0;\n    }\n};\n// Given SHACL and XSD prefixes, this method returns an array of Turtle +\n// SHACL/XSD tokens, including tokens for prefixed local names, with the\n// SHACL/XSD tokens inserted at the proper positions so that they are matched\n// before the more generic Turtle tokens.\nexport var getShaclTokenTypes = memoize(function (prefixes) {\n    var tokenMap = getShaclTokenMap(prefixes);\n    var _a = Object.keys(tokenMap)\n        .sort(reverseSort)\n        .reduce(function (accumulator, key) {\n        if (key.endsWith('_IRI')) {\n            if (iriIndex < pnameIndex) {\n                accumulator.iriTokens.push(tokenMap[key.slice(0, -4)]);\n            }\n            accumulator.iriTokens.push(tokenMap[key]);\n        }\n        else if (key.endsWith('_prefixed')) {\n            if (pnameIndex < iriIndex) {\n                accumulator.pnameTokens.push(tokenMap[key.slice(0, -9)]);\n            }\n            accumulator.pnameTokens.push(tokenMap[key]);\n        }\n        return accumulator;\n    }, { pnameTokens: [], iriTokens: [] }), pnameTokens = _a.pnameTokens, iriTokens = _a.iriTokens;\n    if (pnameIndex < iriIndex) {\n        return turtleTokenTypes.slice(0, pnameIndex).concat(categoryTokens, pnameTokens, turtleTokenTypes.slice(pnameIndex, iriIndex), iriTokens, turtleTokenTypes.slice(iriIndex));\n    }\n    else {\n        return turtleTokenTypes.slice(0, iriIndex).concat(categoryTokens, iriTokens, turtleTokenTypes.slice(iriIndex, pnameIndex), pnameTokens, turtleTokenTypes.slice(pnameIndex));\n    }\n}, isDeepEqual);\n","// @ts-ignore: import types for declarations\nimport { createToken, Lexer } from 'chevrotain';\nimport { terminals } from './terminals';\nimport { keywords } from './keywords';\nexport var sparqlTokenMap = {\n    IRIREF: terminals.IRIREF,\n    LANGTAG: terminals.LANGTAG,\n    INTEGER: terminals.INTEGER,\n    DECIMAL: terminals.DECIMAL,\n    DOUBLE: terminals.DOUBLE,\n    INTEGER_POSITIVE: terminals.INTEGER_POSITIVE,\n    DECIMAL_POSITIVE: terminals.DECIMAL_POSITIVE,\n    DOUBLE_POSITIVE: terminals.DOUBLE_POSITIVE,\n    INTEGER_NEGATIVE: terminals.INTEGER_NEGATIVE,\n    DECIMAL_NEGATIVE: terminals.DECIMAL_NEGATIVE,\n    DOUBLE_NEGATIVE: terminals.DOUBLE_NEGATIVE,\n    STRING_LITERAL1: terminals.STRING_LITERAL1,\n    STRING_LITERAL2: terminals.STRING_LITERAL2,\n    STRING_LITERAL_LONG1: terminals.STRING_LITERAL_LONG1,\n    STRING_LITERAL_LONG2: terminals.STRING_LITERAL_LONG2,\n    NIL: terminals.NIL,\n    ANON: terminals.ANON,\n    PNAME_NS: terminals.PNAME_NS,\n    PNAME_LN: terminals.PNAME_LN,\n    BLANK_NODE_LABEL: terminals.BLANK_NODE_LABEL,\n    VAR1: terminals.VAR1,\n    VAR2: terminals.VAR2,\n    PERCENT: terminals.PERCENT,\n    Comment: createToken({\n        name: 'Comment',\n        pattern: /#[^\\n]*/,\n        group: 'comments',\n    }),\n    LCurly: createToken({ name: 'LCurly', pattern: '{' }),\n    RCurly: createToken({ name: 'RCurly', pattern: '}' }),\n    LParen: createToken({ name: 'LParen', pattern: '(' }),\n    RParen: createToken({ name: 'RParen', pattern: ')' }),\n    WhiteSpace: createToken({\n        name: 'WhiteSpace',\n        pattern: /\\s+/,\n        group: Lexer.SKIPPED,\n        line_breaks: true,\n    }),\n    Star: createToken({\n        name: 'Star',\n        pattern: '*',\n    }),\n    Unknown: createToken({\n        name: 'Unknown',\n        // Unknown comes _before_ `A` in the token ordering because we need it to\n        // match custom/XPath functions like `atan`, etc. But we also need it to\n        // _not_ capture `A` tokens. This pattern catches anything that is either\n        // (1) 'a' followed by non-whitespace (up to the next non-word character) or\n        // (2) not 'a' or whitespace (up to the next non-word character).\n        pattern: /(?:a\\S|[^a\\s])\\w*/i,\n    }),\n    Period: createToken({\n        name: 'Period',\n        pattern: '.',\n    }),\n    QuestionMark: createToken({\n        name: 'QuestionMark',\n        pattern: '?',\n    }),\n    Plus: createToken({\n        name: 'Plus',\n        pattern: '+',\n    }),\n    Minus: createToken({\n        name: 'Minus',\n        pattern: '-',\n    }),\n    LBracket: createToken({\n        name: 'LBracket',\n        pattern: '[',\n    }),\n    RBracket: createToken({\n        name: 'RBracket',\n        pattern: ']',\n    }),\n    Semicolon: createToken({\n        name: 'Semicolon',\n        pattern: ';',\n    }),\n    Comma: createToken({\n        name: 'Comma',\n        pattern: ',',\n    }),\n    Pipe: createToken({\n        name: 'Pipe',\n        pattern: '|',\n    }),\n    ForwardSlash: createToken({\n        name: 'ForwardSlash',\n        pattern: '/',\n    }),\n    Caret: createToken({\n        name: 'Caret',\n        pattern: '^',\n    }),\n    DoubleCaret: createToken({\n        name: 'DoubleCaret',\n        pattern: '^^',\n    }),\n    Bang: createToken({\n        name: 'Bang',\n        pattern: '!',\n    }),\n    LogicalOr: createToken({\n        name: 'LogicalOr',\n        pattern: '||',\n    }),\n    LogicalAnd: createToken({\n        name: 'LogicalAnd',\n        pattern: '&&',\n    }),\n    Equals: createToken({\n        name: 'Equals',\n        pattern: '=',\n    }),\n    NotEquals: createToken({\n        name: 'NotEquals',\n        pattern: '!=',\n    }),\n    LessThan: createToken({\n        name: 'LessThan',\n        pattern: '<',\n    }),\n    GreaterThan: createToken({\n        name: 'GreaterThan',\n        pattern: '>',\n    }),\n    LessThanEquals: createToken({\n        name: 'LessThanEquals',\n        pattern: '<=',\n    }),\n    GreaterThanEquals: createToken({\n        name: 'GreaterThanEquals',\n        pattern: '>=',\n    }),\n    LEmbed: createToken({\n        name: 'LEmbed',\n        pattern: '<<',\n    }),\n    REmbed: createToken({\n        name: 'REmbed',\n        pattern: '>>',\n    }),\n    SELECT: keywords.SELECT,\n    CONSTRUCT: keywords.CONSTRUCT,\n    DISTINCT: keywords.DISTINCT,\n    START: keywords.START,\n    END: keywords.END,\n    VIA: keywords.VIA,\n    CYCLIC: keywords.CYCLIC,\n    PATHS_SHORTEST: keywords.PATHS_SHORTEST,\n    PATHS_ALL: keywords.PATHS_ALL,\n    PATHS: keywords.PATHS,\n    AS: keywords.AS,\n    WHERE: keywords.WHERE,\n    A: keywords.A,\n    GROUP_BY: keywords.GROUP_BY,\n    ORDER_BY: keywords.ORDER_BY,\n    BY: keywords.BY,\n    BASE: keywords.BASE,\n    PREFIX: keywords.PREFIX,\n    DESCRIBE: keywords.DESCRIBE,\n    ASK: keywords.ASK,\n    FROM: keywords.FROM,\n    REDUCED: keywords.REDUCED,\n    NAMED: keywords.NAMED,\n    HAVING: keywords.HAVING,\n    ASC: keywords.ASC,\n    DESC: keywords.DESC,\n    OFFSET: keywords.OFFSET,\n    LIMIT: keywords.LIMIT,\n    VALUES: keywords.VALUES,\n    LOAD: keywords.LOAD,\n    SILENT: keywords.SILENT,\n    INTO: keywords.INTO,\n    CLEAR: keywords.CLEAR,\n    DROP: keywords.DROP,\n    CREATE: keywords.CREATE,\n    ADD: keywords.ADD,\n    TO: keywords.TO,\n    MOVE: keywords.MOVE,\n    COPY: keywords.COPY,\n    INSERT_DATA: keywords.INSERT_DATA,\n    DELETE_DATA: keywords.DELETE_DATA,\n    DELETE_WHERE: keywords.DELETE_WHERE,\n    WITH: keywords.WITH,\n    DELETE: keywords.DELETE,\n    INSERT: keywords.INSERT,\n    USING: keywords.USING,\n    DEFAULT: keywords.DEFAULT,\n    GRAPH: keywords.GRAPH,\n    ALL: keywords.ALL,\n    OPTIONAL: keywords.OPTIONAL,\n    SERVICE: keywords.SERVICE,\n    BIND: keywords.BIND,\n    UNNEST: keywords.UNNEST,\n    UNDEF: keywords.UNDEF,\n    MINUS: keywords.MINUS,\n    UNION: keywords.UNION,\n    FILTER: keywords.FILTER,\n    STR: keywords.STR,\n    LANG: keywords.LANG,\n    LANGMATCHES: keywords.LANGMATCHES,\n    DATATYPE: keywords.DATATYPE,\n    BOUND: keywords.BOUND,\n    IRI: keywords.IRI,\n    URI: keywords.URI,\n    BNODE: keywords.BNODE,\n    RAND: keywords.RAND,\n    ABS: keywords.ABS,\n    CEIL: keywords.CEIL,\n    FLOOR: keywords.FLOOR,\n    ROUND: keywords.ROUND,\n    CONCAT: keywords.CONCAT,\n    STRLEN: keywords.STRLEN,\n    UCASE: keywords.UCASE,\n    LCASE: keywords.LCASE,\n    ENCODE_FOR_URI: keywords.ENCODE_FOR_URI,\n    CONTAINS: keywords.CONTAINS,\n    STRSTARTS: keywords.STRSTARTS,\n    STRENDS: keywords.STRENDS,\n    STRBEFORE: keywords.STRBEFORE,\n    STRAFTER: keywords.STRAFTER,\n    YEAR: keywords.YEAR,\n    MONTH: keywords.MONTH,\n    DAY: keywords.DAY,\n    HOURS: keywords.HOURS,\n    MINUTES: keywords.MINUTES,\n    SECONDS: keywords.SECONDS,\n    TIMEZONE: keywords.TIMEZONE,\n    TZ: keywords.TZ,\n    NOW: keywords.NOW,\n    UUID: keywords.UUID,\n    STRUUID: keywords.STRUUID,\n    MD5: keywords.MD5,\n    SHA1: keywords.SHA1,\n    SHA256: keywords.SHA256,\n    SHA384: keywords.SHA384,\n    SHA512: keywords.SHA512,\n    COALESCE: keywords.COALESCE,\n    IF: keywords.IF,\n    STRLANG: keywords.STRLANG,\n    STRDT: keywords.STRDT,\n    sameTerm: keywords.sameTerm,\n    isIRI: keywords.isIRI,\n    isURI: keywords.isURI,\n    isBLANK: keywords.isBLANK,\n    isLITERAL: keywords.isLITERAL,\n    isNUMERIC: keywords.isNUMERIC,\n    REGEX: keywords.REGEX,\n    SUBSTR: keywords.SUBSTR,\n    REPLACE: keywords.REPLACE,\n    EXISTS: keywords.EXISTS,\n    NOT_EXISTS: keywords.NOT_EXISTS,\n    COUNT: keywords.COUNT,\n    SUM: keywords.SUM,\n    MIN: keywords.MIN,\n    AVG: keywords.AVG,\n    SAMPLE: keywords.SAMPLE,\n    GROUP_CONCAT: keywords.GROUP_CONCAT,\n    SEPARATOR: keywords.SEPARATOR,\n    TRUE: keywords.TRUE,\n    FALSE: keywords.FALSE,\n    IN: keywords.IN,\n    NOT_IN: keywords.NOT_IN,\n    MAX_LENGTH: keywords.MAX_LENGTH,\n    MAX: keywords.MAX,\n};\nexport var baseTokens = [\n    sparqlTokenMap.NIL,\n    sparqlTokenMap.ANON,\n    sparqlTokenMap.LCurly,\n    sparqlTokenMap.RCurly,\n    sparqlTokenMap.LParen,\n    sparqlTokenMap.RParen,\n    sparqlTokenMap.WhiteSpace,\n    sparqlTokenMap.IRIREF,\n    sparqlTokenMap.LANGTAG,\n    sparqlTokenMap.DOUBLE,\n    sparqlTokenMap.DECIMAL,\n    sparqlTokenMap.INTEGER,\n    sparqlTokenMap.DOUBLE_POSITIVE,\n    sparqlTokenMap.DECIMAL_POSITIVE,\n    sparqlTokenMap.INTEGER_POSITIVE,\n    sparqlTokenMap.DOUBLE_NEGATIVE,\n    sparqlTokenMap.DECIMAL_NEGATIVE,\n    sparqlTokenMap.INTEGER_NEGATIVE,\n    sparqlTokenMap.STRING_LITERAL1,\n    sparqlTokenMap.STRING_LITERAL2,\n    sparqlTokenMap.STRING_LITERAL_LONG1,\n    sparqlTokenMap.STRING_LITERAL_LONG2,\n    sparqlTokenMap.PNAME_NS,\n    sparqlTokenMap.PNAME_LN,\n    sparqlTokenMap.BLANK_NODE_LABEL,\n    sparqlTokenMap.VAR1,\n    sparqlTokenMap.VAR2,\n    sparqlTokenMap.Comment,\n    sparqlTokenMap.SELECT,\n    sparqlTokenMap.CONSTRUCT,\n    sparqlTokenMap.DISTINCT,\n    sparqlTokenMap.Star,\n    sparqlTokenMap.WHERE,\n    sparqlTokenMap.GROUP_BY,\n    sparqlTokenMap.ORDER_BY,\n    sparqlTokenMap.BY,\n    sparqlTokenMap.Period,\n    sparqlTokenMap.QuestionMark,\n    sparqlTokenMap.Plus,\n    sparqlTokenMap.Minus,\n    sparqlTokenMap.LBracket,\n    sparqlTokenMap.RBracket,\n    sparqlTokenMap.PERCENT,\n    sparqlTokenMap.BASE,\n    sparqlTokenMap.PREFIX,\n    sparqlTokenMap.DESCRIBE,\n    sparqlTokenMap.ASK,\n    sparqlTokenMap.FROM,\n    sparqlTokenMap.REDUCED,\n    sparqlTokenMap.NAMED,\n    sparqlTokenMap.HAVING,\n    sparqlTokenMap.ASC,\n    sparqlTokenMap.DESC,\n    sparqlTokenMap.OFFSET,\n    sparqlTokenMap.LIMIT,\n    sparqlTokenMap.VALUES,\n    sparqlTokenMap.LOAD,\n    sparqlTokenMap.SILENT,\n    sparqlTokenMap.INTO,\n    sparqlTokenMap.AS,\n    sparqlTokenMap.CLEAR,\n    sparqlTokenMap.DROP,\n    sparqlTokenMap.CREATE,\n    sparqlTokenMap.ADD,\n    sparqlTokenMap.TO,\n    sparqlTokenMap.MOVE,\n    sparqlTokenMap.COPY,\n    sparqlTokenMap.INSERT_DATA,\n    sparqlTokenMap.DELETE_DATA,\n    sparqlTokenMap.DELETE_WHERE,\n    sparqlTokenMap.WITH,\n    sparqlTokenMap.DELETE,\n    sparqlTokenMap.INSERT,\n    sparqlTokenMap.USING,\n    sparqlTokenMap.DEFAULT,\n    sparqlTokenMap.GRAPH,\n    sparqlTokenMap.ALL,\n    sparqlTokenMap.OPTIONAL,\n    sparqlTokenMap.SERVICE,\n    sparqlTokenMap.BIND,\n    sparqlTokenMap.UNDEF,\n    sparqlTokenMap.MINUS,\n    sparqlTokenMap.UNION,\n    sparqlTokenMap.FILTER,\n    sparqlTokenMap.LANGMATCHES,\n    sparqlTokenMap.LANG,\n    sparqlTokenMap.DATATYPE,\n    sparqlTokenMap.BOUND,\n    sparqlTokenMap.IRI,\n    sparqlTokenMap.URI,\n    sparqlTokenMap.BNODE,\n    sparqlTokenMap.RAND,\n    sparqlTokenMap.ABS,\n    sparqlTokenMap.CEIL,\n    sparqlTokenMap.FLOOR,\n    sparqlTokenMap.ROUND,\n    sparqlTokenMap.CONCAT,\n    sparqlTokenMap.STRLEN,\n    sparqlTokenMap.UCASE,\n    sparqlTokenMap.LCASE,\n    sparqlTokenMap.ENCODE_FOR_URI,\n    sparqlTokenMap.CONTAINS,\n    sparqlTokenMap.STRSTARTS,\n    sparqlTokenMap.STRENDS,\n    sparqlTokenMap.STRBEFORE,\n    sparqlTokenMap.STRAFTER,\n    sparqlTokenMap.YEAR,\n    sparqlTokenMap.MONTH,\n    sparqlTokenMap.DAY,\n    sparqlTokenMap.HOURS,\n    sparqlTokenMap.MINUTES,\n    sparqlTokenMap.SECONDS,\n    sparqlTokenMap.TIMEZONE,\n    sparqlTokenMap.TZ,\n    sparqlTokenMap.NOW,\n    sparqlTokenMap.UUID,\n    sparqlTokenMap.STRUUID,\n    sparqlTokenMap.MD5,\n    sparqlTokenMap.SHA1,\n    sparqlTokenMap.SHA256,\n    sparqlTokenMap.SHA384,\n    sparqlTokenMap.SHA512,\n    sparqlTokenMap.COALESCE,\n    sparqlTokenMap.IF,\n    sparqlTokenMap.STRLANG,\n    sparqlTokenMap.STRDT,\n    sparqlTokenMap.STR,\n    sparqlTokenMap.sameTerm,\n    sparqlTokenMap.isIRI,\n    sparqlTokenMap.isURI,\n    sparqlTokenMap.isBLANK,\n    sparqlTokenMap.isLITERAL,\n    sparqlTokenMap.isNUMERIC,\n    sparqlTokenMap.REGEX,\n    sparqlTokenMap.SUBSTR,\n    sparqlTokenMap.REPLACE,\n    sparqlTokenMap.EXISTS,\n    sparqlTokenMap.NOT_EXISTS,\n    sparqlTokenMap.COUNT,\n    sparqlTokenMap.SUM,\n    sparqlTokenMap.MIN,\n    sparqlTokenMap.MAX_LENGTH,\n    sparqlTokenMap.MAX,\n    sparqlTokenMap.AVG,\n    sparqlTokenMap.SAMPLE,\n    sparqlTokenMap.GROUP_CONCAT,\n    sparqlTokenMap.SEPARATOR,\n    sparqlTokenMap.TRUE,\n    sparqlTokenMap.FALSE,\n    sparqlTokenMap.Semicolon,\n    sparqlTokenMap.Comma,\n    sparqlTokenMap.ForwardSlash,\n    sparqlTokenMap.DoubleCaret,\n    sparqlTokenMap.Caret,\n    sparqlTokenMap.LogicalOr,\n    sparqlTokenMap.Pipe,\n    sparqlTokenMap.LogicalAnd,\n    sparqlTokenMap.NotEquals,\n    sparqlTokenMap.Bang,\n    sparqlTokenMap.Equals,\n    sparqlTokenMap.LessThanEquals,\n    sparqlTokenMap.GreaterThanEquals,\n    sparqlTokenMap.LEmbed,\n    sparqlTokenMap.REmbed,\n    sparqlTokenMap.LessThan,\n    sparqlTokenMap.GreaterThan,\n    sparqlTokenMap.IN,\n    sparqlTokenMap.NOT_IN,\n    sparqlTokenMap.Unknown,\n    sparqlTokenMap.A,\n];\nexport var pathsTokens = [\n    sparqlTokenMap.START,\n    sparqlTokenMap.END,\n    sparqlTokenMap.VIA,\n    sparqlTokenMap.CYCLIC,\n    sparqlTokenMap.PATHS_SHORTEST,\n    sparqlTokenMap.PATHS_ALL,\n    sparqlTokenMap.PATHS,\n];\nexport var nonStandardTokens = pathsTokens.concat([sparqlTokenMap.UNNEST]);\nvar indexOfSelect = baseTokens.indexOf(sparqlTokenMap.SELECT);\nexport var stardogSparqlTokens = baseTokens.slice(0, indexOfSelect).concat(nonStandardTokens, baseTokens.slice(indexOfSelect));\nexport var sparqlTokenTypes = baseTokens.concat(nonStandardTokens);\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport escapeStringRegexp from 'escape-string-regexp';\nimport { isCstNode } from 'helpers/cst';\n// Given a SHACL prefix, returns a RegExp that can be used for grabbing the\n// local name (e.g., the 'NodeShape' in 'sh:NodeShape') from either a full\n// SHACL IRI or a prefixed local name.\nvar getShaclLocalNameMatcher = function (shaclPrefix) {\n    return new RegExp(\"(?:shacl#|\" + escapeStringRegexp(shaclPrefix) + \":)(\\\\S+?)>?$\");\n};\n// Traverses the tree of descendants for a given CstNode until a token is\n// found. Returns the \"start\" token for the CstNode (i.e., the earliest token\n// encompassed by the CstNode). This is useful for diagnostics.\nvar getUnderlyingStartToken = function (ctx) {\n    var currentNode = ctx;\n    while (currentNode.children) {\n        var currentNodeKey = Object.keys(currentNode.children)[0];\n        currentNode = currentNode.children[currentNodeKey][0];\n    }\n    return currentNode;\n};\n// Grabs the local name (e.g., the 'NodeShape' in 'sh:NodeShape') from either\n// a full SHACL IRI or a prefixed local name, if it is available.\nvar getLocalName = function (iri, matcher) {\n    var result = matcher.exec(iri);\n    if (result) {\n        return result[1];\n    }\n};\n// Given an initial (possibly partially complete) `shape` object and an array\n// of CstElements matching the `shaclRulePredicateObjectList` grammar rule,\n// transforms the `shape` into a complete `ShaclShape` with associated SHACL\n// types and predicates.\n// NOTE: mutates `shape`!\nvar addPredicatesAndTypesToShape = function (shape, shaclRulePredicateObjectListNodes) {\n    shaclRulePredicateObjectListNodes.forEach(function (node) {\n        var child = node.children[Object.keys(node.children)[0]][0];\n        switch (child.name) {\n            case 'shaclVerbShape': {\n                var token = getUnderlyingStartToken(child);\n                var verbTokenInsensitive = token.image.toLowerCase();\n                var isTypeVerb = verbTokenInsensitive === 'a' ||\n                    verbTokenInsensitive === 'rdf:type' ||\n                    verbTokenInsensitive ===\n                        '<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>';\n                if (!isTypeVerb) {\n                    return;\n                }\n                Object.keys(child.children).forEach(function (key) {\n                    if (key !== 'shaclShapeType') {\n                        return;\n                    }\n                    var shapeTypeNode = child.children[key][0];\n                    if (shapeTypeNode.children.SHACL_NodeShape) {\n                        shape.types.push({\n                            type: 'NodeShape',\n                            token: getUnderlyingStartToken(shapeTypeNode),\n                        });\n                    }\n                    else if (shapeTypeNode.children.SHACL_PropertyShape) {\n                        shape.types.push({\n                            type: 'PropertyShape',\n                            token: getUnderlyingStartToken(shapeTypeNode),\n                        });\n                    }\n                });\n                break;\n            }\n            case 'shaclPredicateIRI': {\n                if (child.children.SingleIriTakingPredicate) {\n                    shape.predicates.push({\n                        type: 'SingleIriTakingPredicate',\n                        token: getUnderlyingStartToken(child.children\n                            .SingleIriTakingPredicate[0]),\n                    });\n                }\n                else if (child.children.ManyIriTakingPredicate) {\n                    shape.predicates.push({\n                        type: 'ManyIriTakingPredicate',\n                        token: getUnderlyingStartToken(child.children\n                            .ManyIriTakingPredicate[0]),\n                    });\n                }\n                break;\n            }\n            case 'shaclNodeKind':\n                shape.predicates.push({\n                    type: 'nodeKind',\n                    token: child.children.SHACL_nodeKind[0],\n                });\n                break;\n            case 'shaclTargetNode':\n                shape.predicates.push({\n                    type: 'targetNode',\n                    token: child.children.SHACL_targetNode[0],\n                });\n                break;\n            case 'shaclPropertyPath':\n                shape.predicates.push({\n                    type: 'path',\n                    token: child.children.SHACL_path[0],\n                });\n                break;\n            case 'shaclLiteralConstraint':\n                shape.predicates.push({\n                    type: 'LiteralConstraint',\n                    token: getUnderlyingStartToken(child),\n                });\n                break;\n            case 'shaclListTakingConstraint':\n                shape.predicates.push({\n                    type: 'ListTakingConstraint',\n                    token: getUnderlyingStartToken(child),\n                });\n                break;\n            case 'shaclShapeExpectingConstraint':\n                shape.predicates.push({\n                    type: 'ShapeExpectingPredicate',\n                    token: child.children.ShapeExpectingPredicate[0],\n                });\n                break;\n            case 'shaclHasValueConstraint':\n                shape.predicates.push({\n                    type: 'hasValue',\n                    token: child.children.SHACL_hasValue[0],\n                });\n                break;\n            default:\n                console.log(\"SHACL predicateObjectList with name \" + child.name + \" not recognized.\");\n        }\n    });\n};\n// Utility method for constructing a `ShaclShape` from CstElements matching the\n// `shaclShape` grammar rule.\nvar getShaclShapeFromBlankNodePropertyList = function (ctx) {\n    var blankNodeNode = ctx.blankNodePropertyList[0];\n    var predicateObjectListNode = blankNodeNode.children.predicateObjectList[0];\n    var optionalPredicateObjectListNode = ctx.predicateObjectList\n        ? ctx.predicateObjectList[0]\n        : null;\n    if (!isCstNode(predicateObjectListNode) &&\n        !isCstNode(optionalPredicateObjectListNode)) {\n        return;\n    }\n    var shaclRulePredicateObjectListNodes = optionalPredicateObjectListNode &&\n        optionalPredicateObjectListNode.children &&\n        optionalPredicateObjectListNode.children.shaclRulePredicateObjectList\n        ? (predicateObjectListNode.children.shaclRulePredicateObjectList ||\n            []).concat(optionalPredicateObjectListNode.children\n            .shaclRulePredicateObjectList) : predicateObjectListNode.children.shaclRulePredicateObjectList;\n    if (!shaclRulePredicateObjectListNodes) {\n        return;\n    }\n    var shape = {\n        subject: {\n            type: 'blankNodePropertyList',\n            token: getUnderlyingStartToken(blankNodeNode),\n        },\n        types: [],\n        predicates: [],\n    };\n    addPredicatesAndTypesToShape(shape, shaclRulePredicateObjectListNodes);\n    return shape;\n};\n// Returns a new SHACL visitor that extends that given BaseVisitor. The SHACL\n// visitor is capable of constructing ShaclShape objects from a given CST and\n// then using those shapes to perform validations that cannot be performed in\n// the initial parse of a SHACL document.\nexport var getShaclVisitor = function (BaseVisitor) {\n    var ShaclVisitor = /** @class */ (function (_super) {\n        __extends(ShaclVisitor, _super);\n        function ShaclVisitor() {\n            var _this = _super.call(this) || this;\n            // `triples` have two alternatives, one with a `subject` and one with a\n            // `blankNodePropertyList`. This method constructs SHACL shapes for each\n            // alternative.\n            _this.triples = function (ctx) {\n                if (ctx.subject) {\n                    var predicateObjectListNode = ctx.predicateObjectList[0];\n                    if (!isCstNode(predicateObjectListNode)) {\n                        return;\n                    }\n                    var shaclRulePredicateObjectListNodes = predicateObjectListNode.children.shaclRulePredicateObjectList;\n                    if (!shaclRulePredicateObjectListNodes) {\n                        return;\n                    }\n                    var shape = {\n                        subject: {\n                            type: Object.keys(ctx.subject[0].children)[0] === 'collection'\n                                ? 'collection'\n                                : 'subject',\n                            token: getUnderlyingStartToken(ctx.subject[0]),\n                        },\n                        types: [],\n                        predicates: [],\n                    };\n                    addPredicatesAndTypesToShape(shape, shaclRulePredicateObjectListNodes);\n                    _this.shapes.push(shape);\n                    _this.visit(ctx.subject);\n                    _this.visit(predicateObjectListNode);\n                }\n                else {\n                    var shape = getShaclShapeFromBlankNodePropertyList(ctx);\n                    if (!shape) {\n                        return;\n                    }\n                    _this.shapes.push(shape);\n                    _this.visit(ctx.blankNodePropertyList);\n                    if (ctx.predicateObjectList) {\n                        _this.visit(ctx.predicateObjectList);\n                    }\n                }\n            };\n            // Some SHACL shapes (e.g., nested PropertyShapes) are not matched\n            // by the `triples` grammar rule; instead, they match `shapeShape`.\n            _this.shaclShape = function (ctx) {\n                if (!ctx.blankNodePropertyList) {\n                    // Not an inline shape we need to traverse, just an identifier.\n                    return;\n                }\n                var shape = getShaclShapeFromBlankNodePropertyList(ctx);\n                if (!shape) {\n                    return;\n                }\n                _this.shapes.push(shape);\n                _this.visit(ctx.blankNodePropertyList);\n            };\n            _this.$resetState = function () {\n                _this.shapes = [];\n            };\n            _this.$validateShapes = function (_a) {\n                var shaclPrefix = _a.shacl;\n                var validationErrors = [];\n                var localNameMatcher = getShaclLocalNameMatcher(shaclPrefix);\n                var bnodeCount = 0;\n                var shapesConsolidatedBySubject = _this.shapes.reduce(function (consolidatedShapes, shape) {\n                    var image = shape.subject.token.image;\n                    var subjectImage = image === '[' ? \"bnode\" + ++bnodeCount : image;\n                    if (!consolidatedShapes[subjectImage]) {\n                        consolidatedShapes[subjectImage] = {\n                            subjects: [shape.subject],\n                            types: shape.types,\n                            predicates: shape.predicates,\n                        };\n                    }\n                    else {\n                        var consolidatedShape = consolidatedShapes[subjectImage];\n                        consolidatedShapes[subjectImage] = {\n                            subjects: consolidatedShape.subjects.concat([shape.subject]),\n                            types: consolidatedShape.types.concat(shape.types),\n                            predicates: consolidatedShape.predicates.concat(shape.predicates),\n                        };\n                    }\n                    return consolidatedShapes;\n                }, {});\n                Object.keys(shapesConsolidatedBySubject).forEach(function (subjectImage) {\n                    var _a = shapesConsolidatedBySubject[subjectImage], subjects = _a.subjects, types = _a.types, predicates = _a.predicates;\n                    var shapeType;\n                    types.forEach(function (_a) {\n                        var type = _a.type;\n                        if (shapeType && type !== shapeType) {\n                            validationErrors.push({\n                                name: 'ShapeTypeError',\n                                message: 'A SHACL shape can be at most one of NodeShape or PropertyShape.',\n                                token: subjects[0].token,\n                            });\n                        }\n                        else if (!shapeType) {\n                            shapeType = type;\n                        }\n                    });\n                    var pathPredicates = [];\n                    var nonPathPredicateMap = {};\n                    predicates.forEach(function (predicate) {\n                        var image = predicate.token.image;\n                        var localName = getLocalName(image, localNameMatcher);\n                        var predicateImage = localName\n                            ? shaclPrefix + \":\" + localName\n                            : image;\n                        if (predicateImage === shaclPrefix + \":path\") {\n                            pathPredicates.push(predicate);\n                        }\n                        else {\n                            if (!nonPathPredicateMap[predicateImage]) {\n                                nonPathPredicateMap[predicateImage] = [];\n                            }\n                            nonPathPredicateMap[predicateImage].push(predicate);\n                        }\n                    });\n                    if (pathPredicates.length > 0) {\n                        if (shapeType === 'NodeShape') {\n                            validationErrors.push({\n                                name: 'ShapePropertyError',\n                                message: 'SHACL instances of `NodeShape` cannot have a value for the `path` property.',\n                                token: pathPredicates[0].token,\n                            });\n                        }\n                        else {\n                            shapeType = 'PropertyShape';\n                        }\n                        if (pathPredicates.length > 1) {\n                            validationErrors.push({\n                                name: 'ShapePropertyError',\n                                message: 'A shape can have at most one value for sh:path.',\n                                token: pathPredicates[1].token,\n                            });\n                        }\n                    }\n                    if (shapeType === 'NodeShape') {\n                        [\n                            'minCount',\n                            'maxCount',\n                            'uniqueLang',\n                            'lessThan',\n                            'lessThanOrEquals',\n                            'qualifiedValueShape',\n                        ].forEach(function (image) {\n                            var prefixedImage = shaclPrefix + \":\" + image;\n                            if (nonPathPredicateMap[prefixedImage]) {\n                                validationErrors.push({\n                                    name: 'ShapePropertyError',\n                                    message: \"A NodeShape cannot have any value for \" + prefixedImage + \".\",\n                                    token: nonPathPredicateMap[prefixedImage][0].token,\n                                });\n                            }\n                        });\n                    }\n                    else {\n                        [\n                            'deactivated',\n                            'severity',\n                            'datatype',\n                            'nodeKind',\n                            'minCount',\n                            'maxCount',\n                            'minExclusive',\n                            'minInclusive',\n                            'maxExclusive',\n                            'maxInclusive',\n                            'minLength',\n                            'maxLength',\n                            'languageIn',\n                            'uniqueLang',\n                            'in',\n                        ].forEach(function (image) {\n                            var prefixedImage = shaclPrefix + \":\" + image;\n                            if (nonPathPredicateMap[prefixedImage] &&\n                                nonPathPredicateMap[prefixedImage].length > 1) {\n                                validationErrors.push({\n                                    name: 'ShapePropertyError',\n                                    message: \"A shape can have at most one value for \" + prefixedImage + \".\",\n                                    token: nonPathPredicateMap[prefixedImage][1].token,\n                                });\n                            }\n                        });\n                    }\n                });\n                return { validationErrors: validationErrors };\n            };\n            _this.validateVisitor();\n            _this.shapes = [];\n            return _this;\n        }\n        return ShaclVisitor;\n    }(BaseVisitor));\n    return new ShaclVisitor();\n};\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { TurtleParser } from '../turtle/TurtleParser';\nimport { Lexer, Parser, } from 'chevrotain';\nimport { getShaclVisitor } from 'shacl/visitor';\nvar _a = require('./tokens'), getShaclTokenTypes = _a.getShaclTokenTypes, getShaclTokenMap = _a.getShaclTokenMap, categoryTokenMap = _a.categoryTokenMap;\nvar turtleTokenMap = require('../turtle/tokens').turtleTokenMap;\n// A SHACL parser for the Turtle serialization of SHACL only. The parser can\n// can accept any arbitrary namespace prefix for SHACL/XSD and still tokenize\n// and parse the document correctly (it will also, of course, parse docuemnts\n// using the full SHACL/XSD IRIs). The parser runs both a parse phase and a\n// second validation phase (using a visitor) in order to accommodate SHACL\n// rules that are not purely syntactic.\nvar ShaclParser = /** @class */ (function (_super) {\n    __extends(ShaclParser, _super);\n    function ShaclParser(config, prefixes) {\n        if (prefixes === void 0) { prefixes = { shacl: 'sh', xsd: 'xsd' }; }\n        var _this = _super.call(this, __assign({ outputCst: true, recoveryEnabled: true }, config), getShaclTokenTypes(prefixes), getShaclTokenTypes(prefixes), false) || this;\n        // Some SHACL rules cannot be checked for violations during the first parse.\n        // The visitor accepts the CST that results from parsing and checks\n        // conformity with these SHACL rules.\n        _this.validateWithVisitor = function (cst) {\n            // To save resources while parsing, the shaclVisitor is a singleton.\n            if (!_this.shaclVisitor) {\n                var BaseSrsVisitor = _this.getBaseCstVisitorConstructorWithDefaults();\n                _this.shaclVisitor = getShaclVisitor(BaseSrsVisitor);\n            }\n            else {\n                _this.shaclVisitor.$resetState();\n            }\n            _this.shaclVisitor.visit(cst);\n            return _this.shaclVisitor.$validateShapes(_this.prefixes);\n        };\n        _this.tokenize = function (document) {\n            return _this.lexer.tokenize(document).tokens;\n        };\n        _this.parse = function (document) {\n            _this.input = _this.tokenize(document);\n            var cst = _this.turtleDoc();\n            var validationErrors = _this.validateWithVisitor(cst).validationErrors;\n            // Next two items are copied so that they can be returned/held after parse\n            // state is cleared.\n            var errors = _this.errors.slice();\n            var semanticErrors = _this.semanticErrors.concat(validationErrors);\n            return {\n                errors: errors,\n                semanticErrors: semanticErrors,\n                cst: cst,\n            };\n        };\n        _this.predicateObjectList = _this.OVERRIDE_RULE('predicateObjectList', function () {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.shaclRulePredicateObjectList);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.verb);\n                        _this.SUBRULE(_this.objectList);\n                    },\n                },\n            ]);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.OR1([\n                        {\n                            ALT: function () {\n                                _this.SUBRULE1(_this.shaclRulePredicateObjectList);\n                            },\n                        },\n                        {\n                            ALT: function () {\n                                _this.SUBRULE1(_this.verb);\n                                _this.SUBRULE1(_this.objectList);\n                            },\n                        },\n                    ]);\n                });\n            });\n        });\n        _this.shaclRulePredicateObjectList = _this.RULE('shaclRulePredicateObjectList', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclPredicateIRI); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclNodeKind); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclTargetNode); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclPropertyPath); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclLiteralConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclListTakingConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclShapeExpectingConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclHasValueConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclVerbShape); },\n                },\n            ]);\n        });\n        _this.shaclPredicateIRI = _this.RULE('shaclPredicateIRI', function () {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.CONSUME(categoryTokenMap.SingleIriTakingPredicate);\n                        _this.SUBRULE(_this.iri);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.CONSUME(categoryTokenMap.ManyIriTakingPredicate);\n                        _this.SUBRULE1(_this.iri);\n                        _this.MANY(function () {\n                            _this.CONSUME(turtleTokenMap.Comma);\n                            _this.SUBRULE2(_this.iri);\n                        });\n                    },\n                },\n            ]);\n        });\n        _this.shaclNodeKind = _this.RULE('shaclNodeKind', function () {\n            _this.CONSUME(_this.shaclTokenMap.SHACL_nodeKind);\n            _this.CONSUME(categoryTokenMap.NodeKindIRI);\n        });\n        _this.shaclTargetNode = _this.RULE('shaclTargetNode', function () {\n            _this.CONSUME(_this.shaclTokenMap.SHACL_targetNode);\n            _this.SUBRULE(_this.shaclIRIOrLiteral);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Comma);\n                _this.SUBRULE1(_this.shaclIRIOrLiteral);\n            });\n        });\n        _this.shaclVerbShape = _this.RULE('shaclVerbShape', function () {\n            _this.SUBRULE(_this.verb);\n            _this.SUBRULE(_this.shaclShapeType);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Comma);\n                _this.SUBRULE1(_this.shaclShapeType);\n            });\n        });\n        _this.shaclShapeType = _this.RULE('shaclShapeType', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.CONSUME(_this.shaclTokenMap.SHACL_Shape); },\n                },\n                {\n                    ALT: function () { return _this.CONSUME(_this.shaclTokenMap.SHACL_NodeShape); },\n                },\n                {\n                    ALT: function () { return _this.CONSUME(_this.shaclTokenMap.SHACL_PropertyShape); },\n                },\n            ]);\n        });\n        _this.shaclPropertyPath = _this.RULE('shaclPropertyPath', function () {\n            _this.CONSUME(_this.shaclTokenMap.SHACL_path);\n            _this.SUBRULE(_this.shaclPropertyPathPath);\n        });\n        _this.shaclPropertyPathPath = _this.RULE('shaclPropertyPathPath', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclPredicatePath); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclSequencePath); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclAlternativePath); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclInversePath); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclZeroOrMorePath); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclOneOrMorePath); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclZeroOrOnePath); },\n                },\n            ]);\n        });\n        _this.shaclPredicatePath = _this.RULE('shaclPredicatePath', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.iri); },\n                },\n                {\n                    // This case does not seem to be allowed by the SHACL spec, but the\n                    // online W3C validator accepts one level of parens wrapping the IRI.\n                    ALT: function () {\n                        _this.CONSUME(turtleTokenMap.LParen);\n                        _this.SUBRULE1(_this.iri);\n                        _this.CONSUME(turtleTokenMap.RParen);\n                    },\n                },\n            ]);\n        });\n        _this.shaclSequencePath = _this.RULE('shaclSequencePath', function () {\n            _this.CONSUME(turtleTokenMap.LParen);\n            _this.SUBRULE(_this.shaclPropertyPathPath);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE1(_this.shaclPropertyPathPath); });\n            _this.OPTION(function () { return _this.CONSUME(turtleTokenMap.Semicolon); });\n            _this.CONSUME(turtleTokenMap.RParen);\n        });\n        _this.shaclAlternativePath = _this.RULE('shaclAlternativePath', function () {\n            _this.CONSUME(turtleTokenMap.LBracket);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_alternativePath);\n            _this.SUBRULE(_this.shaclPropertyPathPath); // This does not match the SHACL spec, but it does match the test cases, which violate the spec. ;_;\n            _this.OPTION(function () { return _this.CONSUME(turtleTokenMap.Semicolon); });\n            _this.CONSUME(turtleTokenMap.RBracket);\n        });\n        _this.shaclInversePath = _this.RULE('shaclInversePath', function () {\n            _this.CONSUME(turtleTokenMap.LBracket);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_inversePath);\n            _this.SUBRULE(_this.shaclPropertyPathPath);\n            _this.OPTION(function () { return _this.CONSUME(turtleTokenMap.Semicolon); });\n            _this.CONSUME(turtleTokenMap.RBracket);\n        });\n        _this.shaclZeroOrMorePath = _this.RULE('shaclZeroOrMorePath', function () {\n            _this.CONSUME(turtleTokenMap.LBracket);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_zeroOrMorePath);\n            _this.SUBRULE(_this.shaclPropertyPathPath);\n            _this.OPTION(function () { return _this.CONSUME(turtleTokenMap.Semicolon); });\n            _this.CONSUME(turtleTokenMap.RBracket);\n        });\n        _this.shaclOneOrMorePath = _this.RULE('shaclOneOrMorePath', function () {\n            _this.CONSUME(turtleTokenMap.LBracket);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_oneOrMorePath);\n            _this.SUBRULE(_this.shaclPropertyPathPath);\n            _this.OPTION(function () { return _this.CONSUME(turtleTokenMap.Semicolon); });\n            _this.CONSUME(turtleTokenMap.RBracket);\n        });\n        _this.shaclZeroOrOnePath = _this.RULE('shaclZeroOrOnePath', function () {\n            _this.CONSUME(turtleTokenMap.LBracket);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_zeroOrOnePath);\n            _this.SUBRULE(_this.shaclPropertyPathPath);\n            _this.OPTION(function () { return _this.CONSUME(turtleTokenMap.Semicolon); });\n            _this.CONSUME(turtleTokenMap.RBracket);\n        });\n        _this.shaclLiteralConstraint = _this.RULE('shaclLiteralConstraint', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclIntConstraint); },\n                },\n                // TODO: Some specificity here is possibly unnecessary -- e.g., maybe `shaclStringConstraint` and `shaclStringLiteralQuoteConstraint` can be consolidated in some way?\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclStringConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclStringLiteralQuoteConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclLangStringConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclBooleanConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclAnyLiteralConstraint); },\n                },\n            ]);\n        });\n        _this.shaclIntConstraint = _this.RULE('shaclIntConstraint', function () {\n            _this.CONSUME(categoryTokenMap.IntTakingPredicate);\n            _this.OR([\n                {\n                    ALT: function () { return _this.CONSUME(turtleTokenMap.INTEGER); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclXsdInteger); },\n                },\n            ]);\n        });\n        _this.shaclStringConstraint = _this.RULE('shaclStringConstraint', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.CONSUME(_this.shaclTokenMap.SHACL_select); },\n                },\n                {\n                    ALT: function () { return _this.CONSUME(_this.shaclTokenMap.SHACL_ask); },\n                },\n            ]);\n            _this.SUBRULE(_this.String); // TODO: a bit too lax?\n        });\n        _this.shaclStringLiteralQuoteConstraint = _this.RULE('shaclStringLiteralQuoteConstraint', function () {\n            _this.CONSUME(categoryTokenMap.StringLiteralQuoteTakingPredicate);\n            _this.CONSUME(turtleTokenMap.STRING_LITERAL_QUOTE);\n            _this.OPTION(function () {\n                _this.OR([\n                    {\n                        ALT: function () { return _this.CONSUME(turtleTokenMap.LANGTAG); },\n                    },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(turtleTokenMap.DoubleCaret);\n                            _this.CONSUME(_this.shaclTokenMap.SHACL_xsd_string);\n                        },\n                    },\n                    {\n                        ALT: function () {\n                            _this.CONSUME1(turtleTokenMap.DoubleCaret);\n                            _this.CONSUME(_this.shaclTokenMap.SHACL_xsd_anyURI);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.shaclLangStringConstraint = _this.RULE('shaclLangStringConstraint', function () {\n            _this.CONSUME(categoryTokenMap.LangStringTakingPredicate);\n            _this.SUBRULE(_this.String);\n            _this.OPTION(function () {\n                _this.OR([\n                    {\n                        ALT: function () { return _this.CONSUME(turtleTokenMap.LANGTAG); },\n                    },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(turtleTokenMap.DoubleCaret);\n                            _this.CONSUME(_this.shaclTokenMap.SHACL_xsd_string);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.shaclBooleanConstraint = _this.RULE('shaclBooleanConstraint', function () {\n            _this.CONSUME(categoryTokenMap.BooleanTakingPredicate);\n            _this.OR([\n                {\n                    ALT: function () { return _this.CONSUME(turtleTokenMap.TRUE); },\n                },\n                {\n                    ALT: function () { return _this.CONSUME(turtleTokenMap.FALSE); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclXsdBoolean); },\n                },\n            ]);\n        });\n        _this.shaclAnyLiteralConstraint = _this.RULE('shaclAnyLiteralConstraint', function () {\n            _this.CONSUME(categoryTokenMap.AnyLiteralTakingPredicate);\n            _this.SUBRULE(_this.literal);\n        });\n        _this.shaclListTakingConstraint = _this.RULE('shaclListTakingConstraint', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclLanguageInConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclShapeListTakingConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclIRIListTakingConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclShapeOrLiteralListTakingConstraint); },\n                },\n            ]);\n        });\n        _this.shaclLanguageInConstraint = _this.RULE('shaclLanguageInConstraint', function () {\n            _this.CONSUME(_this.shaclTokenMap.SHACL_languageIn);\n            _this.SUBRULE(_this.shaclStringCollection);\n        });\n        _this.shaclStringCollection = _this.RULE('shaclStringCollection', function () {\n            _this.CONSUME(turtleTokenMap.LParen);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.STRING_LITERAL_QUOTE);\n            });\n            _this.CONSUME(turtleTokenMap.RParen);\n        });\n        _this.shaclShapeListTakingConstraint = _this.RULE('shaclShapeListTakingConstraint', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.CONSUME(_this.shaclTokenMap.SHACL_and); },\n                },\n                {\n                    ALT: function () { return _this.CONSUME(_this.shaclTokenMap.SHACL_or); },\n                },\n                {\n                    ALT: function () { return _this.CONSUME(_this.shaclTokenMap.SHACL_xone); },\n                },\n            ]);\n            _this.SUBRULE(_this.shaclShapeCollection);\n        });\n        _this.shaclShapeCollection = _this.RULE('shaclShapeCollection', function () {\n            _this.CONSUME(turtleTokenMap.LParen);\n            _this.MANY(function () {\n                _this.SUBRULE(_this.shaclShape);\n            });\n            _this.CONSUME(turtleTokenMap.RParen);\n        });\n        _this.shaclIRIListTakingConstraint = _this.RULE('shaclIRIListTakingConstraint', function () {\n            _this.CONSUME(_this.shaclTokenMap.SHACL_ignoredProperties);\n            _this.SUBRULE(_this.shaclIRICollection);\n        });\n        _this.shaclIRICollection = _this.RULE('shaclIRICollection', function () {\n            _this.CONSUME(turtleTokenMap.LParen);\n            _this.MANY(function () {\n                _this.SUBRULE(_this.iri);\n            });\n            _this.CONSUME(turtleTokenMap.RParen);\n        });\n        _this.shaclShapeOrLiteralListTakingConstraint = _this.RULE('shaclShapeOrLiteralListTakingConstraint', function () {\n            _this.CONSUME(_this.shaclTokenMap.SHACL_in);\n            _this.SUBRULE(_this.shaclShapeOrLiteralCollection);\n        });\n        _this.shaclShapeOrLiteralCollection = _this.RULE('shaclShapeOrLiteralCollection', function () {\n            _this.CONSUME(turtleTokenMap.LParen);\n            _this.MANY(function () {\n                _this.SUBRULE(_this.shaclShapeOrLiteral);\n            });\n            _this.CONSUME(turtleTokenMap.RParen);\n        });\n        _this.shaclShapeExpectingConstraint = _this.RULE('shaclShapeExpectingConstraint', function () {\n            _this.CONSUME(categoryTokenMap.ShapeExpectingPredicate);\n            _this.SUBRULE(_this.shaclShape);\n        });\n        _this.shaclHasValueConstraint = _this.RULE('shaclHasValueConstraint', function () {\n            _this.CONSUME(_this.shaclTokenMap.SHACL_hasValue);\n            _this.SUBRULE(_this.shaclShapeOrLiteral);\n        });\n        _this.shaclShape = _this.RULE('shaclShape', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.iri); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.blankNodePropertyList); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.BlankNode); },\n                },\n            ]);\n        });\n        _this.shaclShapeOrLiteral = _this.RULE('shaclShapeOrLiteral', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclShape); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.literal); },\n                },\n            ]);\n        });\n        _this.shaclIRIOrLiteral = _this.RULE('shaclIRIOrLiteral', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.iri); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.literal); },\n                },\n            ]);\n        });\n        _this.shaclXsdBoolean = _this.RULE('shaclXsdBoolean', function () {\n            _this.SUBRULE(_this.shaclStringWithDoubleCaret);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_xsd_boolean);\n        });\n        _this.shaclXsdString = _this.RULE('shaclXsdString', function () {\n            _this.SUBRULE(_this.shaclStringWithDoubleCaret);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_xsd_string);\n        });\n        _this.shaclXsdInteger = _this.RULE('shaclXsdInteger', function () {\n            _this.SUBRULE(_this.shaclStringWithDoubleCaret);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_xsd_integer);\n        });\n        _this.shaclXsdDate = _this.RULE('shaclXsdDate', function () {\n            _this.SUBRULE(_this.shaclStringWithDoubleCaret);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_xsd_date);\n        });\n        _this.shaclXsdAnyURI = _this.RULE('shaclXsdAnyURI', function () {\n            _this.SUBRULE(_this.shaclStringWithDoubleCaret);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_xsd_anyURI);\n        });\n        _this.shaclStringWithDoubleCaret = _this.RULE('shaclStringWithDoubleCaret', function () {\n            _this.SUBRULE(_this.String);\n            _this.CONSUME(turtleTokenMap.DoubleCaret);\n        });\n        _this.prefixes = prefixes;\n        _this.lexer = new Lexer(getShaclTokenTypes(prefixes));\n        _this.shaclTokenMap = getShaclTokenMap(prefixes);\n        Parser.performSelfAnalysis(_this);\n        return _this;\n    }\n    return ShaclParser;\n}(TurtleParser));\nexport { ShaclParser };\n","export * from './ShaclParser';\n// Convenience imports/exports that aren't core functionality:\n// NOTE: Tokens MUST be imported using CommonJS syntax; see here: https://github.com/SAP/chevrotain/issues/345\nexport var shaclTokens = require('./tokens');\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nexport var traverse = function (root, visit) {\n    _traverse(root, null, visit);\n};\nexport var unsafeTraverse = function (root, visit) {\n    _traverse(root, null, visit, false);\n};\nexport function isCstNode(object) {\n    return Boolean(object && 'name' in object);\n}\nvar TraverseContext = /** @class */ (function () {\n    function TraverseContext(_a) {\n        var node = _a.node, parentCtx = _a.parentCtx;\n        this.node = __assign({}, node);\n        this.parentCtx = __assign({}, parentCtx);\n    }\n    return TraverseContext;\n}());\nvar _traverse = function (root, ctx, visit, visitSafely) {\n    if (ctx === void 0) { ctx = new TraverseContext({ node: root }); }\n    if (visitSafely === void 0) { visitSafely = true; }\n    if (!isCstNode(root)) {\n        // must be a token\n        return visit(visitSafely ? __assign({}, ctx) : ctx);\n    }\n    // is a grammar rule node\n    var children = root.children;\n    Object.keys(children).forEach(function (key) {\n        var childType = children[key];\n        if (!childType.length) {\n            return;\n        }\n        childType.forEach(function (child) {\n            var childCtx = visitSafely\n                ? new TraverseContext({ node: child, parentCtx: ctx })\n                : { node: child, parentCtx: ctx };\n            var afterVisit = function (transformedCtx) {\n                var nextCtx = childCtx;\n                if (transformedCtx) {\n                    nextCtx = visitSafely\n                        ? new TraverseContext({\n                            node: transformedCtx.node,\n                            parentCtx: transformedCtx.parentCtx,\n                        })\n                        : {\n                            node: transformedCtx.node,\n                            parentCtx: transformedCtx.parentCtx,\n                        };\n                }\n                _traverse(child, nextCtx, visit, visitSafely);\n            };\n            visit(childCtx, afterVisit);\n        });\n    });\n};\n","/*\nCopyright ©2012–2018 Ruben Verborgh\nWith modifications Copyright ©2018 Stardog Union\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nvar escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\[uU]|\\\\(.)/g;\nvar escapeReplacements = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\"': '\"',\n    n: '\\n',\n    r: '\\r',\n    t: '\\t',\n    f: '\\f',\n    b: '\\b',\n    _: '_',\n    '~': '~',\n    '.': '.',\n    '-': '-',\n    '!': '!',\n    $: '$',\n    '&': '&',\n    '(': '(',\n    ')': ')',\n    '*': '*',\n    '+': '+',\n    ',': ',',\n    ';': ';',\n    '=': '=',\n    '/': '/',\n    '?': '?',\n    '#': '#',\n    '@': '@',\n    '%': '%',\n};\nexport var unescapedStringLiteralQuote = /^\"([^\"\\\\\\r\\n]+)\"/; // non-empty string without escape sequences\nexport var unescapedStringLiteralSingleQuote = /^'([^'\\\\\\r\\n]+)'/;\nexport var stringLiteralQuote = /^\"((?:[^\"\\\\\\r\\n]|\\\\.)*)\"(?=[^\"])/;\nexport var stringLiteralSingleQuote = /^'((?:[^'\\\\\\r\\n]|\\\\.)*)'(?=[^'])/;\nexport var stringLiteralLongQuote = /^\"\"\"([^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*)\"\"\"/;\nexport var stringLiteralLongSingleQuote = /^'''([^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*)'''/;\nexport var illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\nexport var escapedIri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/;\nexport var unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/;\n// Handle special unescaping needs related to the IRIREF rule and others.\nexport var unescape = function (item) {\n    try {\n        return item.replace(escapeSequence, function (_, unicode4, unicode8, escapedChar) {\n            if (unicode4) {\n                return String.fromCharCode(parseInt(unicode4, 16));\n            }\n            else if (unicode8) {\n                var charCode = parseInt(unicode8, 16);\n                if (charCode <= 0xffff) {\n                    return String.fromCharCode(charCode);\n                }\n                return String.fromCharCode(0xd800 + (charCode -= 0x10000) / 0x400, 0xdc00 + (charCode & 0x3ff));\n            }\n            else {\n                var replacement = escapeReplacements[escapedChar];\n                if (!replacement) {\n                    throw new Error();\n                }\n                return replacement;\n            }\n        });\n    }\n    catch (error) {\n        return null;\n    }\n};\n","var sparqlTokenMap = require('../sparql/tokens').sparqlTokenMap;\nimport { createToken } from 'chevrotain';\nimport { regex } from '../helpers/regex';\nimport { EXPONENT, ECHAR, PLX, HEX, PN_CHARS_BASE, PN_CHARS_U, PN_CHARS, PN_PREFIX, PN_LOCAL, PN_LOCAL_ESC, } from '../helpers/matchers';\nimport { unescape, stringLiteralLongSingleQuote, stringLiteralLongQuote, unescapedStringLiteralQuote, stringLiteralQuote, unescapedStringLiteralSingleQuote, stringLiteralSingleQuote, unescapedIri, escapedIri, illegalIriChars, } from '../helpers/unescape';\nvar unicodeRegexp = /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nexport var turtleTokenMap = {\n    Comment: createToken({\n        name: 'Comment',\n        pattern: /#[^\\n]*/,\n        group: 'comments',\n    }),\n    LBracket: sparqlTokenMap.LBracket,\n    RBracket: sparqlTokenMap.RBracket,\n    LParen: sparqlTokenMap.LParen,\n    RParen: sparqlTokenMap.RParen,\n    Period: sparqlTokenMap.Period,\n    WhiteSpace: sparqlTokenMap.WhiteSpace,\n    // 'true' and 'false' are case sensitive in Turtle but not in SPARQL\n    TRUE: createToken({\n        name: 'TRUE',\n        pattern: /true/,\n    }),\n    FALSE: createToken({\n        name: 'FALSE',\n        pattern: /false/,\n    }),\n    DoubleCaret: sparqlTokenMap.DoubleCaret,\n    LEmbed: sparqlTokenMap.LEmbed,\n    REmbed: sparqlTokenMap.REmbed,\n    Comma: sparqlTokenMap.Comma,\n    Semicolon: sparqlTokenMap.Semicolon,\n    A: sparqlTokenMap.A,\n    PREFIX: sparqlTokenMap.PREFIX,\n    BASE: sparqlTokenMap.BASE,\n    PNAME_NS: sparqlTokenMap.PNAME_NS,\n    PNAME_LN: sparqlTokenMap.PNAME_LN,\n    BLANK_NODE_LABEL: sparqlTokenMap.BLANK_NODE_LABEL,\n    TTL_BASE: createToken({ name: 'TTL_BASE', pattern: /@base/ }),\n    TTL_PREFIX: createToken({ name: 'TTL_PREFIX', pattern: /@prefix/ }),\n    LANGTAG: sparqlTokenMap.LANGTAG,\n    INTEGER: createToken({\n        name: 'INTEGER',\n        pattern: regex.and(regex.option(/[+-]/), /\\d+/),\n    }),\n    DECIMAL: createToken({\n        name: 'DECIMAL',\n        pattern: regex.and(regex.option(/[+-]/), /(\\d*\\.\\d+)/),\n    }),\n    DOUBLE: createToken({\n        name: 'DOUBLE',\n        pattern: regex.and(regex.option(/[+-]/), regex.or(regex.and(/\\d+\\.\\d*/, EXPONENT), regex.and(/\\.\\d+/, EXPONENT), regex.and(/\\d+/, EXPONENT))),\n    }),\n    EXPONENT: createToken({ name: 'EXPONENT', pattern: EXPONENT }),\n    ECHAR: createToken({ name: 'ECHAR', pattern: ECHAR }),\n    ANON: sparqlTokenMap.ANON,\n    PLX: createToken({ name: 'PLX', pattern: PLX }),\n    PERCENT: sparqlTokenMap.PERCENT,\n    HEX: createToken({ name: 'HEX', pattern: HEX }),\n    STRING_LITERAL_LONG_SINGLE_QUOTE: createToken({\n        name: 'STRING_LITERAL_LONG_SINGLE_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var match = stringLiteralLongSingleQuote.exec(text.slice(startOffset));\n            if (!match || unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: true,\n    }),\n    STRING_LITERAL_LONG_QUOTE: createToken({\n        name: 'STRING_LITERAL_LONG_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var match = stringLiteralLongQuote.exec(text.slice(startOffset));\n            if (!match || unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: true,\n    }),\n    STRING_LITERAL_QUOTE: createToken({\n        name: 'STRING_LITERAL_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedStringLiteralQuote.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = stringLiteralQuote.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            if (unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    STRING_LITERAL_SINGLE_QUOTE: createToken({\n        name: 'STRING_LITERAL_SINGLE_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedStringLiteralSingleQuote.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = stringLiteralSingleQuote.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            if (unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    UCHAR: createToken({\n        name: 'UCHAR',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            return unicodeRegexp.exec(text.slice(startOffset));\n        },\n        line_breaks: false,\n    }),\n    IRIREF: createToken({\n        name: 'IRIREF',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedIri.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = escapedIri.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            var value = unescape(match[1]);\n            if (value === null || illegalIriChars.test(value)) {\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    PN_CHARS_BASE: createToken({ name: 'PN_CHARS_BASE', pattern: PN_CHARS_BASE }),\n    PN_CHARS_U: createToken({ name: 'PN_CHARS_U', pattern: PN_CHARS_U }),\n    PN_CHARS: createToken({ name: 'PN_CHARS', pattern: PN_CHARS }),\n    PN_PREFIX: createToken({ name: 'PN_PREFIX', pattern: PN_PREFIX }),\n    PN_LOCAL: createToken({ name: 'PN_LOCAL', pattern: PN_LOCAL }),\n    PN_LOCAL_ESC: createToken({ name: 'PN_LOCAL_ESC', pattern: PN_LOCAL_ESC }),\n    Unknown: createToken({\n        name: 'Unknown',\n        pattern: /\\w+/,\n    }),\n};\nexport var turtleTokenTypes = [\n    turtleTokenMap.Comment,\n    sparqlTokenMap.ANON,\n    sparqlTokenMap.LBracket,\n    sparqlTokenMap.RBracket,\n    sparqlTokenMap.LParen,\n    sparqlTokenMap.RParen,\n    sparqlTokenMap.WhiteSpace,\n    turtleTokenMap.TRUE,\n    turtleTokenMap.FALSE,\n    sparqlTokenMap.Comma,\n    sparqlTokenMap.Semicolon,\n    sparqlTokenMap.PNAME_NS,\n    sparqlTokenMap.A,\n    sparqlTokenMap.PREFIX,\n    sparqlTokenMap.BASE,\n    sparqlTokenMap.PNAME_LN,\n    sparqlTokenMap.BLANK_NODE_LABEL,\n    turtleTokenMap.TTL_BASE,\n    turtleTokenMap.TTL_PREFIX,\n    sparqlTokenMap.LANGTAG,\n    turtleTokenMap.DOUBLE,\n    turtleTokenMap.DECIMAL,\n    sparqlTokenMap.Period,\n    sparqlTokenMap.DoubleCaret,\n    turtleTokenMap.LEmbed,\n    turtleTokenMap.REmbed,\n    turtleTokenMap.IRIREF,\n    turtleTokenMap.STRING_LITERAL_LONG_SINGLE_QUOTE,\n    turtleTokenMap.STRING_LITERAL_LONG_QUOTE,\n    turtleTokenMap.STRING_LITERAL_QUOTE,\n    turtleTokenMap.STRING_LITERAL_SINGLE_QUOTE,\n    turtleTokenMap.INTEGER,\n    turtleTokenMap.EXPONENT,\n    turtleTokenMap.PLX,\n    sparqlTokenMap.PERCENT,\n    turtleTokenMap.HEX,\n    turtleTokenMap.PN_CHARS_BASE,\n    turtleTokenMap.PN_CHARS_U,\n    turtleTokenMap.PN_CHARS,\n    turtleTokenMap.PN_PREFIX,\n    turtleTokenMap.PN_LOCAL,\n    turtleTokenMap.PN_LOCAL_ESC,\n    turtleTokenMap.ECHAR,\n    turtleTokenMap.UCHAR,\n    turtleTokenMap.Unknown,\n];\n"],"sourceRoot":""}