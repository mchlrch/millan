{"version":3,"sources":["webpack://millan.[name]/./src/helpers/matchers.ts","webpack://millan.[name]/./src/helpers/regex.ts","webpack://millan.[name]/./src/sparql/keywords.ts","webpack://millan.[name]/./src/sparql/terminals.ts","webpack://millan.[name]/./src/sparql/tokens.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgC;AACzB,0BAA0B;AAC1B,uCAAuC;AACvC,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,iBAAiB,4CAAK;AACtB,eAAe,4CAAK;AACpB,gBAAgB,4CAAK,oBAAoB,4CAAK,QAAQ,4CAAK,KAAK,4CAAK,MAAM,4CAAK;AAChF,cAAc,4CAAK;AACnB,UAAU,4CAAK;AACf,eAAe,4CAAK,KAAK,4CAAK,iCAAiC,4CAAK,QAAQ,4CAAK,KAAK,4CAAK,MAAM,4CAAK,gCAAgC,4CAAK;AAC3I,cAAc,4CAAK,KAAK,4CAAK,uBAAuB,4CAAK,MAAM,4CAAK;AACpE,WAAW,4CAAK,WAAW,4CAAK;AAChC,UAAU,4CAAK,WAAW,4CAAK;AAC/B,sBAAsB,4CAAK,UAAU,4CAAK,MAAM,4CAAK;AACrD,sBAAsB,4CAAK,UAAU,4CAAK,MAAM,4CAAK;AACrD,2BAA2B,4CAAK,YAAY,4CAAK,MAAM,4CAAK,KAAK,4CAAK,QAAQ,4CAAK,iBAAiB,4CAAK;AACzG,2BAA2B,4CAAK,YAAY,4CAAK,MAAM,4CAAK,KAAK,4CAAK,QAAQ,4CAAK,iBAAiB,4CAAK;AACzG,aAAa,4CAAK,IAAI,4CAAK,4BAA4B,4CAAK,yBAAyB,4CAAK;AAC1F,uBAAuB,4CAAK;AAC5B,uBAAuB,4CAAK;AAC5B,sBAAsB,4CAAK;AAC3B,uBAAuB,4CAAK;AAC5B,uBAAuB,4CAAK;AAC5B,sBAAsB,4CAAK;AAC3B,WAAW,4CAAK;AAChB,WAAW,4CAAK;AAChB,uBAAuB,4CAAK,WAAW,4CAAK,uBAAuB,4CAAK,QAAQ,4CAAK,KAAK,4CAAK,MAAM,4CAAK;AAC1G,eAAe,4CAAK,KAAK,4CAAK;AAC9B,eAAe,4CAAK;;;;;;;;;;;;;ACrC3B;AAAA;AAAO;AACP;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AACyC;AACzC,iBAAiB,8DAAW;AAC5B;AACA;AACA,CAAC;AACM;AACP,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,eAAe,8DAAW;AAC1B;AACA;AACA,KAAK;AACL,cAAc,8DAAW;AACzB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,SAAS,8DAAW;AACpB;AACA;AACA,KAAK;AACL,SAAS,8DAAW;AACpB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,eAAe,8DAAW;AAC1B;AACA;AACA,KAAK;AACL,oBAAoB,8DAAW;AAC/B;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,QAAQ,8DAAW;AACnB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,OAAO,8DAAW;AAClB;AACA;AACA,KAAK;AACL,aAAa,8DAAW;AACxB;AACA;AACA,KAAK;AACL,aAAa,8DAAW;AACxB;AACA;AACA,KAAK;AACL,QAAQ,8DAAW;AACnB;AACA;AACA,KAAK;AACL,UAAU,8DAAW;AACrB;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,cAAc,8DAAW;AACzB;AACA;AACA,KAAK;AACL,SAAS,8DAAW;AACpB;AACA;AACA,KAAK;AACL,UAAU,8DAAW;AACrB;AACA;AACA,KAAK;AACL,aAAa,8DAAW;AACxB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,SAAS,8DAAW;AACpB;AACA;AACA,KAAK;AACL,UAAU,8DAAW;AACrB;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,UAAU,8DAAW;AACrB;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,UAAU,8DAAW;AACrB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,UAAU,8DAAW;AACrB;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,SAAS,8DAAW;AACpB;AACA;AACA,KAAK;AACL,QAAQ,8DAAW;AACnB;AACA;AACA,KAAK;AACL,UAAU,8DAAW;AACrB;AACA;AACA,KAAK;AACL,UAAU,8DAAW;AACrB;AACA;AACA,KAAK;AACL,iBAAiB,8DAAW;AAC5B;AACA;AACA,KAAK;AACL,iBAAiB,8DAAW;AAC5B;AACA;AACA,KAAK;AACL,kBAAkB,8DAAW;AAC7B;AACA;AACA,KAAK;AACL,UAAU,8DAAW;AACrB;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,aAAa,8DAAW;AACxB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,SAAS,8DAAW;AACpB;AACA;AACA,KAAK;AACL,cAAc,8DAAW;AACzB;AACA;AACA,KAAK;AACL,aAAa,8DAAW;AACxB;AACA;AACA,KAAK;AACL,UAAU,8DAAW;AACrB;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,SAAS,8DAAW;AACpB;AACA;AACA,KAAK;AACL,UAAU,8DAAW;AACrB;AACA;AACA,KAAK;AACL,iBAAiB,8DAAW;AAC5B;AACA;AACA,KAAK;AACL,cAAc,8DAAW;AACzB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,SAAS,8DAAW;AACpB;AACA;AACA,KAAK;AACL,SAAS,8DAAW;AACpB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,UAAU,8DAAW;AACrB;AACA;AACA,KAAK;AACL,SAAS,8DAAW;AACpB;AACA;AACA,KAAK;AACL,UAAU,8DAAW;AACrB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,oBAAoB,8DAAW;AAC/B;AACA;AACA,KAAK;AACL,cAAc,8DAAW;AACzB;AACA;AACA,KAAK;AACL,eAAe,8DAAW;AAC1B;AACA;AACA,KAAK;AACL,aAAa,8DAAW;AACxB;AACA;AACA,KAAK;AACL,eAAe,8DAAW;AAC1B;AACA;AACA,KAAK;AACL,cAAc,8DAAW;AACzB;AACA;AACA,KAAK;AACL,UAAU,8DAAW;AACrB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,SAAS,8DAAW;AACpB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,aAAa,8DAAW;AACxB;AACA;AACA,KAAK;AACL,aAAa,8DAAW;AACxB;AACA;AACA,KAAK;AACL,cAAc,8DAAW;AACzB;AACA;AACA,KAAK;AACL,QAAQ,8DAAW;AACnB;AACA;AACA,KAAK;AACL,SAAS,8DAAW;AACpB;AACA;AACA,KAAK;AACL,UAAU,8DAAW;AACrB;AACA;AACA,KAAK;AACL,aAAa,8DAAW;AACxB;AACA;AACA,KAAK;AACL,SAAS,8DAAW;AACpB;AACA;AACA,KAAK;AACL,UAAU,8DAAW;AACrB;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,cAAc,8DAAW;AACzB;AACA;AACA,KAAK;AACL,QAAQ,8DAAW;AACnB;AACA;AACA,KAAK;AACL,aAAa,8DAAW;AACxB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,cAAc,8DAAW;AACzB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,aAAa,8DAAW;AACxB;AACA;AACA,KAAK;AACL,eAAe,8DAAW;AAC1B;AACA;AACA,KAAK;AACL,eAAe,8DAAW;AAC1B;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,aAAa,8DAAW;AACxB;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,gBAAgB,8DAAW;AAC3B;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,SAAS,8DAAW;AACpB;AACA;AACA,KAAK;AACL,SAAS,8DAAW;AACpB;AACA;AACA,KAAK;AACL,SAAS,8DAAW;AACpB;AACA;AACA,KAAK;AACL,YAAY,8DAAW;AACvB;AACA;AACA,KAAK;AACL,kBAAkB,8DAAW;AAC7B;AACA;AACA,KAAK;AACL,eAAe,8DAAW;AAC1B;AACA;AACA,KAAK;AACL,UAAU,8DAAW;AACrB;AACA;AACA,KAAK;AACL,WAAW,8DAAW;AACtB;AACA;AACA,KAAK;AACL,QAAQ,8DAAW;AACnB;AACA;AACA,KAAK;AACL,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":"millan.graphql~shacl~sms~sparql~srs~turtle.js","sourcesContent":["import { regex } from './regex';\nexport var CATCH_ALL = /[\\s\\S]*/; // equivalent to /.*/s, which isn't a JS standard yet\nexport var CATCH_ALL_AT_LEAST_ONE = /[\\s\\S]+/; // equivalent to /.+/s, which isn't a JS standard yet\nexport var IRIREF = /<[^<>\\\\{}|\\^`\\u0000-\\u0020]*>/;\nexport var PN_CHARS_BASE = /[A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\nexport var LANGTAG = /@[a-zA-Z]+(-[a-zA-Z0-9]+)*/;\nexport var INTEGER = /\\d+/;\nexport var DECIMAL = /(\\d*\\.\\d+)|(\\d+\\.\\d*)/;\nexport var EXPONENT = /[eE][+-]?\\d+/;\nexport var ECHAR = /\\\\[tbnrf\"'\\\\]/;\nexport var WS = /[\\u0020\\u0009\\u000d\\u000a]/;\nexport var HEX = /[0-9A-Fa-f]/;\nexport var PN_LOCAL_ESC = /\\\\[_~.\\-!\\$&'()*+,=\\/?#@%;]/;\nexport var PN_CHARS_U = regex.or(PN_CHARS_BASE, /_/);\nexport var PN_CHARS = regex.or(PN_CHARS_U, /-/, /\\d/, /\\u00b7/, /[\\u0300-\\u036f]/, /[\\u203f-\\u2040]/);\nexport var PN_PREFIX = regex.and(PN_CHARS_BASE, regex.option(regex.and(regex.many(regex.or(PN_CHARS, /\\./)), PN_CHARS)));\nexport var PERCENT = regex.and(/%/, HEX, HEX);\nexport var PLX = regex.or(PERCENT, PN_LOCAL_ESC);\nexport var PN_LOCAL = regex.and(regex.or(PN_CHARS_U, /:/, /\\d/, PLX), regex.option(regex.and(regex.many(regex.or(PN_CHARS, /\\./, /:/, PLX)), regex.or(PN_CHARS, /:/, PLX))));\nexport var VARNAME = regex.and(regex.or(PN_CHARS_U, /\\d/), regex.many(regex.or(PN_CHARS_U, /\\d/, /\\u00b7/, /[\\u0300-\\u036f]/, /[\\u203f-\\u2040]/)));\nexport var ANON = regex.and(/\\[/, regex.many(WS), /\\]/);\nexport var NIL = regex.and(/\\(/, regex.many(WS), /\\)/);\nexport var STRING_LITERAL1 = regex.and(/'/, regex.many(regex.or(/[^\\u0027\\u005C\\u000A\\u000D]/, ECHAR)), /'/);\nexport var STRING_LITERAL2 = regex.and(/\"/, regex.many(regex.or(/[^\\u0022\\u005C\\u000A\\u000D]/, ECHAR)), /\"/);\nexport var STRING_LITERAL_LONG1 = regex.and(/'''/, regex.many(regex.and(regex.option(regex.or(/'/, /''/)), regex.or(/[^'\\\\]/, ECHAR))), /'''/);\nexport var STRING_LITERAL_LONG2 = regex.and(/\"\"\"/, regex.many(regex.and(regex.option(regex.or(/\"/, /\"\"/)), regex.or(/[^\"\\\\]/, ECHAR))), /\"\"\"/);\nexport var DOUBLE = regex.or(regex.and(/\\d+\\.\\d*/, EXPONENT), regex.and(/\\.\\d+/, EXPONENT), regex.and(/\\d+/, EXPONENT));\nexport var INTEGER_POSITIVE = regex.and(/\\+/, INTEGER);\nexport var DECIMAL_POSITIVE = regex.and(/\\+/, DECIMAL);\nexport var DOUBLE_POSITIVE = regex.and(/\\+/, DOUBLE);\nexport var INTEGER_NEGATIVE = regex.and(/-/, INTEGER);\nexport var DECIMAL_NEGATIVE = regex.and(/-/, DECIMAL);\nexport var DOUBLE_NEGATIVE = regex.and(/-/, DOUBLE);\nexport var VAR1 = regex.and(/\\?/, VARNAME);\nexport var VAR2 = regex.and(/\\$/, VARNAME);\nexport var BLANK_NODE_LABEL = regex.and(/_:/, regex.or(PN_CHARS_U, /\\d/), regex.option(regex.and(regex.many(regex.or(PN_CHARS, /\\./)), PN_CHARS)));\nexport var PNAME_NS = regex.and(regex.option(PN_PREFIX), /:/);\nexport var PNAME_LN = regex.and(PNAME_NS, PN_LOCAL);\n","export var regex = {\n    or: function () {\n        var r = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            r[_i] = arguments[_i];\n        }\n        return new RegExp(r.map(function (_a) {\n            var source = _a.source;\n            return \"(\" + source + \")\";\n        }).join('|'));\n    },\n    and: function () {\n        var r = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            r[_i] = arguments[_i];\n        }\n        return new RegExp(r.map(function (_a) {\n            var source = _a.source;\n            return \"(\" + source + \")\";\n        }).join(''));\n    },\n    option: function (r) {\n        return new RegExp(\"(\" + r.source + \")?\");\n    },\n    many: function (r) {\n        return new RegExp(\"(\" + r.source + \")*\");\n    },\n};\n","// @ts-ignore: import types for declarations\nimport { createToken } from 'chevrotain';\nvar MAX_LENGTH = createToken({\n    name: 'MAX_LENGTH',\n    pattern: /MAX LENGTH/i,\n});\nexport var keywords = {\n    SELECT: createToken({\n        name: 'SELECT',\n        pattern: /SELECT/i,\n    }),\n    CONSTRUCT: createToken({\n        name: 'CONSTRUCT',\n        pattern: /CONSTRUCT/i,\n    }),\n    DISTINCT: createToken({\n        name: 'DISTINCT',\n        pattern: /DISTINCT/i,\n    }),\n    START: createToken({\n        name: 'START',\n        pattern: /START/i,\n    }),\n    END: createToken({\n        name: 'END',\n        pattern: /END/i,\n    }),\n    VIA: createToken({\n        name: 'VIA',\n        pattern: /VIA/i,\n    }),\n    PATHS: createToken({\n        name: 'PATHS',\n        pattern: /PATHS/i,\n    }),\n    PATHS_ALL: createToken({\n        name: 'PATHS_ALL',\n        pattern: /PATHS ALL/i,\n    }),\n    PATHS_SHORTEST: createToken({\n        name: 'PATHS_SHORTEST',\n        pattern: /PATHS SHORTEST/i,\n    }),\n    CYCLIC: createToken({\n        name: 'CYCLIC',\n        pattern: /CYCLIC/i,\n    }),\n    AS: createToken({\n        name: 'AS',\n        pattern: /AS/i,\n    }),\n    WHERE: createToken({\n        name: 'WHERE',\n        pattern: /WHERE/i,\n    }),\n    A: createToken({\n        name: 'A',\n        pattern: /a/i,\n    }),\n    GroupBy: createToken({\n        name: 'GroupBy',\n        pattern: /group by/i,\n    }),\n    OrderBy: createToken({\n        name: 'OrderBy',\n        pattern: /order by/i,\n    }),\n    By: createToken({\n        name: 'By',\n        pattern: /By/i,\n    }),\n    BASE: createToken({\n        name: 'BASE',\n        pattern: /BASE/i,\n    }),\n    PREFIX: createToken({\n        name: 'PREFIX',\n        pattern: /PREFIX/i,\n    }),\n    DESCRIBE: createToken({\n        name: 'DESCRIBE',\n        pattern: /DESCRIBE/i,\n    }),\n    ASK: createToken({\n        name: 'ASK',\n        pattern: /ASK/i,\n    }),\n    FROM: createToken({\n        name: 'FROM',\n        pattern: /FROM/i,\n    }),\n    REDUCED: createToken({\n        name: 'REDUCED',\n        pattern: /REDUCED/i,\n    }),\n    NAMED: createToken({\n        name: 'NAMED',\n        pattern: /NAMED/i,\n    }),\n    HAVING: createToken({\n        name: 'HAVING',\n        pattern: /HAVING/i,\n    }),\n    ASC: createToken({\n        name: 'ASC',\n        pattern: /ASC/i,\n    }),\n    DESC: createToken({\n        name: 'DESC',\n        pattern: /DESC/i,\n    }),\n    OFFSET: createToken({\n        name: 'OFFSET',\n        pattern: /OFFSET/i,\n    }),\n    LIMIT: createToken({\n        name: 'LIMIT',\n        pattern: /LIMIT/i,\n    }),\n    VALUES: createToken({\n        name: 'VALUES',\n        pattern: /VALUES/i,\n    }),\n    LOAD: createToken({\n        name: 'LOAD',\n        pattern: /LOAD/i,\n    }),\n    SILENT: createToken({\n        name: 'SILENT',\n        pattern: /SILENT/i,\n    }),\n    INTO: createToken({\n        name: 'INTO',\n        pattern: /INTO/i,\n    }),\n    CLEAR: createToken({\n        name: 'CLEAR',\n        pattern: /CLEAR/i,\n    }),\n    DROP: createToken({\n        name: 'DROP',\n        pattern: /DROP/i,\n    }),\n    CREATE: createToken({\n        name: 'CREATE',\n        pattern: /CREATE/i,\n    }),\n    ADD: createToken({\n        name: 'ADD',\n        pattern: /ADD/i,\n    }),\n    TO: createToken({\n        name: 'TO',\n        pattern: /TO/i,\n    }),\n    MOVE: createToken({\n        name: 'MOVE',\n        pattern: /MOVE/i,\n    }),\n    COPY: createToken({\n        name: 'COPY',\n        pattern: /COPY/i,\n    }),\n    INSERT_DATA: createToken({\n        name: 'INSERT_DATA',\n        pattern: /Insert +Data/i,\n    }),\n    DELETE_DATA: createToken({\n        name: 'DELETE_DATA',\n        pattern: /Delete +Data/i,\n    }),\n    DELETE_WHERE: createToken({\n        name: 'DELETE_WHERE',\n        pattern: /Delete +Where/i,\n    }),\n    WITH: createToken({\n        name: 'WITH',\n        pattern: /WITH/i,\n    }),\n    DELETE: createToken({\n        name: 'DELETE',\n        pattern: /DELETE/i,\n    }),\n    INSERT: createToken({\n        name: 'INSERT',\n        pattern: /INSERT/i,\n    }),\n    USING: createToken({\n        name: 'USING',\n        pattern: /USING/i,\n    }),\n    DEFAULT: createToken({\n        name: 'DEFAULT',\n        pattern: /DEFAULT/i,\n    }),\n    GRAPH: createToken({\n        name: 'GRAPH',\n        pattern: /GRAPH/i,\n    }),\n    ALL: createToken({\n        name: 'ALL',\n        pattern: /ALL/i,\n    }),\n    OPTIONAL: createToken({\n        name: 'OPTIONAL',\n        pattern: /OPTIONAL/i,\n    }),\n    SERVICE: createToken({\n        name: 'SERVICE',\n        pattern: /SERVICE/i,\n    }),\n    BIND: createToken({\n        name: 'BIND',\n        pattern: /BIND/i,\n    }),\n    UNNEST: createToken({\n        name: 'UNNEST',\n        pattern: /UNNEST/i,\n    }),\n    UNDEF: createToken({\n        name: 'UNDEF',\n        pattern: /UNDEF/i,\n    }),\n    MINUS: createToken({\n        name: 'MINUS',\n        pattern: /MINUS/i,\n    }),\n    UNION: createToken({\n        name: 'UNION',\n        pattern: /UNION/i,\n    }),\n    FILTER: createToken({\n        name: 'FILTER',\n        pattern: /FILTER/i,\n    }),\n    STR: createToken({\n        name: 'STR',\n        pattern: /STR/i,\n    }),\n    LANG: createToken({\n        name: 'LANG',\n        pattern: /LANG/i,\n    }),\n    LANGMATCHES: createToken({\n        name: 'LANGMATCHES',\n        pattern: /LANGMATCHES/i,\n    }),\n    DATATYPE: createToken({\n        name: 'DATATYPE',\n        pattern: /DATATYPE/i,\n    }),\n    BOUND: createToken({\n        name: 'BOUND',\n        pattern: /BOUND/i,\n    }),\n    IRI: createToken({\n        name: 'IRI',\n        pattern: /IRI/i,\n    }),\n    URI: createToken({\n        name: 'URI',\n        pattern: /URI/i,\n    }),\n    BNODE: createToken({\n        name: 'BNODE',\n        pattern: /BNODE/i,\n    }),\n    RAND: createToken({\n        name: 'RAND',\n        pattern: /RAND/i,\n    }),\n    ABS: createToken({\n        name: 'ABS',\n        pattern: /ABS/i,\n    }),\n    CEIL: createToken({\n        name: 'CEIL',\n        pattern: /CEIL/i,\n    }),\n    FLOOR: createToken({\n        name: 'FLOOR',\n        pattern: /FLOOR/i,\n    }),\n    ROUND: createToken({\n        name: 'ROUND',\n        pattern: /ROUND/i,\n    }),\n    CONCAT: createToken({\n        name: 'CONCAT',\n        pattern: /CONCAT/i,\n    }),\n    STRLEN: createToken({\n        name: 'STRLEN',\n        pattern: /STRLEN/i,\n    }),\n    UCASE: createToken({\n        name: 'UCASE',\n        pattern: /UCASE/i,\n    }),\n    LCASE: createToken({\n        name: 'LCASE',\n        pattern: /LCASE/i,\n    }),\n    ENCODE_FOR_URI: createToken({\n        name: 'ENCODE_FOR_URI',\n        pattern: /ENCODE_FOR_URI/i,\n    }),\n    CONTAINS: createToken({\n        name: 'CONTAINS',\n        pattern: /CONTAINS/i,\n    }),\n    STRSTARTS: createToken({\n        name: 'STRSTARTS',\n        pattern: /STRSTARTS/i,\n    }),\n    STRENDS: createToken({\n        name: 'STRENDS',\n        pattern: /STRENDS/i,\n    }),\n    STRBEFORE: createToken({\n        name: 'STRBEFORE',\n        pattern: /STRBEFORE/i,\n    }),\n    STRAFTER: createToken({\n        name: 'STRAFTER',\n        pattern: /STRAFTER/i,\n    }),\n    YEAR: createToken({\n        name: 'YEAR',\n        pattern: /YEAR/i,\n    }),\n    MONTH: createToken({\n        name: 'MONTH',\n        pattern: /MONTH/i,\n    }),\n    DAY: createToken({\n        name: 'DAY',\n        pattern: /DAY/i,\n    }),\n    HOURS: createToken({\n        name: 'HOURS',\n        pattern: /HOURS/i,\n    }),\n    MINUTES: createToken({\n        name: 'MINUTES',\n        pattern: /MINUTES/i,\n    }),\n    SECONDS: createToken({\n        name: 'SECONDS',\n        pattern: /SECONDS/i,\n    }),\n    TIMEZONE: createToken({\n        name: 'TIMEZONE',\n        pattern: /TIMEZONE/i,\n    }),\n    TZ: createToken({\n        name: 'TZ',\n        pattern: /TZ/i,\n    }),\n    NOW: createToken({\n        name: 'NOW',\n        pattern: /NOW/i,\n    }),\n    UUID: createToken({\n        name: 'UUID',\n        pattern: /UUID/i,\n    }),\n    STRUUID: createToken({\n        name: 'STRUUID',\n        pattern: /STRUUID/i,\n    }),\n    MD5: createToken({\n        name: 'MD5',\n        pattern: /MD5/i,\n    }),\n    SHA1: createToken({\n        name: 'SHA1',\n        pattern: /SHA1/i,\n    }),\n    SHA256: createToken({\n        name: 'SHA256',\n        pattern: /SHA256/i,\n    }),\n    SHA384: createToken({\n        name: 'SHA384',\n        pattern: /SHA384/i,\n    }),\n    SHA512: createToken({\n        name: 'SHA512',\n        pattern: /SHA512/i,\n    }),\n    COALESCE: createToken({\n        name: 'COALESCE',\n        pattern: /COALESCE/i,\n    }),\n    IF: createToken({\n        name: 'IF',\n        pattern: /IF/i,\n    }),\n    STRLANG: createToken({\n        name: 'STRLANG',\n        pattern: /STRLANG/i,\n    }),\n    STRDT: createToken({\n        name: 'STRDT',\n        pattern: /STRDT/i,\n    }),\n    sameTerm: createToken({\n        name: 'sameTerm',\n        pattern: /sameTerm/i,\n    }),\n    isIRI: createToken({\n        name: 'isIRI',\n        pattern: /isIRI/i,\n    }),\n    isURI: createToken({\n        name: 'isURI',\n        pattern: /isURI/i,\n    }),\n    isBlank: createToken({\n        name: 'isBlank',\n        pattern: /isBlank/i,\n    }),\n    isLiteral: createToken({\n        name: 'isLiteral',\n        pattern: /isLiteral/i,\n    }),\n    isNumeric: createToken({\n        name: 'isNumeric',\n        pattern: /isNumeric/i,\n    }),\n    REGEX: createToken({\n        name: 'REGEX',\n        pattern: /REGEX/i,\n    }),\n    SUBSTR: createToken({\n        name: 'SUBSTR',\n        pattern: /SUBSTR/i,\n    }),\n    REPLACE: createToken({\n        name: 'REPLACE',\n        pattern: /REPLACE/i,\n    }),\n    EXISTS: createToken({\n        name: 'EXISTS',\n        pattern: /EXISTS/i,\n    }),\n    NOT_EXISTS: createToken({\n        name: 'NOT_EXISTS',\n        pattern: /NOT EXISTS/i,\n    }),\n    COUNT: createToken({\n        name: 'COUNT',\n        pattern: /COUNT/i,\n    }),\n    SUM: createToken({\n        name: 'SUM',\n        pattern: /SUM/i,\n    }),\n    MIN: createToken({\n        name: 'MIN',\n        pattern: /MIN/i,\n    }),\n    AVG: createToken({\n        name: 'AVG',\n        pattern: /AVG/i,\n    }),\n    SAMPLE: createToken({\n        name: 'SAMPLE',\n        pattern: /SAMPLE/i,\n    }),\n    GROUP_CONCAT: createToken({\n        name: 'GROUP_CONCAT',\n        pattern: /GROUP_CONCAT/i,\n    }),\n    SEPARATOR: createToken({\n        name: 'SEPARATOR',\n        pattern: /SEPARATOR/i,\n    }),\n    TRUE: createToken({\n        name: 'TRUE',\n        pattern: /TRUE/i,\n    }),\n    FALSE: createToken({\n        name: 'FALSE',\n        pattern: /FALSE/i,\n    }),\n    IN: createToken({\n        name: 'IN',\n        pattern: /IN/i,\n    }),\n    NOT_IN: createToken({\n        name: 'NOT_IN',\n        pattern: /NOT IN/i,\n    }),\n    MAX_LENGTH: MAX_LENGTH,\n    MAX: createToken({\n        name: 'MAX',\n        pattern: /MAX/i,\n        longer_alt: MAX_LENGTH,\n    }),\n};\n","// @ts-ignore: import types for declarations\nimport { createToken } from 'chevrotain';\nimport { STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, PNAME_LN, IRIREF, LANGTAG, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, STRING_LITERAL1, STRING_LITERAL2, NIL, ANON, PNAME_NS, BLANK_NODE_LABEL, VAR1, VAR2, PERCENT, } from 'helpers/matchers';\nvar STRING_LITERAL_LONG1_TOKEN = createToken({\n    name: 'STRING_LITERAL_LONG1',\n    pattern: STRING_LITERAL_LONG1,\n});\nvar STRING_LITERAL_LONG2_TOKEN = createToken({\n    name: 'STRING_LITERAL_LONG2',\n    pattern: STRING_LITERAL_LONG2,\n});\nvar PNAME_LN_TOKEN = createToken({\n    name: 'PNAME_LN',\n    pattern: PNAME_LN,\n});\nexport var terminals = {\n    IRIREF: createToken({\n        name: 'IRIREF',\n        pattern: IRIREF,\n        label: '<http://example.com>',\n    }),\n    LANGTAG: createToken({\n        name: 'LANGTAG',\n        pattern: LANGTAG,\n    }),\n    INTEGER: createToken({\n        name: 'INTEGER',\n        pattern: INTEGER,\n    }),\n    DECIMAL: createToken({\n        name: 'DECIMAL',\n        pattern: DECIMAL,\n    }),\n    DOUBLE: createToken({\n        name: 'DOUBLE',\n        pattern: DOUBLE,\n    }),\n    INTEGER_POSITIVE: createToken({\n        name: 'INTEGER_POSITIVE',\n        pattern: INTEGER_POSITIVE,\n    }),\n    DECIMAL_POSITIVE: createToken({\n        name: 'DECIMAL_POSITIVE',\n        pattern: DECIMAL_POSITIVE,\n    }),\n    DOUBLE_POSITIVE: createToken({\n        name: 'DOUBLE_POSITIVE',\n        pattern: DOUBLE_POSITIVE,\n    }),\n    INTEGER_NEGATIVE: createToken({\n        name: 'INTEGER_NEGATIVE',\n        pattern: INTEGER_NEGATIVE,\n    }),\n    DECIMAL_NEGATIVE: createToken({\n        name: 'DECIMAL_NEGATIVE',\n        pattern: DECIMAL_NEGATIVE,\n    }),\n    DOUBLE_NEGATIVE: createToken({\n        name: 'DOUBLE_NEGATIVE',\n        pattern: DOUBLE_NEGATIVE,\n    }),\n    STRING_LITERAL_LONG1: STRING_LITERAL_LONG1_TOKEN,\n    STRING_LITERAL_LONG2: STRING_LITERAL_LONG2_TOKEN,\n    STRING_LITERAL1: createToken({\n        name: 'STRING_LITERAL1',\n        pattern: STRING_LITERAL1,\n        longer_alt: STRING_LITERAL_LONG1_TOKEN,\n    }),\n    STRING_LITERAL2: createToken({\n        name: 'STRING_LITERAL2',\n        pattern: STRING_LITERAL2,\n        longer_alt: STRING_LITERAL_LONG2_TOKEN,\n    }),\n    NIL: createToken({\n        name: 'NIL',\n        pattern: NIL,\n        label: '()',\n    }),\n    ANON: createToken({\n        name: 'ANON',\n        pattern: ANON,\n        label: '[]',\n    }),\n    PNAME_LN: PNAME_LN_TOKEN,\n    PNAME_NS: createToken({\n        name: 'PNAME_NS',\n        pattern: PNAME_NS,\n        longer_alt: PNAME_LN_TOKEN,\n    }),\n    BLANK_NODE_LABEL: createToken({\n        name: 'BLANK_NODE_LABEL',\n        pattern: BLANK_NODE_LABEL,\n    }),\n    VAR1: createToken({\n        name: 'VAR1',\n        pattern: VAR1,\n        label: '?foo',\n    }),\n    VAR2: createToken({\n        name: 'VAR2',\n        pattern: VAR2,\n        label: '?bar',\n    }),\n    PERCENT: createToken({\n        name: 'PERCENT',\n        pattern: PERCENT,\n    }),\n};\n","// @ts-ignore: import types for declarations\nimport { createToken, Lexer } from 'chevrotain';\nimport { terminals } from './terminals';\nimport { keywords } from './keywords';\nexport var sparqlTokenMap = {\n    IRIREF: terminals.IRIREF,\n    LANGTAG: terminals.LANGTAG,\n    INTEGER: terminals.INTEGER,\n    DECIMAL: terminals.DECIMAL,\n    DOUBLE: terminals.DOUBLE,\n    INTEGER_POSITIVE: terminals.INTEGER_POSITIVE,\n    DECIMAL_POSITIVE: terminals.DECIMAL_POSITIVE,\n    DOUBLE_POSITIVE: terminals.DOUBLE_POSITIVE,\n    INTEGER_NEGATIVE: terminals.INTEGER_NEGATIVE,\n    DECIMAL_NEGATIVE: terminals.DECIMAL_NEGATIVE,\n    DOUBLE_NEGATIVE: terminals.DOUBLE_NEGATIVE,\n    STRING_LITERAL1: terminals.STRING_LITERAL1,\n    STRING_LITERAL2: terminals.STRING_LITERAL2,\n    STRING_LITERAL_LONG1: terminals.STRING_LITERAL_LONG1,\n    STRING_LITERAL_LONG2: terminals.STRING_LITERAL_LONG2,\n    NIL: terminals.NIL,\n    ANON: terminals.ANON,\n    PNAME_NS: terminals.PNAME_NS,\n    PNAME_LN: terminals.PNAME_LN,\n    BLANK_NODE_LABEL: terminals.BLANK_NODE_LABEL,\n    VAR1: terminals.VAR1,\n    VAR2: terminals.VAR2,\n    PERCENT: terminals.PERCENT,\n    Comment: createToken({\n        name: 'Comment',\n        pattern: /#[^\\n]*/,\n        group: 'comments',\n    }),\n    LCurly: createToken({ name: 'LCurly', pattern: '{' }),\n    RCurly: createToken({ name: 'RCurly', pattern: '}' }),\n    LParen: createToken({ name: 'LParen', pattern: '(' }),\n    RParen: createToken({ name: 'RParen', pattern: ')' }),\n    WhiteSpace: createToken({\n        name: 'WhiteSpace',\n        pattern: /\\s+/,\n        group: Lexer.SKIPPED,\n        line_breaks: true,\n    }),\n    Star: createToken({\n        name: 'Star',\n        pattern: '*',\n    }),\n    Unknown: createToken({\n        name: 'Unknown',\n        pattern: /\\w+/,\n    }),\n    Period: createToken({\n        name: 'Period',\n        pattern: '.',\n    }),\n    QuestionMark: createToken({\n        name: 'QuestionMark',\n        pattern: '?',\n    }),\n    Plus: createToken({\n        name: 'Plus',\n        pattern: '+',\n    }),\n    Minus: createToken({\n        name: 'Minus',\n        pattern: '-',\n    }),\n    LBracket: createToken({\n        name: 'LBracket',\n        pattern: '[',\n    }),\n    RBracket: createToken({\n        name: 'RBracket',\n        pattern: ']',\n    }),\n    Semicolon: createToken({\n        name: 'Semicolon',\n        pattern: ';',\n    }),\n    Comma: createToken({\n        name: 'Comma',\n        pattern: ',',\n    }),\n    Pipe: createToken({\n        name: 'Pipe',\n        pattern: '|',\n    }),\n    ForwardSlash: createToken({\n        name: 'ForwardSlash',\n        pattern: '/',\n    }),\n    Caret: createToken({\n        name: 'Caret',\n        pattern: '^',\n    }),\n    DoubleCaret: createToken({\n        name: 'DoubleCaret',\n        pattern: '^^',\n    }),\n    Bang: createToken({\n        name: 'Bang',\n        pattern: '!',\n    }),\n    LogicalOr: createToken({\n        name: 'LogicalOr',\n        pattern: '||',\n    }),\n    LogicalAnd: createToken({\n        name: 'LogicalAnd',\n        pattern: '&&',\n    }),\n    Equals: createToken({\n        name: 'Equals',\n        pattern: '=',\n    }),\n    NotEquals: createToken({\n        name: 'NotEquals',\n        pattern: '!=',\n    }),\n    LessThan: createToken({\n        name: 'LessThan',\n        pattern: '<',\n    }),\n    GreaterThan: createToken({\n        name: 'GreaterThan',\n        pattern: '>',\n    }),\n    LessThanEquals: createToken({\n        name: 'LessThanEquals',\n        pattern: '<=',\n    }),\n    GreaterThanEquals: createToken({\n        name: 'GreaterThanEquals',\n        pattern: '>=',\n    }),\n    SELECT: keywords.SELECT,\n    CONSTRUCT: keywords.CONSTRUCT,\n    DISTINCT: keywords.DISTINCT,\n    START: keywords.START,\n    END: keywords.END,\n    VIA: keywords.VIA,\n    CYCLIC: keywords.CYCLIC,\n    PATHS_SHORTEST: keywords.PATHS_SHORTEST,\n    PATHS_ALL: keywords.PATHS_ALL,\n    PATHS: keywords.PATHS,\n    AS: keywords.AS,\n    WHERE: keywords.WHERE,\n    A: keywords.A,\n    GroupBy: keywords.GroupBy,\n    OrderBy: keywords.OrderBy,\n    By: keywords.By,\n    BASE: keywords.BASE,\n    PREFIX: keywords.PREFIX,\n    DESCRIBE: keywords.DESCRIBE,\n    ASK: keywords.ASK,\n    FROM: keywords.FROM,\n    REDUCED: keywords.REDUCED,\n    NAMED: keywords.NAMED,\n    HAVING: keywords.HAVING,\n    ASC: keywords.ASC,\n    DESC: keywords.DESC,\n    OFFSET: keywords.OFFSET,\n    LIMIT: keywords.LIMIT,\n    VALUES: keywords.VALUES,\n    LOAD: keywords.LOAD,\n    SILENT: keywords.SILENT,\n    INTO: keywords.INTO,\n    CLEAR: keywords.CLEAR,\n    DROP: keywords.DROP,\n    CREATE: keywords.CREATE,\n    ADD: keywords.ADD,\n    TO: keywords.TO,\n    MOVE: keywords.MOVE,\n    COPY: keywords.COPY,\n    INSERT_DATA: keywords.INSERT_DATA,\n    DELETE_DATA: keywords.DELETE_DATA,\n    DELETE_WHERE: keywords.DELETE_WHERE,\n    WITH: keywords.WITH,\n    DELETE: keywords.DELETE,\n    INSERT: keywords.INSERT,\n    USING: keywords.USING,\n    DEFAULT: keywords.DEFAULT,\n    GRAPH: keywords.GRAPH,\n    ALL: keywords.ALL,\n    OPTIONAL: keywords.OPTIONAL,\n    SERVICE: keywords.SERVICE,\n    BIND: keywords.BIND,\n    UNNEST: keywords.UNNEST,\n    UNDEF: keywords.UNDEF,\n    MINUS: keywords.MINUS,\n    UNION: keywords.UNION,\n    FILTER: keywords.FILTER,\n    STR: keywords.STR,\n    LANG: keywords.LANG,\n    LANGMATCHES: keywords.LANGMATCHES,\n    DATATYPE: keywords.DATATYPE,\n    BOUND: keywords.BOUND,\n    IRI: keywords.IRI,\n    URI: keywords.URI,\n    BNODE: keywords.BNODE,\n    RAND: keywords.RAND,\n    ABS: keywords.ABS,\n    CEIL: keywords.CEIL,\n    FLOOR: keywords.FLOOR,\n    ROUND: keywords.ROUND,\n    CONCAT: keywords.CONCAT,\n    STRLEN: keywords.STRLEN,\n    UCASE: keywords.UCASE,\n    LCASE: keywords.LCASE,\n    ENCODE_FOR_URI: keywords.ENCODE_FOR_URI,\n    CONTAINS: keywords.CONTAINS,\n    STRSTARTS: keywords.STRSTARTS,\n    STRENDS: keywords.STRENDS,\n    STRBEFORE: keywords.STRBEFORE,\n    STRAFTER: keywords.STRAFTER,\n    YEAR: keywords.YEAR,\n    MONTH: keywords.MONTH,\n    DAY: keywords.DAY,\n    HOURS: keywords.HOURS,\n    MINUTES: keywords.MINUTES,\n    SECONDS: keywords.SECONDS,\n    TIMEZONE: keywords.TIMEZONE,\n    TZ: keywords.TZ,\n    NOW: keywords.NOW,\n    UUID: keywords.UUID,\n    STRUUID: keywords.STRUUID,\n    MD5: keywords.MD5,\n    SHA1: keywords.SHA1,\n    SHA256: keywords.SHA256,\n    SHA384: keywords.SHA384,\n    SHA512: keywords.SHA512,\n    COALESCE: keywords.COALESCE,\n    IF: keywords.IF,\n    STRLANG: keywords.STRLANG,\n    STRDT: keywords.STRDT,\n    sameTerm: keywords.sameTerm,\n    isIRI: keywords.isIRI,\n    isURI: keywords.isURI,\n    isBlank: keywords.isBlank,\n    isLiteral: keywords.isLiteral,\n    isNumeric: keywords.isNumeric,\n    REGEX: keywords.REGEX,\n    SUBSTR: keywords.SUBSTR,\n    REPLACE: keywords.REPLACE,\n    EXISTS: keywords.EXISTS,\n    NOT_EXISTS: keywords.NOT_EXISTS,\n    COUNT: keywords.COUNT,\n    SUM: keywords.SUM,\n    MIN: keywords.MIN,\n    AVG: keywords.AVG,\n    SAMPLE: keywords.SAMPLE,\n    GROUP_CONCAT: keywords.GROUP_CONCAT,\n    SEPARATOR: keywords.SEPARATOR,\n    TRUE: keywords.TRUE,\n    FALSE: keywords.FALSE,\n    IN: keywords.IN,\n    NOT_IN: keywords.NOT_IN,\n    MAX_LENGTH: keywords.MAX_LENGTH,\n    MAX: keywords.MAX,\n};\nexport var baseTokens = [\n    sparqlTokenMap.NIL,\n    sparqlTokenMap.ANON,\n    sparqlTokenMap.LCurly,\n    sparqlTokenMap.RCurly,\n    sparqlTokenMap.LParen,\n    sparqlTokenMap.RParen,\n    sparqlTokenMap.WhiteSpace,\n    sparqlTokenMap.IRIREF,\n    sparqlTokenMap.LANGTAG,\n    sparqlTokenMap.DOUBLE,\n    sparqlTokenMap.DECIMAL,\n    sparqlTokenMap.INTEGER,\n    sparqlTokenMap.DOUBLE_POSITIVE,\n    sparqlTokenMap.DECIMAL_POSITIVE,\n    sparqlTokenMap.INTEGER_POSITIVE,\n    sparqlTokenMap.DOUBLE_NEGATIVE,\n    sparqlTokenMap.DECIMAL_NEGATIVE,\n    sparqlTokenMap.INTEGER_NEGATIVE,\n    sparqlTokenMap.STRING_LITERAL1,\n    sparqlTokenMap.STRING_LITERAL2,\n    sparqlTokenMap.STRING_LITERAL_LONG1,\n    sparqlTokenMap.STRING_LITERAL_LONG2,\n    sparqlTokenMap.PNAME_NS,\n    sparqlTokenMap.PNAME_LN,\n    sparqlTokenMap.BLANK_NODE_LABEL,\n    sparqlTokenMap.VAR1,\n    sparqlTokenMap.VAR2,\n    sparqlTokenMap.Comment,\n    sparqlTokenMap.SELECT,\n    sparqlTokenMap.CONSTRUCT,\n    sparqlTokenMap.DISTINCT,\n    sparqlTokenMap.Star,\n    sparqlTokenMap.WHERE,\n    sparqlTokenMap.GroupBy,\n    sparqlTokenMap.OrderBy,\n    sparqlTokenMap.By,\n    sparqlTokenMap.Period,\n    sparqlTokenMap.QuestionMark,\n    sparqlTokenMap.Plus,\n    sparqlTokenMap.Minus,\n    sparqlTokenMap.LBracket,\n    sparqlTokenMap.RBracket,\n    sparqlTokenMap.PERCENT,\n    sparqlTokenMap.BASE,\n    sparqlTokenMap.PREFIX,\n    sparqlTokenMap.DESCRIBE,\n    sparqlTokenMap.ASK,\n    sparqlTokenMap.FROM,\n    sparqlTokenMap.REDUCED,\n    sparqlTokenMap.NAMED,\n    sparqlTokenMap.HAVING,\n    sparqlTokenMap.ASC,\n    sparqlTokenMap.DESC,\n    sparqlTokenMap.OFFSET,\n    sparqlTokenMap.LIMIT,\n    sparqlTokenMap.VALUES,\n    sparqlTokenMap.LOAD,\n    sparqlTokenMap.SILENT,\n    sparqlTokenMap.INTO,\n    sparqlTokenMap.AS,\n    sparqlTokenMap.CLEAR,\n    sparqlTokenMap.DROP,\n    sparqlTokenMap.CREATE,\n    sparqlTokenMap.ADD,\n    sparqlTokenMap.TO,\n    sparqlTokenMap.MOVE,\n    sparqlTokenMap.COPY,\n    sparqlTokenMap.INSERT_DATA,\n    sparqlTokenMap.DELETE_DATA,\n    sparqlTokenMap.DELETE_WHERE,\n    sparqlTokenMap.WITH,\n    sparqlTokenMap.DELETE,\n    sparqlTokenMap.INSERT,\n    sparqlTokenMap.USING,\n    sparqlTokenMap.DEFAULT,\n    sparqlTokenMap.GRAPH,\n    sparqlTokenMap.ALL,\n    sparqlTokenMap.OPTIONAL,\n    sparqlTokenMap.SERVICE,\n    sparqlTokenMap.BIND,\n    sparqlTokenMap.UNDEF,\n    sparqlTokenMap.MINUS,\n    sparqlTokenMap.UNION,\n    sparqlTokenMap.FILTER,\n    sparqlTokenMap.LANGMATCHES,\n    sparqlTokenMap.LANG,\n    sparqlTokenMap.DATATYPE,\n    sparqlTokenMap.BOUND,\n    sparqlTokenMap.IRI,\n    sparqlTokenMap.URI,\n    sparqlTokenMap.BNODE,\n    sparqlTokenMap.RAND,\n    sparqlTokenMap.ABS,\n    sparqlTokenMap.CEIL,\n    sparqlTokenMap.FLOOR,\n    sparqlTokenMap.ROUND,\n    sparqlTokenMap.CONCAT,\n    sparqlTokenMap.STRLEN,\n    sparqlTokenMap.UCASE,\n    sparqlTokenMap.LCASE,\n    sparqlTokenMap.ENCODE_FOR_URI,\n    sparqlTokenMap.CONTAINS,\n    sparqlTokenMap.STRSTARTS,\n    sparqlTokenMap.STRENDS,\n    sparqlTokenMap.STRBEFORE,\n    sparqlTokenMap.STRAFTER,\n    sparqlTokenMap.YEAR,\n    sparqlTokenMap.MONTH,\n    sparqlTokenMap.DAY,\n    sparqlTokenMap.HOURS,\n    sparqlTokenMap.MINUTES,\n    sparqlTokenMap.SECONDS,\n    sparqlTokenMap.TIMEZONE,\n    sparqlTokenMap.TZ,\n    sparqlTokenMap.NOW,\n    sparqlTokenMap.UUID,\n    sparqlTokenMap.STRUUID,\n    sparqlTokenMap.MD5,\n    sparqlTokenMap.SHA1,\n    sparqlTokenMap.SHA256,\n    sparqlTokenMap.SHA384,\n    sparqlTokenMap.SHA512,\n    sparqlTokenMap.COALESCE,\n    sparqlTokenMap.IF,\n    sparqlTokenMap.STRLANG,\n    sparqlTokenMap.STRDT,\n    sparqlTokenMap.STR,\n    sparqlTokenMap.sameTerm,\n    sparqlTokenMap.isIRI,\n    sparqlTokenMap.isURI,\n    sparqlTokenMap.isBlank,\n    sparqlTokenMap.isLiteral,\n    sparqlTokenMap.isNumeric,\n    sparqlTokenMap.REGEX,\n    sparqlTokenMap.SUBSTR,\n    sparqlTokenMap.REPLACE,\n    sparqlTokenMap.EXISTS,\n    sparqlTokenMap.NOT_EXISTS,\n    sparqlTokenMap.COUNT,\n    sparqlTokenMap.SUM,\n    sparqlTokenMap.MIN,\n    sparqlTokenMap.MAX_LENGTH,\n    sparqlTokenMap.MAX,\n    sparqlTokenMap.AVG,\n    sparqlTokenMap.SAMPLE,\n    sparqlTokenMap.GROUP_CONCAT,\n    sparqlTokenMap.SEPARATOR,\n    sparqlTokenMap.TRUE,\n    sparqlTokenMap.FALSE,\n    sparqlTokenMap.Semicolon,\n    sparqlTokenMap.Comma,\n    sparqlTokenMap.ForwardSlash,\n    sparqlTokenMap.DoubleCaret,\n    sparqlTokenMap.Caret,\n    sparqlTokenMap.LogicalOr,\n    sparqlTokenMap.Pipe,\n    sparqlTokenMap.LogicalAnd,\n    sparqlTokenMap.NotEquals,\n    sparqlTokenMap.Bang,\n    sparqlTokenMap.Equals,\n    sparqlTokenMap.LessThanEquals,\n    sparqlTokenMap.GreaterThanEquals,\n    sparqlTokenMap.LessThan,\n    sparqlTokenMap.GreaterThan,\n    sparqlTokenMap.IN,\n    sparqlTokenMap.NOT_IN,\n    sparqlTokenMap.A,\n    sparqlTokenMap.Unknown,\n];\nexport var pathsTokens = [\n    sparqlTokenMap.START,\n    sparqlTokenMap.END,\n    sparqlTokenMap.VIA,\n    sparqlTokenMap.CYCLIC,\n    sparqlTokenMap.PATHS_SHORTEST,\n    sparqlTokenMap.PATHS_ALL,\n    sparqlTokenMap.PATHS,\n];\nexport var nonStandardTokens = pathsTokens.concat([sparqlTokenMap.UNNEST]);\nvar indexOfSelect = baseTokens.indexOf(sparqlTokenMap.SELECT);\nexport var stardogSparqlTokens = baseTokens.slice(0, indexOfSelect).concat(nonStandardTokens, baseTokens.slice(indexOfSelect));\nexport var sparqlTokenTypes = baseTokens.concat(nonStandardTokens);\n"],"sourceRoot":""}