{"version":3,"sources":["webpack://millan.[name]/webpack/universalModuleDefinition","webpack://millan.[name]/webpack/bootstrap","webpack://millan.[name]/./src/turtle/TurtleParser.ts","webpack://millan.[name]/./src/sparql/StardogSparqlParser.ts","webpack://millan.[name]/./src/sparql/W3SpecSparqlParser.ts","webpack://millan.[name]/./src/sparql/index.ts","webpack://millan.[name]/./src/srs/tokens.ts","webpack://millan.[name]/./src/srs/visitor.ts","webpack://millan.[name]/./src/turtle/defaultNamespaces.ts","webpack://millan.[name]/./src/srs/customErrors.ts","webpack://millan.[name]/./src/srs/SrsParser.ts","webpack://millan.[name]/./src/srs/index.ts","webpack://millan.[name]/./src/sparql/BaseSparqlParser.ts","webpack://millan.[name]/./src/helpers/cst.ts","webpack://millan.[name]/./src/helpers/unescape.ts","webpack://millan.[name]/./src/turtle/tokens.ts"],"names":["root","factory","exports","module","define","amd","self","this","webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","6","5","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","oldJsonpFunction","slice","__webpack_exports__","TurtleParser","extendStatics","chevrotain__WEBPACK_IMPORTED_MODULE_0__","__extends","b","setPrototypeOf","__proto__","Array","__","constructor","__assign","assign","arguments","_a","turtleTokenTypes","turtleTokenMap","_super","config","tokens","lexerDefinition","performSelfAnalysis","_this","outputCst","recoveryEnabled","namespacesMap","semanticErrors","resetManagedState","tokenize","document","lexer","parse","input","cst","turtleDoc","errors","RULE","MANY","SUBRULE","statement","ARGS","OR","ALT","directive","triples","CONSUME","Period","prefixID","base","sparqlPrefix","sparqlBase","TTL_PREFIX","pnameNsToken","PNAME_NS","iriToken","IRIREF","pnameImageWithoutColon","image","iriImage","TTL_BASE","BASE","PREFIX","OR1","subject","GATE","EmbeddedTriplePattern","predicateObjectList","blankNodePropertyList","OPTION","SUBRULE1","triplesNotEmbedded","LEmbed","REmbed","verb","objectList","Semicolon","iri","BlankNode","collection","predicate","Comma","A","literal","RDFLiteral","NumericLiteral","BooleanLiteral","LBracket","RBracket","LParen","RParen","INTEGER","DECIMAL","DOUBLE","String","LANGTAG","DoubleCaret","TRUE","FALSE","STRING_LITERAL_QUOTE","STRING_LITERAL_SINGLE_QUOTE","STRING_LITERAL_LONG_SINGLE_QUOTE","STRING_LITERAL_LONG_QUOTE","PrefixedName","prefixedNameToken","PNAME_LN","indexOf","message","token","context","ruleStack","getHumanReadableRuleStack","ruleOccurrenceStack","RULE_OCCURRENCE_STACK","resyncedTokens","BLANK_NODE_LABEL","ANON","StardogSparqlParser","_BaseSparqlParser__WEBPACK_IMPORTED_MODULE_0__","chevrotain__WEBPACK_IMPORTED_MODULE_1__","sparqlTokenMap","stardogSparqlTokens","options","Query","OVERRIDE_RULE","SelectQuery","ConstructQuery","DescribeQuery","AskQuery","PathQuery","ValuesClause","PathSpec","DatasetClause","START","PathTerminal","END","Via","MaxLength","SolutionModifier","VIA","GroupGraphPattern","Var","Path","Equals","Constant","PATHS","PATHS_SHORTEST","PATHS_ALL","OPTION1","CYCLIC","GraphPatternNotTriples","GroupOrUnionGraphPattern","OptionalGraphPattern","MinusGraphPattern","GraphGraphPattern","ServiceGraphPattern","Filter","Bind","Unnest","InlineData","TriplesSameSubject","VarOrTermOrEmbeddedTriplePattern","PropertyListNotEmpty","TriplesNode","PropertyList","GraphNode","TriplesSameSubjectPath","TriplesNodePath","PropertyListPath","PropertyListPathNotEmpty","GraphNodePath","VarOrBlankNodeOrIriOrLit","Verb","GraphTerm","BIND","ExpressionOrEmbeddedTriplePattern","AS","Expression","UNNEST","BuiltInCall","Aggregate","BuiltInCall_STR","BuiltInCall_LANG","BuiltInCall_LANGMATCHES","BuiltInCall_DATATYPE","BuiltInCall_BOUND","BuiltInCall_IRI","BuiltInCall_URI","BuiltInCall_BNODE","BuiltInCall_RAND","BuiltInCall_ABS","BuiltInCall_CEIL","BuiltInCall_FLOOR","BuiltInCall_ROUND","BuiltInCall_CONCAT","SubstringExpression","BuiltInCall_STRLEN","StrReplaceExpression","BuiltInCall_UCASE","BuiltInCall_LCASE","BuiltInCall_ENCODE_FOR_URI","BuiltInCall_CONTAINS","BuiltInCall_STRSTARTS","BuiltInCall_STRENDS","BuiltInCall_STRBEFORE","BuiltInCall_STRAFTER","BuiltInCall_YEAR","BuiltInCall_MONTH","BuiltInCall_DAY","BuiltInCall_HOURS","BuiltInCall_MINUTES","BuiltInCall_SECONDS","BuiltInCall_TIMEZONE","BuiltInCall_TZ","BuiltInCall_NOW","BuiltInCall_UUID","BuiltInCall_STRUUID","BuiltInCall_MD5","BuiltInCall_SHA1","BuiltInCall_SHA256","BuiltInCall_SHA384","BuiltInCall_SHA512","BuiltInCall_COALESCE","BuiltInCall_IF","BuiltInCall_STRLANG","BuiltInCall_STRDT","BuiltInCall_sameTerm","BuiltInCall_isIRI","BuiltInCall_isURI","BuiltInCall_isBLANK","BuiltInCall_isLITERAL","BuiltInCall_isNUMERIC","RegexExpression","ExistsFunction","NotExistsFunction","StardogOrCustomFunction","Unknown","ExpressionList","ConstructTemplate","LCurly","Quads","RCurly","baseTokens","W3SpecSparqlParser_W3SpecSparqlParser","W3SpecSparqlParser","api","BaseSparqlParser","sparqlTokens","keywords","terminals","multiModeLexerDefinition","srsTokenMap","srsTokenTypes","LexerMode","_helpers_matchers__WEBPACK_IMPORTED_MODULE_1__","_b","Rule","pattern","If","push_mode","IFCLAUSE","Then","THENCLAUSE","EndThen","pop_mode","text","startOffset","cursor","unclosedBraceCount","exec","line_breaks","TriplesBlock","indexOfIriRef","modes","TURTLE","concat","WhiteSpace","defaultMode","defaultNamespacesMap","freeze","reduce","prefix","getSparqlSrsVisitor","BaseVisitor","SparqlSrsVisitor","groupGraphPatterns","triplesBlocks","IfClause","ctx","cstInputTokens","$storePlaceholderTokenReplacement","tokenStore","originalTokenContext","subParserRule","sparqlParser","parseGroupGraphPattern","ThenClause","parseTriplesBlock","stripWrappers","originalToken","replacement","$getPlaceholderTokenReplacement","parseResult","frontPadding","latestEndOffset","latestEndLine","linesBetweenTokens","startLine","untokenizedSpaceBetweenTokens","repeat","Math","max","split","forEach","line","idx","endOffset","endLine","parseImage","$getGroupGraphPatterns","$getTriplesBlocks","$resetState","sparql","validateVisitor","reduceVisitorItemErrors","acc","item","findAndSwapPlaceholders","node","parentNode","visitorItems","matchingVisitorItem","find","visitorItem","children","customErrors_a","subExpressionMatcher","defaultEarlyAbortTest","disallowedSparqlTokenNameToRuleMap","EXISTS","tokenName","NOT_EXISTS","NOW","disallowedSparqlTokenNames","keys","disallowedSparqlLiteralTokenNames","DOUBLE_POSITIVE","DECIMAL_POSITIVE","INTEGER_POSITIVE","DOUBLE_NEGATIVE","DECIMAL_NEGATIVE","INTEGER_NEGATIVE","STRING_LITERAL1","STRING_LITERAL2","STRING_LITERAL_LONG1","STRING_LITERAL_LONG2","map","isCstNodeTraverseContext","Boolean","getCustomErrorRuleStack","traverseCtx","fullCtx","startRuleNames","topLevelSubParserRuleName","earlyAbortTest","stackUnwindingPointer","helpers_cst","includes","parentCtx","unshift","getCustomIRecognitionException","getNoPrefixError","subParserRuleName","getDisallowedTokenError","tokenType","getDisallowedLiteralError","foundPropertyListPathNotEmptyCtx","didFindSubExpressionWithMultipleChildren","errorContext","errorRuleStack","stackCtx","nodeName","test","isExpression","isTriplesBlock","isBoundExpressionWithLiteralSubject","parentNodeName","isParentBindOrBoundExpressionOrEmbeddedTriplePattern","isTriplesBlockSubject","SrsParser_extends","SrsParser_assign","SrsParser_a","SrsParser_SrsParser","SrsParser","baseNamespacesMap","visitCst","sparqlSrsVisitor","BaseSrsVisitor","getBaseCstVisitorConstructorWithDefaults","visit","getSparqlRulesFromVisitor","setBaseNamespaces","newBaseNamespaces","SrsDoc","next","currentTokenName","some","error","addIfClauseErrorsToErrors","addThenClauseErrorsToErrors","RuleDoc","MANY1","RuleClause","srsTokens","log","args","_i","tokenVocab","entryRule","SparqlDoc","Prologue","QueryUnit","UpdateUnit","MAX_LENGTH","Update","AT_LEAST_ONE","BaseDecl","PrefixDecl","SelectClause","WhereClause","SubSelect","SELECT","DISTINCT","REDUCED","OR2","Star","CONSTRUCT","WHERE","TriplesTemplate","DESCRIBE","VarOrIri","ASK","FROM","DefaultGraphClause","NamedGraphClause","SourceSelector","NAMED","GroupClause","HavingClause","OPTION2","OrderClause","OPTION3","LimitOffsetClause","GROUP_BY","GroupCondition","FunctionCall","HAVING","HavingCondition","Constraint","ORDER_BY","OrderCondition","ASC","DESC","BrackettedExpression","LimitClause","OffsetClause","OFFSET","LIMIT","VALUES","DataBlock","Update1","Load","Clear","Drop","Add","Move","Copy","Create","InsertData","DeleteData","DeleteWhere","Modify","LOAD","SILENT","INTO","GraphRef","CLEAR","GraphRefAll","DROP","CREATE","ADD","GraphOrDefault","TO","MOVE","COPY","INSERT_DATA","QuadData","DELETE_DATA","DELETE_WHERE","QuadPattern","WITH","DeleteClause","InsertClause","UsingClause","DELETE","INSERT","USING","DEFAULT","GRAPH","ALL","QuadsNotTriples","GroupGraphPatternSub","OPTIONAL","SERVICE","InlineDataOneVar","InlineDataFull","DataBlockValue","NIL","CONSUME1","MANY2","UNDEF","MINUS","UNION","FILTER","ArgList","ConstructTriples","VarOrTerm","ObjectList","AT_LEAST_ONE_SEP","SEP","DEF","VerbPath","VerbSimple","ObjectListPath","ObjectPath","PathAlternative","Pipe","PathSequence","ForwardSlash","PathEltOrInverse","PathElt","PathPrimary","PathMod","Caret","QuestionMark","Plus","Bang","PathNegatedPropertySet","PathOneInPropertySet","MANY_SEP","Integer","Collection","BlankNodePropertyList","CollectionPath","BlankNodePropertyListPath","VAR1","VAR2","ConditionalOrExpression","LogicalOr","ConditionalAndExpression","LogicalAnd","ValueLogical","RelationalExpression","NumericExpression","NotEquals","LessThan","GreaterThan","LessThanEquals","GreaterThanEquals","IN","NOT_IN","AdditiveExpression","MultiplicativeExpression","Minus","NumericLiteralPositive","NumericLiteralNegative","OR3","OR4","UnaryExpression","SUBRULE2","PrimaryExpression","SUBRULE3","iriOrFunction","STR","LANG","LANGMATCHES","DATATYPE","BOUND","IRI","URI","BNODE","RAND","ABS","CEIL","FLOOR","ROUND","CONCAT","STRLEN","UCASE","LCASE","ENCODE_FOR_URI","CONTAINS","STRSTARTS","STRENDS","STRBEFORE","STRAFTER","YEAR","MONTH","DAY","HOURS","MINUTES","SECONDS","TIMEZONE","TZ","UUID","STRUUID","MD5","SHA1","SHA256","SHA384","SHA512","COALESCE","IF","STRLANG","STRDT","sameTerm","isIRI","isURI","isBLANK","isLITERAL","isNUMERIC","REGEX","SUBSTR","REPLACE","CONSUME2","Count","COUNT","CONSUME3","Sum","SUM","Min","MIN","Max","MAX","Avg","AVG","Sample","SAMPLE","GroupConcat","GROUP_CONCAT","SEPARATOR","NumericLiteralUnsigned","traverse","unsafeTraverse","isCstNode","_traverse","TraverseContext","visitSafely","childType","child","childCtx","transformedCtx","nextCtx","escapeSequence","escapeReplacements","\\","'","\"","f","_","~",".","-","!","$","&","(",")","*","+",",",";","=","/","?","#","@","%","unescapedStringLiteralQuote","unescapedStringLiteralSingleQuote","stringLiteralQuote","stringLiteralSingleQuote","stringLiteralLongQuote","stringLiteralLongSingleQuote","illegalIriChars","escapedIri","unescapedIri","unescape_unescape","replace","unicode4","unicode8","escapedChar","fromCharCode","parseInt","charCode","Error","unicodeRegexp","Comment","group","regex","and","option","or","matchers","EXPONENT","ECHAR","PLX","PERCENT","HEX","match","textToMatch","UCHAR","PN_CHARS_BASE","PN_CHARS_U","PN_CHARS","PN_PREFIX","PN_LOCAL","PN_LOCAL_ESC"],"mappings":"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","file":"millan.srs.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"srs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"srs\"] = factory();\n\telse\n\t\troot[\"millan\"] = root[\"millan\"] || {}, root[\"millan\"][\"srs\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t6: 0,\n \t\t5: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([65,0,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a = require('./tokens'), turtleTokenTypes = _a.turtleTokenTypes, turtleTokenMap = _a.turtleTokenMap;\nimport { Parser, Lexer, } from 'chevrotain';\nvar TurtleParser = /** @class */ (function (_super) {\n    __extends(TurtleParser, _super);\n    function TurtleParser(config, tokens, lexerDefinition, performSelfAnalysis) {\n        if (config === void 0) { config = {}; }\n        if (tokens === void 0) { tokens = turtleTokenTypes; }\n        if (lexerDefinition === void 0) { lexerDefinition = tokens; }\n        if (performSelfAnalysis === void 0) { performSelfAnalysis = true; }\n        var _this = _super.call(this, tokens, __assign({ outputCst: true, recoveryEnabled: true }, config)) || this;\n        // Parsing Turtle requires that the parser keep a map of namespaces in state.\n        // Empty prefixes, for example, are allowed only if the empty prefix has been\n        // added to the namespaces map (for now, that's all this tracks). (TODO: We\n        // might want to use a visitor for this, but I'm doing it quick-and-dirty for\n        // now.)\n        // See here: https://www.w3.org/TR/turtle/#handle-PNAME_LN\n        _this.namespacesMap = {};\n        _this.semanticErrors = [];\n        // Clears the state that we have to manage on our own for each parse (see\n        // above for details).\n        _this.resetManagedState = function () {\n            _this.namespacesMap = {};\n            _this.semanticErrors = [];\n        };\n        _this.tokenize = function (document) {\n            return _this.lexer.tokenize(document).tokens;\n        };\n        // NOTE: This parser can parse in two modes, 'standard' and 'stardog'. The\n        // latter includes non-standard features like embedded triples patterns (edge\n        // properties).\n        _this.parse = function (document, mode) {\n            if (mode === void 0) { mode = 'standard'; }\n            _this.input = _this.lexer.tokenize(document).tokens;\n            var cst = _this.turtleDoc(0, [mode]);\n            // Next two items are copied so that they can be returned/held after parse\n            // state is cleared.\n            var errors = _this.errors.slice();\n            var semanticErrors = _this.semanticErrors.slice();\n            _this.resetManagedState();\n            return {\n                errors: errors,\n                semanticErrors: semanticErrors,\n                cst: cst,\n            };\n        };\n        _this.turtleDoc = _this.RULE('turtleDoc', function (mode) {\n            _this.MANY(function () { return _this.SUBRULE(_this.statement, { ARGS: [mode] }); });\n        });\n        _this.statement = _this.RULE('statement', function (mode) {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.directive); } },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.triples, { ARGS: [mode] });\n                        _this.CONSUME(turtleTokenMap.Period);\n                    },\n                },\n            ]);\n        });\n        _this.directive = _this.RULE('directive', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.prefixID); } },\n                { ALT: function () { return _this.SUBRULE(_this.base); } },\n                { ALT: function () { return _this.SUBRULE(_this.sparqlPrefix); } },\n                { ALT: function () { return _this.SUBRULE(_this.sparqlBase); } },\n            ]);\n        });\n        _this.prefixID = _this.RULE('prefixID', function () {\n            _this.CONSUME(turtleTokenMap.TTL_PREFIX);\n            var pnameNsToken = _this.CONSUME(turtleTokenMap.PNAME_NS);\n            var iriToken = _this.CONSUME(turtleTokenMap.IRIREF);\n            var pnameImageWithoutColon = pnameNsToken.image.slice(0, -1);\n            var iriImage = iriToken.image;\n            _this.namespacesMap[pnameImageWithoutColon] = iriImage;\n            _this.CONSUME(turtleTokenMap.Period);\n        });\n        _this.base = _this.RULE('base', function () {\n            _this.CONSUME(turtleTokenMap.TTL_BASE);\n            _this.CONSUME(turtleTokenMap.IRIREF);\n            _this.CONSUME(turtleTokenMap.Period);\n        });\n        _this.sparqlBase = _this.RULE('sparqlBase', function () {\n            _this.CONSUME(turtleTokenMap.BASE);\n            _this.CONSUME(turtleTokenMap.IRIREF);\n        });\n        _this.sparqlPrefix = _this.RULE('sparqlPrefix', function () {\n            _this.CONSUME(turtleTokenMap.PREFIX);\n            var pnameNsToken = _this.CONSUME(turtleTokenMap.PNAME_NS);\n            var iriToken = _this.CONSUME(turtleTokenMap.IRIREF);\n            var pnameImageWithoutColon = pnameNsToken.image.slice(0, -1);\n            var iriImage = iriToken.image;\n            _this.namespacesMap[pnameImageWithoutColon] = iriImage;\n        });\n        _this.triples = _this.RULE('triples', function (mode) {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.OR1([\n                            {\n                                ALT: function () { return _this.SUBRULE(_this.subject); },\n                            },\n                            {\n                                GATE: function () { return mode === 'stardog'; },\n                                ALT: function () { return _this.SUBRULE(_this.EmbeddedTriplePattern); },\n                            },\n                        ]);\n                        _this.SUBRULE(_this.predicateObjectList);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.blankNodePropertyList);\n                        _this.OPTION(function () { return _this.SUBRULE1(_this.predicateObjectList); });\n                    },\n                },\n            ]);\n        });\n        // NOTE: Not part of Turtle spec. Part of Stardog's support for edge\n        // properties/embedded triples/a subset of RDF*.\n        _this.triplesNotEmbedded = _this.RULE('triplesNotEmbedded', function () {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.subject);\n                        _this.SUBRULE(_this.predicateObjectList);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.blankNodePropertyList);\n                        _this.OPTION(function () { return _this.SUBRULE1(_this.predicateObjectList); });\n                    },\n                },\n            ]);\n        });\n        // NOTE: Not part of Turtle spec. Part of Stardog's support for edge\n        // properties/embedded triples/a subset of RDF*.\n        // ALSO NOTE: Intentionally does not conform to the RDF* spec. Stardog does\n        // not allow nesting of embedded triples.\n        _this.EmbeddedTriplePattern = _this.RULE('EmbeddedTriplePattern', function () {\n            _this.CONSUME(turtleTokenMap.LEmbed);\n            _this.SUBRULE(_this.triplesNotEmbedded);\n            _this.CONSUME(turtleTokenMap.REmbed);\n        });\n        _this.predicateObjectList = _this.RULE('predicateObjectList', function () {\n            _this.SUBRULE(_this.verb);\n            _this.SUBRULE(_this.objectList);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.SUBRULE1(_this.verb);\n                    _this.SUBRULE1(_this.objectList);\n                });\n            });\n        });\n        _this.subject = _this.RULE('subject', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.collection); } },\n            ]);\n        });\n        _this.predicate = _this.RULE('predicate', function () {\n            _this.SUBRULE(_this.iri);\n        });\n        _this.objectList = _this.RULE('objectList', function () {\n            _this.SUBRULE(_this.object);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Comma);\n                _this.SUBRULE1(_this.object);\n            });\n        });\n        _this.verb = _this.RULE('verb', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.predicate); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.A); } },\n            ]);\n        });\n        _this.literal = _this.RULE('literal', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n            ]);\n        });\n        _this.blankNodePropertyList = _this.RULE('blankNodePropertyList', function () {\n            _this.CONSUME(turtleTokenMap.LBracket);\n            _this.SUBRULE(_this.predicateObjectList);\n            _this.CONSUME(turtleTokenMap.RBracket);\n        });\n        _this.object = _this.RULE('object', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.collection); } },\n                { ALT: function () { return _this.SUBRULE(_this.blankNodePropertyList); } },\n                { ALT: function () { return _this.SUBRULE(_this.literal); } },\n            ]);\n        });\n        _this.collection = _this.RULE('collection', function () {\n            _this.CONSUME(turtleTokenMap.LParen);\n            _this.MANY(function () { return _this.SUBRULE(_this.object); });\n            _this.CONSUME(turtleTokenMap.RParen);\n        });\n        _this.NumericLiteral = _this.RULE('NumericLiteral', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.INTEGER); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.DECIMAL); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.DOUBLE); } },\n            ]);\n        });\n        _this.RDFLiteral = _this.RULE('RDFLiteral', function () {\n            _this.SUBRULE(_this.String);\n            _this.OPTION(function () {\n                _this.OR([\n                    { ALT: function () { return _this.CONSUME(turtleTokenMap.LANGTAG); } },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(turtleTokenMap.DoubleCaret);\n                            _this.SUBRULE(_this.iri);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.BooleanLiteral = _this.RULE('BooleanLiteral', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.TRUE); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.FALSE); } },\n            ]);\n        });\n        _this.String = _this.RULE('String', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_QUOTE); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_SINGLE_QUOTE); } },\n                {\n                    ALT: function () {\n                        return _this.CONSUME(turtleTokenMap.STRING_LITERAL_LONG_SINGLE_QUOTE);\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_LONG_QUOTE); } },\n            ]);\n        });\n        _this.iri = _this.RULE('iri', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.IRIREF); } },\n                { ALT: function () { return _this.SUBRULE(_this.PrefixedName); } },\n            ]);\n        });\n        _this.PrefixedName = _this.RULE('PrefixedName', function () {\n            var prefixedNameToken = _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.PNAME_LN); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.PNAME_NS); } },\n            ]);\n            var pnameNsImage = prefixedNameToken.image.slice(0, prefixedNameToken.image.indexOf(':'));\n            if (!(pnameNsImage in _this.namespacesMap)) {\n                _this.semanticErrors.push({\n                    name: 'NoNamespacePrefixError',\n                    message: 'A prefix was used for which there was no namespace defined.',\n                    token: prefixedNameToken,\n                    context: {\n                        ruleStack: _this.getHumanReadableRuleStack(),\n                        ruleOccurrenceStack: _this.RULE_OCCURRENCE_STACK.slice(),\n                    },\n                    resyncedTokens: [],\n                });\n            }\n        });\n        _this.BlankNode = _this.RULE('BlankNode', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.BLANK_NODE_LABEL); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.ANON); } },\n            ]);\n        });\n        _this.lexer = new Lexer(lexerDefinition);\n        if (performSelfAnalysis) {\n            Parser.performSelfAnalysis(_this);\n        }\n        return _this;\n    }\n    return TurtleParser;\n}(Parser));\nexport { TurtleParser };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar _a = require('./tokens'), sparqlTokenMap = _a.sparqlTokenMap, stardogSparqlTokens = _a.stardogSparqlTokens;\nimport { BaseSparqlParser } from './BaseSparqlParser';\nimport { Parser } from 'chevrotain';\nvar StardogSparqlParser = /** @class */ (function (_super) {\n    __extends(StardogSparqlParser, _super);\n    function StardogSparqlParser(options) {\n        var _this = _super.call(this, options, stardogSparqlTokens) || this;\n        _this.Query = _this.OVERRIDE_RULE('Query', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.SelectQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.ConstructQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.DescribeQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.AskQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.PathQuery); } },\n            ]);\n            _this.SUBRULE(_this.ValuesClause);\n        });\n        _this.PathQuery = _this.RULE('PathQuery', function () {\n            _this.SUBRULE(_this.PathSpec);\n            _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n            _this.CONSUME(sparqlTokenMap.START);\n            _this.SUBRULE(_this.PathTerminal);\n            _this.CONSUME(sparqlTokenMap.END);\n            _this.SUBRULE1(_this.PathTerminal);\n            _this.SUBRULE(_this.Via);\n            _this.OPTION(function () { return _this.SUBRULE(_this.MaxLength); });\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.Via = _this.RULE('Via', function () {\n            _this.CONSUME(sparqlTokenMap.VIA);\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.GroupGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                { ALT: function () { return _this.SUBRULE(_this.Path); } },\n            ]);\n        });\n        _this.PathTerminal = _this.RULE('PathTerminal', function () {\n            _this.SUBRULE(_this.Var);\n            _this.OPTION(function () {\n                _this.OR([\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.Equals);\n                            _this.SUBRULE(_this.Constant);\n                        },\n                    },\n                    { ALT: function () { return _this.SUBRULE(_this.GroupGraphPattern); } },\n                ]);\n            });\n        });\n        _this.PathSpec = _this.RULE('PathSpec', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.PATHS); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.PATHS_SHORTEST); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.PATHS_ALL); } },\n            ]);\n            _this.OPTION1(function () { return _this.CONSUME(sparqlTokenMap.CYCLIC); });\n        });\n        _this.GraphPatternNotTriples = _this.OVERRIDE_RULE('GraphPatternNotTriples', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.GroupOrUnionGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.OptionalGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.MinusGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.GraphGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.ServiceGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.Filter); } },\n                { ALT: function () { return _this.SUBRULE(_this.Bind); } },\n                { ALT: function () { return _this.SUBRULE(_this.Unnest); } },\n                { ALT: function () { return _this.SUBRULE(_this.InlineData); } },\n            ]);\n        });\n        _this.TriplesSameSubject = _this.OVERRIDE_RULE('TriplesSameSubject', function () {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.VarOrTermOrEmbeddedTriplePattern);\n                        _this.SUBRULE(_this.PropertyListNotEmpty);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.TriplesNode);\n                        _this.SUBRULE(_this.PropertyList);\n                    },\n                },\n            ]);\n        });\n        _this.Object = _this.OVERRIDE_RULE('Object', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.GraphNode); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.EmbeddedTriplePattern); },\n                },\n            ]);\n        });\n        _this.TriplesSameSubjectPath = _this.OVERRIDE_RULE('TriplesSameSubjectPath', function () {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.TriplesNodePath);\n                        _this.SUBRULE(_this.PropertyListPath);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.VarOrTermOrEmbeddedTriplePattern);\n                        _this.SUBRULE(_this.PropertyListPathNotEmpty);\n                    },\n                },\n            ]);\n        });\n        _this.GraphNodePath = _this.OVERRIDE_RULE('GraphNodePath', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VarOrTermOrEmbeddedTriplePattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.TriplesNodePath); } },\n            ]);\n        });\n        // NOTE: Intentionally does not conform to the SPARQL* spec. Stardog does not\n        // allow nesting of embedded triples.\n        _this.EmbeddedTriplePattern = _this.RULE('EmbeddedTriplePattern', function () {\n            _this.CONSUME(sparqlTokenMap.LEmbed);\n            _this.SUBRULE(_this.VarOrBlankNodeOrIriOrLit);\n            _this.SUBRULE(_this.Verb);\n            _this.SUBRULE1(_this.VarOrBlankNodeOrIriOrLit);\n            _this.CONSUME(sparqlTokenMap.REmbed);\n        });\n        _this.VarOrTermOrEmbeddedTriplePattern = _this.RULE('VarOrTermOrEmbeddedTriplePattern', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                { ALT: function () { return _this.SUBRULE(_this.GraphTerm); } },\n                { ALT: function () { return _this.SUBRULE(_this.EmbeddedTriplePattern); } },\n            ]);\n        });\n        _this.Bind = _this.OVERRIDE_RULE('Bind', function () {\n            _this.CONSUME(sparqlTokenMap.BIND);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.ExpressionOrEmbeddedTriplePattern);\n            _this.CONSUME(sparqlTokenMap.AS);\n            _this.SUBRULE(_this.Var);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.ExpressionOrEmbeddedTriplePattern = _this.RULE('ExpressionOrEmbeddedTriplePattern', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.Expression); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.EmbeddedTriplePattern); },\n                },\n            ]);\n        });\n        // NOTE: This is nearly equivalent to VarOrTerm, but excludes NIL.\n        _this.VarOrBlankNodeOrIriOrLit = _this.RULE('VarOrBlankNodeOrIriOrLit', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n            ]);\n        });\n        _this.Unnest = _this.RULE('Unnest', function () {\n            _this.CONSUME(sparqlTokenMap.UNNEST);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.AS);\n            _this.SUBRULE(_this.Var);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall = _this.OVERRIDE_RULE('BuiltInCall', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Aggregate); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LANG); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LANGMATCHES); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_DATATYPE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_BOUND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_IRI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_URI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_BNODE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_RAND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ABS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CEIL); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_FLOOR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ROUND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CONCAT); } },\n                { ALT: function () { return _this.SUBRULE(_this.SubstringExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRLEN); } },\n                { ALT: function () { return _this.SUBRULE(_this.StrReplaceExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_UCASE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LCASE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ENCODE_FOR_URI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CONTAINS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRSTARTS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRENDS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRBEFORE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRAFTER); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_YEAR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MONTH); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_DAY); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_HOURS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MINUTES); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SECONDS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_TIMEZONE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_TZ); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_NOW); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_UUID); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRUUID); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MD5); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA1); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA256); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA384); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA512); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_COALESCE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_IF); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRLANG); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRDT); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_sameTerm); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isIRI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isURI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isBLANK); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isLITERAL); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isNUMERIC); } },\n                { ALT: function () { return _this.SUBRULE(_this.RegexExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.ExistsFunction); } },\n                { ALT: function () { return _this.SUBRULE(_this.NotExistsFunction); } },\n                // Stardog has some additional built-in functions, and supports user-defined custom functions\n                { ALT: function () { return _this.SUBRULE(_this.StardogOrCustomFunction); } },\n            ]);\n        });\n        _this.StardogOrCustomFunction = _this.RULE('StardogOrCustomFunction', function () {\n            _this.CONSUME(sparqlTokenMap.Unknown);\n            _this.SUBRULE(_this.ExpressionList);\n        });\n        _this.ConstructTemplate = _this.OVERRIDE_RULE('ConstructTemplate', function () {\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.OPTION(function () {\n                // Stardog supports the request of Quads in a Construct template. See Stardog issue #675\n                return _this.SUBRULE(_this.Quads);\n            });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        Parser.performSelfAnalysis(_this);\n        return _this;\n    }\n    return StardogSparqlParser;\n}(BaseSparqlParser));\nexport { StardogSparqlParser };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar baseTokens = require('./tokens').baseTokens;\nimport { BaseSparqlParser } from './BaseSparqlParser';\nimport { Parser } from 'chevrotain';\nvar W3SpecSparqlParser = /** @class */ (function (_super) {\n    __extends(W3SpecSparqlParser, _super);\n    function W3SpecSparqlParser(options) {\n        var _this = _super.call(this, options, baseTokens) || this;\n        Parser.performSelfAnalysis(_this);\n        return _this;\n    }\n    return W3SpecSparqlParser;\n}(BaseSparqlParser));\nexport { W3SpecSparqlParser };\n","export * from './BaseSparqlParser';\nexport * from './W3SpecSparqlParser';\nexport * from './StardogSparqlParser';\n// Convenience imports/exports that aren't core functionality:\n// NOTE: Tokens MUST be imported using CommonJS syntax; see here: https://github.com/SAP/chevrotain/issues/345\nexport var sparqlTokens = require('./tokens');\nexport var keywords = require('./keywords').keywords;\nexport var terminals = require('./terminals').terminals;\n","var _a;\nvar _b = require('../turtle/tokens'), turtleTokenTypes = _b.turtleTokenTypes, turtleTokenMap = _b.turtleTokenMap;\nvar sparqlTokenMap = require('../sparql/tokens').sparqlTokenMap;\nimport { createToken } from 'chevrotain';\nimport { CATCH_ALL_AT_LEAST_ONE } from '../helpers/matchers';\nvar LexerMode;\n(function (LexerMode) {\n    LexerMode[\"TURTLE\"] = \"turtle\";\n    LexerMode[\"IFCLAUSE\"] = \"ifclause\";\n    LexerMode[\"THENCLAUSE\"] = \"thenclause\";\n})(LexerMode || (LexerMode = {}));\nvar Rule = createToken({\n    name: 'Rule',\n    pattern: /rule/i,\n});\nvar If = createToken({\n    name: 'If',\n    pattern: /if/i,\n    push_mode: LexerMode.IFCLAUSE,\n});\nvar Then = createToken({\n    name: 'Then',\n    pattern: /then/i,\n    push_mode: LexerMode.THENCLAUSE,\n});\nvar EndThen = createToken({\n    name: 'EndThen',\n    pattern: '}',\n    pop_mode: true,\n});\n// NOTE: Not a SPARQL GroupGraphPattern. Rather, a placeholder for one. We have\n// to let the SRS parser create this token, then replace with a token returned\n// by the SPARQL sub-parser.\nvar GroupGraphPattern = createToken({\n    name: 'GroupGraphPattern',\n    pattern: function (text, startOffset) {\n        if (startOffset === void 0) { startOffset = 0; }\n        // Capture a single brace and then anything up to its closing brace.\n        if (text[startOffset] !== '{') {\n            return null;\n        }\n        var unclosedBraceCount = 1;\n        var cursor;\n        for (cursor = startOffset + 1; cursor < text.length && unclosedBraceCount > 0; cursor++) {\n            if (text[cursor] === '{') {\n                unclosedBraceCount++;\n            }\n            else if (text[cursor] === '}') {\n                unclosedBraceCount--;\n            }\n        }\n        if (unclosedBraceCount > 0) {\n            return null;\n        }\n        return CATCH_ALL_AT_LEAST_ONE.exec(text.slice(startOffset, cursor));\n    },\n    line_breaks: true,\n    pop_mode: true,\n});\n// NOTE: Not a SPARQL TriplesBlock. Rather, a placeholder for one. We have\n// to let the SRS parser create this token, then replace with a token returned\n// by the SPARQL sub-parser.\nvar TriplesBlock = createToken({\n    name: 'TriplesBlock',\n    pattern: /[^{}]+/,\n    line_breaks: true,\n});\nvar indexOfIriRef = turtleTokenTypes.indexOf(turtleTokenMap.IRIREF);\nexport var multiModeLexerDefinition = {\n    modes: (_a = {},\n        _a[LexerMode.TURTLE] = turtleTokenTypes.slice(0, indexOfIriRef + 1).concat([\n            Rule,\n            If,\n            Then\n        ], turtleTokenTypes.slice(indexOfIriRef + 1)),\n        _a[LexerMode.IFCLAUSE] = [turtleTokenMap.WhiteSpace, GroupGraphPattern],\n        _a[LexerMode.THENCLAUSE] = [\n            turtleTokenMap.WhiteSpace,\n            sparqlTokenMap.LCurly,\n            EndThen,\n            TriplesBlock,\n        ],\n        _a),\n    defaultMode: LexerMode.TURTLE,\n};\nexport var srsTokenMap = {\n    Rule: Rule,\n    If: If,\n    Then: Then,\n    EndThen: EndThen,\n    GroupGraphPattern: GroupGraphPattern,\n    TriplesBlock: TriplesBlock,\n};\nexport var srsTokenTypes = [\n    Rule,\n    If,\n    Then,\n    EndThen,\n    sparqlTokenMap.LCurly\n].concat(turtleTokenTypes, [\n    GroupGraphPattern,\n    TriplesBlock,\n]);\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { StardogSparqlParser } from '../sparql';\n// Returns a custom visitor that extends the BaseVisitor for the SRS parser.\n// When the visitor encounters an SRS `IfClause` or an SRS `ThenClause`, it\n// delegates parsing of the block to the existing SPARQL parser's relevant\n// sub-rule (GroupGraphPattern or TriplesBlock).\nexport var getSparqlSrsVisitor = function (BaseVisitor) {\n    var SparqlSrsVisitor = /** @class */ (function (_super) {\n        __extends(SparqlSrsVisitor, _super);\n        function SparqlSrsVisitor() {\n            var _this = _super.call(this) || this;\n            _this.groupGraphPatterns = [];\n            _this.triplesBlocks = [];\n            // Get and store the SPARQL `GroupGraphPattern` that should replace the\n            // SRS placeholder `GroupGraphPattern` token inside of an SRS `IfClause`.\n            _this.IfClause = function (ctx, cstInputTokens) {\n                var GroupGraphPattern = ctx.GroupGraphPattern;\n                _this.$storePlaceholderTokenReplacement({\n                    tokenStore: _this.groupGraphPatterns,\n                    originalTokenContext: GroupGraphPattern,\n                    subParserRule: _this.sparqlParser.parseGroupGraphPattern.bind(_this.sparqlParser),\n                    cstInputTokens: cstInputTokens,\n                });\n            };\n            // Get and store the SPARQL `TriplesBlock` that should replace the\n            // SRS placeholder `TriplesBlock` token inside of an SRS `ThenClause`.\n            _this.ThenClause = function (ctx, cstInputTokens) {\n                var TriplesBlock = ctx.TriplesBlock;\n                _this.$storePlaceholderTokenReplacement({\n                    tokenStore: _this.triplesBlocks,\n                    originalTokenContext: TriplesBlock,\n                    subParserRule: _this.sparqlParser.parseTriplesBlock.bind(_this.sparqlParser),\n                    cstInputTokens: cstInputTokens,\n                });\n            };\n            // Utility methods ('$' prefix is necessary to prevent chevrotain's\n            // `validateVisitor` method from complaining that these are not grammar\n            // rules):\n            _this.$storePlaceholderTokenReplacement = function (_a) {\n                var tokenStore = _a.tokenStore, _b = _a.originalTokenContext, originalTokenContext = _b === void 0 ? [] : _b, subParserRule = _a.subParserRule, cstInputTokens = _a.cstInputTokens, stripWrappers = _a.stripWrappers;\n                var originalToken = originalTokenContext[0];\n                if (!originalToken || typeof originalToken.image !== 'string') {\n                    return;\n                }\n                var replacement = _this.$getPlaceholderTokenReplacement(originalToken, subParserRule, cstInputTokens, stripWrappers);\n                tokenStore.push({\n                    parseResult: replacement,\n                    originalToken: originalToken,\n                });\n            };\n            _this.$getPlaceholderTokenReplacement = function (originalToken, subParserRule, cstInputTokens, stripWrappers) {\n                if (stripWrappers === void 0) { stripWrappers = false; }\n                // Because we are replacing tokens by delegating the parsing of parts\n                // of the original document to sub-parsers, we add some empty padding to\n                // the part that is passed to the sub-parser, where the amount of padding\n                // matches the start line and offset of the token we are replacing. This\n                // ensures that all tokens have the right positions in the resulting CST\n                // (otherwise, the sub-parsers assume that the text starts at offset 0).\n                var image = originalToken.image;\n                var frontPadding = '';\n                var latestEndOffset = 0;\n                var latestEndLine = 0;\n                // Traditional `for` loop because we need to `break`.\n                for (var i = 0; i < cstInputTokens.length; i++) {\n                    var token = cstInputTokens[i];\n                    if (i > 0) {\n                        // Account for whitespace between this token and the previous one.\n                        var linesBetweenTokens = token.startLine - latestEndLine;\n                        var untokenizedSpaceBetweenTokens = token.startOffset - 1 - latestEndOffset - linesBetweenTokens;\n                        if (linesBetweenTokens > 0) {\n                            frontPadding += '\\n'.repeat(linesBetweenTokens - 1);\n                            frontPadding +=\n                                ' '.repeat(Math.max(untokenizedSpaceBetweenTokens, 0)) + '\\n';\n                        }\n                        else {\n                            frontPadding += ' '.repeat(Math.max(untokenizedSpaceBetweenTokens, 0));\n                        }\n                    }\n                    if (token === originalToken) {\n                        break;\n                    }\n                    // We haven't hit the token we're replacing yet, so we need to continue\n                    // accumulating padding by adding the newlines _inside_ the current\n                    // token, and replacing all non-newline characters inside the current\n                    // token with spaces.\n                    var newlinesInToken = token.image.split('\\n');\n                    newlinesInToken.forEach(function (line, idx) {\n                        if (idx > 0) {\n                            frontPadding += '\\n';\n                        }\n                        frontPadding += ' '.repeat(line.length);\n                    });\n                    // Track where the current token ends, in case the next token starts\n                    // much later (meaning that there was untokenized stuff (e.g.,\n                    // whitespace) in between) that needs to be accounted for.\n                    latestEndOffset = token.endOffset;\n                    latestEndLine = token.endLine;\n                }\n                // Finally, if we're stripping the wrappers (e.g., braces), replace them\n                // with whitespace.\n                var parseImage = stripWrappers ? \" \" + image.slice(1, -1) + \" \" : image;\n                return subParserRule(\"\" + frontPadding + parseImage);\n            };\n            _this.$getGroupGraphPatterns = function () { return _this.groupGraphPatterns; };\n            _this.$getTriplesBlocks = function () { return _this.triplesBlocks; };\n            _this.$resetState = function () {\n                _this.groupGraphPatterns = [];\n                _this.triplesBlocks = [];\n            };\n            _this.sparqlParser = new StardogSparqlParser();\n            _this.validateVisitor();\n            return _this;\n        }\n        return SparqlSrsVisitor;\n    }(BaseVisitor));\n    return new SparqlSrsVisitor();\n};\nexport function reduceVisitorItemErrors(acc, item) {\n    return acc.concat(item.parseResult.errors);\n}\n// The SRS cst contains placeholder tokens for unparsed blocks of SPARQL\n// inside of an SRS `IfClause` or `ThenClause`. This method swaps out those\n// placeholders with the actual SPARQL CST created by the SparqlSrsVisitor.\nexport function findAndSwapPlaceholders(node, parentNode, visitorItems, key) {\n    var matchingVisitorItem = visitorItems.find(function (visitorItem) { return visitorItem.originalToken === node; });\n    if (matchingVisitorItem) {\n        parentNode.children[key] = [matchingVisitorItem.parseResult.cst];\n    }\n    return matchingVisitorItem;\n}\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nexport var defaultNamespacesMap = Object.freeze(['', 'rdf', 'rdfs', 'xsd', 'owl', 'stardog'].reduce(function (namespacesMap, prefix) {\n    var _a;\n    return (__assign({}, namespacesMap, (_a = {}, _a[prefix] = true, _a)));\n}, {}));\n","var _a;\nimport { isCstNode, traverse } from '../helpers/cst';\nimport { sparqlTokenMap } from '../sparql/tokens';\n// RegEx for matching any relevant children of `Expression` inside of `Bind`;\n// used to avoid false negatives in the check for disallowed literals inside of\n// `Bind`.\nvar subExpressionMatcher = /(?:[A-Z]+Expression|ValueLogical)$/i;\n// Default: just don't abort early at all. Used in the stack unwinding process\n// that creates an error rule stack.\nvar defaultEarlyAbortTest = function () { return false; };\n// Tokens that are allowed in SPARQL but not inside the `IfClause` of SRS.\nvar disallowedSparqlTokenNameToRuleMap = (_a = {},\n    _a[sparqlTokenMap.EXISTS.tokenName] = 'ExistsFunction',\n    _a[sparqlTokenMap.NOT_EXISTS.tokenName] = 'NotExistsFunction',\n    _a[sparqlTokenMap.NOW.tokenName] = 'BuiltInCall_NOW',\n    _a[sparqlTokenMap.LEmbed.tokenName] = 'LeftEmbed',\n    _a[sparqlTokenMap.REmbed.tokenName] = 'RightEmbed',\n    _a);\nvar disallowedSparqlTokenNames = Object.keys(disallowedSparqlTokenNameToRuleMap);\n// Token names for literals; these are not allowed in the subject position of\n// certain patterns in SRS.\nvar disallowedSparqlLiteralTokenNames = [\n    sparqlTokenMap.DOUBLE,\n    sparqlTokenMap.DECIMAL,\n    sparqlTokenMap.INTEGER,\n    sparqlTokenMap.DOUBLE_POSITIVE,\n    sparqlTokenMap.DECIMAL_POSITIVE,\n    sparqlTokenMap.INTEGER_POSITIVE,\n    sparqlTokenMap.DOUBLE_NEGATIVE,\n    sparqlTokenMap.DECIMAL_NEGATIVE,\n    sparqlTokenMap.INTEGER_NEGATIVE,\n    sparqlTokenMap.STRING_LITERAL1,\n    sparqlTokenMap.STRING_LITERAL2,\n    sparqlTokenMap.STRING_LITERAL_LONG1,\n    sparqlTokenMap.STRING_LITERAL_LONG2,\n].map(function (token) { return token.tokenName; });\n// Helper functions for more \"literate\" code.\nvar isCstNodeTraverseContext = function (ctx) {\n    return Boolean(ctx && ctx.node);\n};\n// Is the parent node an Expression child of a Bind node or an Expression\n// child of an ExpressionOrEmbeddedTriplePattern node that is itself a child\n// of a Bind node? The former accounts for standard SPARQL; the latter accounts\n// for Stardog SPARQL with edge properties. This lets certain custom errors\n// work with the output of either the W3CSpecSparqlParser or the\n// StardogSparqlParser.\nvar isParentBindOrBoundExpressionOrEmbeddedTriplePattern = function (parentCtx) {\n    if (!isCstNodeTraverseContext(parentCtx)) {\n        return false;\n    }\n    var parentNodeName = parentCtx.node.name;\n    return (parentNodeName === 'Bind' ||\n        (parentNodeName === 'ExpressionOrEmbeddedTriplePattern' &&\n            isCstNodeTraverseContext(parentCtx.parentCtx) &&\n            parentCtx.parentCtx.node.name === 'Bind'));\n};\n// Walks back up the tree to construct the rule stack, first going upward\n// through the provided `traverseCtx`, and then continuing up through the\n// `fullCtx`. `traverseCtx` is intended to be the \"inner\" ITraverseContext\n// representing the results of the SPARQL sub-parser used by the\n// SparqlSrsVisitor. `fullCtx` is intended to be the \"outer\" ITraverseContext\n// representing the results of the SRS parser itself. The SRS parser delegates\n// blocks of SPARQL to a SPARQL sub-parser, so, by combinging the two contexts,\n// we get the full parser stack. The traversal adds rules to the stack only\n// once a rule matching one of the `startRuleNames` is hit.\n//\n// At the point where the traversal of `traverseCtx` ends and the traversal of\n// `fullCtx` begins, you may need to insert a rule into the stack (e.g.,\n// because the `traverseCtx` doesn't include the top-level rule for that\n// parse). If so, use `topLevelSubParserRuleName`.\n//\n// In some cases, there is a need to track nodes and potentially bail out early\n// at certain points while constructing the rule stack. For that, use\n// `earlyAbortTest`. If that method returns true, the rule stack construction\n// will abort.\nfunction getCustomErrorRuleStack(traverseCtx, fullCtx, startRuleNames, topLevelSubParserRuleName, earlyAbortTest) {\n    if (earlyAbortTest === void 0) { earlyAbortTest = defaultEarlyAbortTest; }\n    if (!traverseCtx) {\n        return []; // forced early exit\n    }\n    var ruleStack = [];\n    var stackUnwindingPointer = traverseCtx;\n    // Move up from current context to the first rule that should \"start\" the stack.\n    while (isCstNode(stackUnwindingPointer.node) &&\n        !startRuleNames.includes(stackUnwindingPointer.node.name)) {\n        if (earlyAbortTest(stackUnwindingPointer)) {\n            return [];\n        }\n        stackUnwindingPointer = stackUnwindingPointer.parentCtx;\n    }\n    // Now start adding all found rules to the stack as we move upward.\n    while (isCstNode(stackUnwindingPointer.node)) {\n        ruleStack.unshift(stackUnwindingPointer.node.name);\n        if (earlyAbortTest(stackUnwindingPointer)) {\n            return [];\n        }\n        stackUnwindingPointer = stackUnwindingPointer.parentCtx;\n    }\n    // If the rule stack of the sub-parser doesn't get all the way up to the\n    // relevant top-level rule, this will force the top-level rule to be put onto\n    // the stack before proceeding.\n    if (typeof topLevelSubParserRuleName === 'string') {\n        ruleStack.unshift(topLevelSubParserRuleName);\n    }\n    // Now that we've got the sub-parser's rule stack, we trace the remaining\n    // outer parser's stack to get to the true bottom of the stack.\n    stackUnwindingPointer = fullCtx;\n    while (stackUnwindingPointer) {\n        if (isCstNode(stackUnwindingPointer.node)) {\n            ruleStack.unshift(stackUnwindingPointer.node.name);\n            if (earlyAbortTest(stackUnwindingPointer)) {\n                return [];\n            }\n        }\n        stackUnwindingPointer = stackUnwindingPointer.parentCtx;\n    }\n    return ['SrsDoc'].concat(ruleStack);\n}\nvar getCustomIRecognitionException = function (_a) {\n    var name = _a.name, message = _a.message, node = _a.node, ruleStack = _a.ruleStack;\n    return ({\n        name: name,\n        message: message,\n        token: node,\n        context: {\n            ruleStack: ruleStack,\n            // `ruleOccurrenceStack` is meaningless to us as it just\n            // records the number used when the chevrotain rule is\n            // created (e.g., SUBRULE1 vs SUBRULE2); we can't know that\n            // or care about that here\n            ruleOccurrenceStack: [],\n        },\n        resyncedTokens: [],\n    });\n};\nvar getNoPrefixError = function (node, parentCtx, fullCtx, subParserRuleName) {\n    return getCustomIRecognitionException({\n        name: 'NoNamespacePrefixError',\n        message: \"A prefix (\\\"\" + node.image + \"\\\") was used for which there was no namespace defined.\",\n        node: node,\n        ruleStack: getCustomErrorRuleStack(parentCtx, fullCtx, ['PrefixedName'], subParserRuleName),\n    });\n};\nvar getDisallowedTokenError = function (node, parentCtx, fullCtx, subParserRuleName) {\n    if (subParserRuleName === void 0) { subParserRuleName = 'GroupGraphPattern'; }\n    return getCustomIRecognitionException({\n        name: 'DisallowedTokenError',\n        message: \"Token \" + node.tokenType.tokenName + \" cannot be used in Stardog Rules.\",\n        node: node,\n        ruleStack: getCustomErrorRuleStack(parentCtx, fullCtx, [disallowedSparqlTokenNameToRuleMap[node.tokenType.tokenName]], subParserRuleName),\n    });\n};\nvar getDisallowedLiteralError = function (node, parentCtx, fullCtx, subParserRuleName) {\n    var foundPropertyListPathNotEmptyCtx = null;\n    var didFindSubExpressionWithMultipleChildren = false;\n    var errorContext = null;\n    var errorRuleStack = getCustomErrorRuleStack(parentCtx, fullCtx, ['Expression', 'TriplesSameSubjectPath'], subParserRuleName, function (stackCtx) {\n        var node = stackCtx.node, parentCtx = stackCtx.parentCtx;\n        var nodeName = node.name;\n        if (nodeName === 'PropertyListPathNotEmpty') {\n            // Track the found `PropertyListPathNotEmmpty` node and keep going.\n            foundPropertyListPathNotEmptyCtx = stackCtx;\n            return false;\n        }\n        if (!didFindSubExpressionWithMultipleChildren &&\n            subExpressionMatcher.test(nodeName)) {\n            // Track that we found a sub-expression with multiple children, then\n            // keep going.\n            didFindSubExpressionWithMultipleChildren =\n                parentCtx.node.children[nodeName].length > 1;\n            return false;\n        }\n        var isExpression = nodeName === 'Expression';\n        var isTriplesBlock = nodeName === 'TriplesSameSubjectPath';\n        if (!isExpression && !isTriplesBlock) {\n            return false;\n        }\n        var isBoundExpressionWithLiteralSubject = isExpression &&\n            // If we've found a sub-expression with multiple children, it's highly\n            // likely (maybe definite?) that this `Bind` does not include an invalid\n            // literal as a subject, so we don't count this as an error. This _may_\n            // allow rare false positives, but it definitely prevents false\n            // negatives of the sort described in https://github.com/stardog-union/millan/issues/22\n            !didFindSubExpressionWithMultipleChildren &&\n            isParentBindOrBoundExpressionOrEmbeddedTriplePattern(parentCtx);\n        var isTriplesBlockSubject = isTriplesBlock &&\n            (!foundPropertyListPathNotEmptyCtx ||\n                foundPropertyListPathNotEmptyCtx.parentCtx.node.name !==\n                    'TriplesSameSubjectPath');\n        if (isBoundExpressionWithLiteralSubject || isTriplesBlockSubject) {\n            errorContext = isBoundExpressionWithLiteralSubject\n                ? 'Bind'\n                : 'TriplesBlock';\n            return false;\n        }\n        // We got to the Expression or TriplesBlock containing the literal, but\n        // the literal wasn't in the subject position (i.e., was not the lead\n        // Expression inside of Bind and was not the subject of\n        // TriplesSameSubjectPath), so we can bail early here.\n        return true;\n    });\n    if (errorRuleStack.length === 0) {\n        return;\n    }\n    return getCustomIRecognitionException({\n        name: 'DisallowedLiteralError',\n        message: \"Token \" + node.tokenType.tokenName + \" (\" + node.image + \") cannot be used as a subject inside of a \" + errorContext + \" in Stardog Rules Syntax.\",\n        node: node,\n        ruleStack: errorRuleStack,\n    });\n};\n// Since the SRS parser delegates to the SPARQL parser inside of\n// an SRS `IfClause`, and SPARQL allows certain constructs that SRS does not,\n// we need to create our own errors for SRS-specific restrictions here.\nexport function addIfClauseErrorsToErrors(_a) {\n    var cst = _a.cst, namespacesMap = _a.namespacesMap, fullCtx = _a.fullCtx, errors = _a.errors, semanticErrors = _a.semanticErrors;\n    traverse(cst, function (ctx, next) {\n        var node = ctx.node, parentCtx = ctx.parentCtx;\n        if (isCstNode(node)) {\n            return next();\n        }\n        var tokenName = node.tokenType.tokenName;\n        if (disallowedSparqlTokenNames.some(function (name) { return name === tokenName; })) {\n            errors.push(getDisallowedTokenError(node, parentCtx, fullCtx));\n        }\n        if (disallowedSparqlLiteralTokenNames.some(function (tokenName) { return tokenName === node.tokenType.tokenName; })) {\n            var error = getDisallowedLiteralError(node, parentCtx, fullCtx, 'GroupGraphPattern');\n            if (error) {\n                errors.push(error);\n            }\n        }\n        if (tokenName === 'PNAME_NS' || tokenName === 'PNAME_LN') {\n            var prefix = node.image.split(':').shift();\n            if (!namespacesMap[prefix]) {\n                semanticErrors.push(getNoPrefixError(node, parentCtx, fullCtx, 'GroupGraphPattern'));\n            }\n        }\n    });\n    return {\n        errors: errors,\n        semanticErrors: semanticErrors,\n    };\n}\nexport function addThenClauseErrorsToErrors(_a) {\n    var cst = _a.cst, namespacesMap = _a.namespacesMap, errors = _a.errors, semanticErrors = _a.semanticErrors, fullCtx = _a.fullCtx;\n    traverse(cst, function (ctx, next) {\n        var node = ctx.node, parentCtx = ctx.parentCtx;\n        if (isCstNode(node)) {\n            return next();\n        }\n        var tokenName = node.tokenType.tokenName;\n        if (disallowedSparqlLiteralTokenNames.some(function (tokenName) { return tokenName === node.tokenType.tokenName; })) {\n            var error = getDisallowedLiteralError(node, parentCtx, fullCtx, 'GroupGraphPattern');\n            if (error) {\n                errors.push(error);\n            }\n        }\n        // No embedded triple patterns in SRS THEN clauses.\n        if (tokenName === sparqlTokenMap.LEmbed.name ||\n            tokenName === sparqlTokenMap.REmbed.name) {\n            errors.push(getDisallowedTokenError(node, parentCtx, fullCtx, 'TriplesBlock'));\n        }\n        if (tokenName === 'PNAME_NS' || tokenName === 'PNAME_LN') {\n            var prefix = node.image.split(':').shift();\n            if (!namespacesMap[prefix]) {\n                semanticErrors.push(getNoPrefixError(node, parentCtx, fullCtx, 'TriplesBlock'));\n            }\n        }\n    });\n    return {\n        errors: errors,\n        semanticErrors: semanticErrors,\n    };\n}\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// tslint:disable:function-name\nvar sparqlTokenMap = require('../sparql/tokens').sparqlTokenMap;\nvar _a = require('./tokens'), srsTokenMap = _a.srsTokenMap, srsTokenTypes = _a.srsTokenTypes, multiModeLexerDefinition = _a.multiModeLexerDefinition;\nimport { Parser, Lexer, } from 'chevrotain';\nimport { TurtleParser } from '../turtle/TurtleParser';\nimport { isCstNode, unsafeTraverse } from '../helpers/cst';\nimport { defaultNamespacesMap } from 'turtle/defaultNamespaces';\nimport { getSparqlSrsVisitor, reduceVisitorItemErrors, findAndSwapPlaceholders, } from './visitor';\nimport { addThenClauseErrorsToErrors, addIfClauseErrorsToErrors, } from './customErrors';\nvar SrsParser = /** @class */ (function (_super) {\n    __extends(SrsParser, _super);\n    function SrsParser(config) {\n        var _this = _super.call(this, __assign({ outputCst: true, recoveryEnabled: true }, config), srsTokenTypes, multiModeLexerDefinition, false) || this;\n        _this.baseNamespacesMap = Object.freeze(__assign({}, defaultNamespacesMap));\n        _this.namespacesMap = {};\n        _this.visitCst = function (cst) {\n            // To save resources while parsing, the sparqlSrsVisitor is a singleton.\n            if (!_this.sparqlSrsVisitor) {\n                var BaseSrsVisitor = _this.getBaseCstVisitorConstructorWithDefaults();\n                _this.sparqlSrsVisitor = getSparqlSrsVisitor(BaseSrsVisitor);\n            }\n            else {\n                _this.sparqlSrsVisitor.$resetState();\n            }\n            _this.sparqlSrsVisitor.visit(cst, _this.input);\n        };\n        _this.getSparqlRulesFromVisitor = function (cst) {\n            _this.visitCst(cst);\n            return {\n                groupGraphPatterns: _this.sparqlSrsVisitor.$getGroupGraphPatterns(),\n                triplesBlocks: _this.sparqlSrsVisitor.$getTriplesBlocks(),\n            };\n        };\n        _this.resetManagedState = function () {\n            _this.namespacesMap = __assign({}, defaultNamespacesMap);\n            _this.semanticErrors = [];\n        };\n        _this.setBaseNamespaces = function (newBaseNamespaces) {\n            _this.baseNamespacesMap = __assign({}, newBaseNamespaces);\n        };\n        _this.tokenize = function (document) {\n            return _this.lexer.tokenize(document).tokens;\n        };\n        _this.parse = function (document, mode) {\n            if (mode === void 0) { mode = 'standard'; }\n            _this.resetManagedState();\n            _this.input = _this.lexer.tokenize(document).tokens;\n            var cst = _this.SrsDoc(0, [mode]);\n            var _a = _this.getSparqlRulesFromVisitor(cst), groupGraphPatterns = _a.groupGraphPatterns, triplesBlocks = _a.triplesBlocks;\n            // Pull visitor errors\n            var errors = _this.errors.concat(groupGraphPatterns.reduce(reduceVisitorItemErrors, []), triplesBlocks.reduce(reduceVisitorItemErrors, []));\n            var semanticErrors = _this.semanticErrors.slice();\n            // Replace placeholder CST nodes created by the SRS parser with CST nodes\n            // returned by the visitor sub-parsers.\n            unsafeTraverse(cst, function (ctx, next) {\n                var node = ctx.node, parentCtx = ctx.parentCtx;\n                if (isCstNode(node)) {\n                    return next();\n                }\n                var currentTokenName = node.tokenType.tokenName;\n                if (currentTokenName !== 'GroupGraphPattern' &&\n                    currentTokenName !== 'TriplesBlock') {\n                    return;\n                }\n                var parentNode = parentCtx.node;\n                // The SRS parser parses only Turtle and SRS-specific content (RULE, IF,\n                // THEN), and creates placeholder tokens for the blocks where SPARQL is\n                // valid. The SparqlSrsVisitor visits these nodes and delegates their\n                // parsing to a SPARQL parser. Here, we replace the placeholder nodes\n                // (`GroupGraphPattern` and `TriplesBlock`) with the real ones from the\n                // SPARQL parser, collecting some custom SRS-specific errors along the\n                // way.\n                if (parentNode.name === 'IfClause') {\n                    var matchingVisitorItem = findAndSwapPlaceholders(node, parentNode, groupGraphPatterns, 'GroupGraphPattern');\n                    if (matchingVisitorItem) {\n                        addIfClauseErrorsToErrors({\n                            fullCtx: ctx,\n                            namespacesMap: __assign({}, _this.baseNamespacesMap, _this.namespacesMap),\n                            cst: matchingVisitorItem.parseResult.cst,\n                            errors: errors,\n                            semanticErrors: semanticErrors,\n                        });\n                    }\n                }\n                else if (parentNode.name === 'ThenClause') {\n                    var matchingVisitorItem = findAndSwapPlaceholders(node, parentNode, triplesBlocks, 'TriplesBlock');\n                    if (matchingVisitorItem) {\n                        addThenClauseErrorsToErrors({\n                            fullCtx: ctx,\n                            namespacesMap: __assign({}, _this.baseNamespacesMap, _this.namespacesMap),\n                            cst: matchingVisitorItem.parseResult.cst,\n                            errors: errors,\n                            semanticErrors: semanticErrors,\n                        });\n                    }\n                }\n            });\n            return {\n                semanticErrors: semanticErrors,\n                errors: errors,\n                cst: cst,\n            };\n        };\n        _this.SrsDoc = _this.RULE('SrsDoc', function (mode) {\n            _this.SUBRULE(_this.turtleDoc, { ARGS: [mode] });\n            _this.MANY(function () {\n                _this.SUBRULE(_this.RuleDoc);\n                _this.MANY1(function () {\n                    _this.SUBRULE(_this.triples, { ARGS: [mode] });\n                    _this.CONSUME(sparqlTokenMap.Period);\n                });\n            });\n        });\n        _this.RuleDoc = _this.RULE('RuleDoc', function () {\n            _this.OPTION(function () { return _this.SUBRULE(_this.RuleClause); });\n            _this.SUBRULE(_this.IfClause);\n            _this.SUBRULE(_this.ThenClause);\n        });\n        _this.RuleClause = _this.RULE('RuleClause', function () {\n            _this.CONSUME(srsTokenMap.Rule);\n            _this.SUBRULE(_this.iri);\n        });\n        _this.IfClause = _this.RULE('IfClause', function () {\n            _this.CONSUME(srsTokenMap.If);\n            _this.CONSUME(srsTokenMap.GroupGraphPattern);\n        });\n        _this.ThenClause = _this.RULE('ThenClause', function () {\n            _this.CONSUME(srsTokenMap.Then);\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.CONSUME(srsTokenMap.TriplesBlock);\n            _this.CONSUME(srsTokenMap.EndThen);\n        });\n        _this.lexer = new Lexer(multiModeLexerDefinition);\n        Parser.performSelfAnalysis(_this);\n        return _this;\n    }\n    return SrsParser;\n}(TurtleParser));\nexport { SrsParser };\n","export * from './SrsParser';\n// Convenience imports/exports that aren't core functionality:\n// NOTE: Tokens MUST be imported using CommonJS syntax; see here: https://github.com/SAP/chevrotain/issues/345\nexport var srsTokens = require('./tokens');\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar sparqlTokenMap = require('./tokens').sparqlTokenMap;\nimport { Parser, Lexer, } from 'chevrotain';\n// @ts-ignore: debug logging\nfunction log() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    // console.log(...args);\n}\nvar BaseSparqlParser = /** @class */ (function (_super) {\n    __extends(BaseSparqlParser, _super);\n    function BaseSparqlParser(options, tokenVocab) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, tokenVocab, __assign({ recoveryEnabled: true, outputCst: true }, options.config)) || this;\n        _this.tokenize = function (document) {\n            return _this.lexer.tokenize(document).tokens;\n        };\n        _this.parse = function (document, entryRule) {\n            if (entryRule === void 0) { entryRule = _this.SparqlDoc; }\n            _this.input = _this.lexer.tokenize(document).tokens;\n            var cst = entryRule.call(_this);\n            var errors = _this.errors;\n            return {\n                errors: errors,\n                cst: cst,\n            };\n        };\n        _this.parseGroupGraphPattern = function (document) {\n            return _this.parse(document, _this.GroupGraphPattern);\n        };\n        _this.parseTriplesBlock = function (document) {\n            return _this.parse(document, _this.TriplesBlock);\n        };\n        // NOTE: For the sake of usability in text editors/IDEs, this parser encodes\n        // a grammar that is slightly different from the official SPARQL spec. The\n        // main differences are in the `SparqlDoc`, rule, the `Prologue` rule, and\n        // the `Update` rule. Essentially, the grammar encoded by this parser should\n        // allow any number of interspered Prologues (PREFIX/BASE), QueryUnits, and\n        // UpdateUnits, so that, e.g., this is valid:\n        //\n        //  select * { ?s ?p ?o }\n        //  prefix foo: <bar>\n        //  clear all\n        //  prefix x: <y>\n        //  construct { ?s ?p ?o }\n        //  ask { ?s ?p ?o }\n        //\n        // This is not valid according to the official spec. However, line 1 is\n        // valid, lines 2-3 are valid, lines 4-5 are valid, and line 6 is valid. In a\n        // text editor, a user might want to select and execute only those lines.\n        _this.SparqlDoc = _this.RULE('SparqlDoc', function () {\n            log('SparqlDoc');\n            _this.MANY(function () {\n                return _this.OR([\n                    { ALT: function () { return _this.SUBRULE(_this.Prologue); } },\n                    { ALT: function () { return _this.SUBRULE(_this.QueryUnit); } },\n                    { ALT: function () { return _this.SUBRULE(_this.UpdateUnit); } },\n                ]);\n            });\n        });\n        _this.QueryUnit = _this.RULE('QueryUnit', function () {\n            log('QueryUnit');\n            _this.SUBRULE(_this.Query);\n        });\n        _this.Query = _this.RULE('Query', function () {\n            log('Query');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.SelectQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.ConstructQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.DescribeQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.AskQuery); } },\n            ]);\n            _this.SUBRULE(_this.ValuesClause);\n        });\n        _this.Constant = _this.RULE('Constant', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n            ]);\n        });\n        _this.MaxLength = _this.RULE('MaxLength', function () {\n            _this.CONSUME(sparqlTokenMap.MAX_LENGTH);\n            _this.CONSUME(sparqlTokenMap.INTEGER);\n        });\n        _this.UpdateUnit = _this.RULE('UpdateUnit', function () {\n            log('UpdateUnit');\n            _this.SUBRULE(_this.Update);\n        });\n        _this.Prologue = _this.RULE('Prologue', function () {\n            log('Prologue');\n            _this.AT_LEAST_ONE(function () {\n                return _this.OR([\n                    { ALT: function () { return _this.SUBRULE(_this.BaseDecl); } },\n                    { ALT: function () { return _this.SUBRULE(_this.PrefixDecl); } },\n                ]);\n            });\n        });\n        _this.BaseDecl = _this.RULE('BaseDecl', function () {\n            log('BaseDecl');\n            _this.CONSUME(sparqlTokenMap.BASE);\n            _this.CONSUME(sparqlTokenMap.IRIREF);\n        });\n        _this.PrefixDecl = _this.RULE('PrefixDecl', function () {\n            log('PrefixDecl');\n            _this.CONSUME(sparqlTokenMap.PREFIX);\n            _this.CONSUME(sparqlTokenMap.PNAME_NS);\n            _this.CONSUME(sparqlTokenMap.IRIREF);\n        });\n        _this.SelectQuery = _this.RULE('SelectQuery', function () {\n            log('SelectQuery');\n            _this.SUBRULE(_this.SelectClause);\n            _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n            _this.SUBRULE(_this.WhereClause);\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.SubSelect = _this.RULE('SubSelect', function () {\n            log('SubSelect');\n            _this.SUBRULE(_this.SelectClause);\n            _this.SUBRULE(_this.WhereClause);\n            _this.SUBRULE(_this.SolutionModifier);\n            _this.SUBRULE(_this.ValuesClause);\n        });\n        _this.SelectClause = _this.RULE('SelectClause', function () {\n            log('SelectClause');\n            _this.CONSUME(sparqlTokenMap.SELECT);\n            _this.OPTION(function () {\n                return _this.OR([\n                    { ALT: function () { return _this.CONSUME(sparqlTokenMap.DISTINCT); } },\n                    { ALT: function () { return _this.CONSUME(sparqlTokenMap.REDUCED); } },\n                ]);\n            });\n            _this.OR1([\n                {\n                    ALT: function () {\n                        _this.AT_LEAST_ONE(function () {\n                            return _this.OR2([\n                                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                                {\n                                    ALT: function () {\n                                        _this.CONSUME(sparqlTokenMap.LParen);\n                                        _this.SUBRULE(_this.Expression);\n                                        _this.CONSUME(sparqlTokenMap.AS);\n                                        _this.SUBRULE1(_this.Var);\n                                        _this.CONSUME(sparqlTokenMap.RParen);\n                                    },\n                                },\n                            ]);\n                        });\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Star); } },\n            ]);\n        });\n        _this.ConstructQuery = _this.RULE('ConstructQuery', function () {\n            _this.CONSUME(sparqlTokenMap.CONSTRUCT);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.ConstructTemplate);\n                        _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n                        _this.SUBRULE(_this.WhereClause);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.MANY1(function () { return _this.SUBRULE1(_this.DatasetClause); });\n                        _this.CONSUME(sparqlTokenMap.WHERE);\n                        _this.CONSUME(sparqlTokenMap.LCurly);\n                        _this.OPTION(function () { return _this.SUBRULE(_this.TriplesTemplate); });\n                        _this.CONSUME(sparqlTokenMap.RCurly);\n                    },\n                },\n            ]);\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.DescribeQuery = _this.RULE('DescribeQuery', function () {\n            log('DescribeQuery');\n            _this.CONSUME(sparqlTokenMap.DESCRIBE);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.VarOrIri); });\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Star); } },\n            ]);\n            _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n            _this.OPTION(function () { return _this.SUBRULE(_this.WhereClause); });\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.AskQuery = _this.RULE('AskQuery', function () {\n            log('AskQuery');\n            _this.CONSUME(sparqlTokenMap.ASK);\n            _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n            _this.SUBRULE(_this.WhereClause);\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.DatasetClause = _this.RULE('DatasetClause', function () {\n            log('DatasetClause');\n            _this.CONSUME(sparqlTokenMap.FROM);\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.DefaultGraphClause); } },\n                { ALT: function () { return _this.SUBRULE(_this.NamedGraphClause); } },\n            ]);\n        });\n        _this.DefaultGraphClause = _this.RULE('DefaultGraphClause', function () {\n            log('DefaultGraphClause');\n            _this.SUBRULE(_this.SourceSelector);\n        });\n        _this.NamedGraphClause = _this.RULE('NamedGraphClause', function () {\n            log('NamedGraphClause');\n            _this.CONSUME(sparqlTokenMap.NAMED);\n            _this.SUBRULE(_this.SourceSelector);\n        });\n        _this.SourceSelector = _this.RULE('SourceSelector', function () {\n            log('SourceSelector');\n            _this.SUBRULE(_this.iri);\n        });\n        _this.WhereClause = _this.RULE('WhereClause', function () {\n            log('WhereClause');\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.WHERE); });\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.SolutionModifier = _this.RULE('SolutionModifier', function () {\n            log('SolutionModifier');\n            _this.OPTION(function () { return _this.SUBRULE(_this.GroupClause); });\n            _this.OPTION1(function () { return _this.SUBRULE(_this.HavingClause); });\n            _this.OPTION2(function () { return _this.SUBRULE(_this.OrderClause); });\n            _this.OPTION3(function () { return _this.SUBRULE(_this.LimitOffsetClause); });\n        });\n        _this.GroupClause = _this.RULE('GroupClause', function () {\n            log('GroupClause');\n            _this.CONSUME(sparqlTokenMap.GROUP_BY);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.GroupCondition); });\n        });\n        _this.GroupCondition = _this.RULE('GroupCondition', function () {\n            log('GroupCondition');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall); } },\n                { ALT: function () { return _this.SUBRULE(_this.FunctionCall); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.SUBRULE(_this.Expression);\n                        _this.OPTION(function () {\n                            _this.CONSUME(sparqlTokenMap.AS);\n                            _this.SUBRULE(_this.Var);\n                        });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE1(_this.Var); } },\n            ]);\n        });\n        _this.HavingClause = _this.RULE('HavingClause', function () {\n            log('HavingClause');\n            _this.CONSUME(sparqlTokenMap.HAVING);\n            _this.SUBRULE(_this.HavingCondition);\n        });\n        _this.HavingCondition = _this.RULE('HavingCondition', function () {\n            log('HavingCondition');\n            _this.SUBRULE(_this.Constraint);\n        });\n        _this.OrderClause = _this.RULE('OrderClause', function () {\n            log('OrderClause');\n            _this.CONSUME(sparqlTokenMap.ORDER_BY);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.OrderCondition); });\n        });\n        _this.OrderCondition = _this.RULE('OrderCondition', function () {\n            log('OrderCondition');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.OR1([\n                            { ALT: function () { return _this.CONSUME(sparqlTokenMap.ASC); } },\n                            { ALT: function () { return _this.CONSUME(sparqlTokenMap.DESC); } },\n                        ]);\n                        _this.SUBRULE(_this.BrackettedExpression);\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE(_this.Constraint); } },\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n            ]);\n        });\n        _this.LimitOffsetClause = _this.RULE('LimitOffsetClause', function () {\n            log('LimitOffsetClause');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.LimitClause);\n                        _this.OPTION(function () { return _this.SUBRULE(_this.OffsetClause); });\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE1(_this.OffsetClause);\n                        _this.OPTION1(function () { return _this.SUBRULE1(_this.LimitClause); });\n                    },\n                },\n            ]);\n        });\n        _this.OffsetClause = _this.RULE('OffsetClause', function () {\n            log('OffsetClause');\n            _this.CONSUME(sparqlTokenMap.OFFSET);\n            _this.CONSUME(sparqlTokenMap.INTEGER);\n        });\n        _this.LimitClause = _this.RULE('LimitClause', function () {\n            log('LimitClause');\n            _this.CONSUME(sparqlTokenMap.LIMIT);\n            _this.CONSUME(sparqlTokenMap.INTEGER);\n        });\n        _this.ValuesClause = _this.RULE('ValuesClause', function () {\n            log('ValuesClause');\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.VALUES);\n                _this.SUBRULE(_this.DataBlock);\n            });\n        });\n        _this.Update = _this.RULE('Update', function () {\n            log('Update');\n            _this.SUBRULE(_this.Update1);\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.SUBRULE(_this.Update);\n            });\n        });\n        _this.Update1 = _this.RULE('Update1', function () {\n            log('Update1');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Load); } },\n                { ALT: function () { return _this.SUBRULE(_this.Clear); } },\n                { ALT: function () { return _this.SUBRULE(_this.Drop); } },\n                { ALT: function () { return _this.SUBRULE(_this.Add); } },\n                { ALT: function () { return _this.SUBRULE(_this.Move); } },\n                { ALT: function () { return _this.SUBRULE(_this.Copy); } },\n                { ALT: function () { return _this.SUBRULE(_this.Create); } },\n                { ALT: function () { return _this.SUBRULE(_this.InsertData); } },\n                { ALT: function () { return _this.SUBRULE(_this.DeleteData); } },\n                { ALT: function () { return _this.SUBRULE(_this.DeleteWhere); } },\n                { ALT: function () { return _this.SUBRULE(_this.Modify); } },\n            ]);\n        });\n        _this.Load = _this.RULE('Load', function () {\n            log('Load');\n            _this.CONSUME(sparqlTokenMap.LOAD);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.iri);\n            _this.OPTION1(function () {\n                _this.CONSUME(sparqlTokenMap.INTO);\n                _this.SUBRULE(_this.GraphRef);\n            });\n        });\n        _this.Clear = _this.RULE('Clear', function () {\n            log('Clear');\n            _this.CONSUME(sparqlTokenMap.CLEAR);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphRefAll);\n        });\n        _this.Drop = _this.RULE('Drop', function () {\n            log('Drop');\n            _this.CONSUME(sparqlTokenMap.DROP);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphRefAll);\n        });\n        _this.Create = _this.RULE('Create', function () {\n            log('Create');\n            _this.CONSUME(sparqlTokenMap.CREATE);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphRefAll);\n        });\n        _this.Add = _this.RULE('Add', function () {\n            log('Add');\n            _this.CONSUME(sparqlTokenMap.ADD);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphOrDefault);\n            _this.CONSUME(sparqlTokenMap.TO);\n            _this.SUBRULE1(_this.GraphOrDefault);\n        });\n        _this.Move = _this.RULE('Move', function () {\n            log('Move');\n            _this.CONSUME(sparqlTokenMap.MOVE);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphOrDefault);\n            _this.CONSUME(sparqlTokenMap.TO);\n            _this.SUBRULE1(_this.GraphOrDefault);\n        });\n        _this.Copy = _this.RULE('Copy', function () {\n            log('Copy');\n            _this.CONSUME(sparqlTokenMap.COPY);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphOrDefault);\n            _this.CONSUME(sparqlTokenMap.TO);\n            _this.SUBRULE1(_this.GraphOrDefault);\n        });\n        _this.InsertData = _this.RULE('InsertData', function () {\n            log('InsertData');\n            _this.CONSUME(sparqlTokenMap.INSERT_DATA);\n            _this.SUBRULE(_this.QuadData);\n        });\n        _this.DeleteData = _this.RULE('DeleteData', function () {\n            log('DeleteData');\n            _this.CONSUME(sparqlTokenMap.DELETE_DATA);\n            _this.SUBRULE(_this.QuadData);\n        });\n        _this.DeleteWhere = _this.RULE('DeleteWhere', function () {\n            log('DeleteWhere');\n            _this.CONSUME(sparqlTokenMap.DELETE_WHERE);\n            _this.SUBRULE(_this.QuadPattern);\n        });\n        _this.Modify = _this.RULE('Modify', function () {\n            log('Modify');\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.WITH);\n                _this.SUBRULE(_this.iri);\n            });\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.DeleteClause);\n                        _this.OPTION1(function () { return _this.SUBRULE(_this.InsertClause); });\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE1(_this.InsertClause); } },\n            ]);\n            _this.MANY(function () { return _this.SUBRULE(_this.UsingClause); });\n            _this.CONSUME(sparqlTokenMap.WHERE);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.DeleteClause = _this.RULE('DeleteClause', function () {\n            log('DeleteClause');\n            _this.CONSUME(sparqlTokenMap.DELETE);\n            _this.SUBRULE(_this.QuadPattern);\n        });\n        _this.InsertClause = _this.RULE('InsertClause', function () {\n            log('InsertClause');\n            _this.CONSUME(sparqlTokenMap.INSERT);\n            _this.SUBRULE(_this.QuadPattern);\n        });\n        _this.UsingClause = _this.RULE('UsingClause', function () {\n            log('UsingClause');\n            _this.CONSUME(sparqlTokenMap.USING);\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.NAMED);\n                        _this.SUBRULE1(_this.iri);\n                    },\n                },\n            ]);\n        });\n        _this.GraphOrDefault = _this.RULE('GraphOrDefault', function () {\n            log('GraphOrDefault');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DEFAULT); } },\n                {\n                    ALT: function () {\n                        _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.GRAPH); });\n                        _this.SUBRULE(_this.iri);\n                    },\n                },\n            ]);\n        });\n        _this.GraphRef = _this.RULE('GraphRef', function () {\n            log('GraphRef');\n            _this.CONSUME(sparqlTokenMap.GRAPH);\n            _this.SUBRULE(_this.iri);\n        });\n        _this.GraphRefAll = _this.RULE('GraphRefAll', function () {\n            log('GraphRefAll');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.GraphRef); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DEFAULT); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NAMED); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.ALL); } },\n            ]);\n        });\n        _this.QuadPattern = _this.RULE('QuadPattern', function () {\n            log('QuadPattern');\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.SUBRULE(_this.Quads);\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.QuadData = _this.RULE('QuadData', function () {\n            log('QuadData');\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.SUBRULE(_this.Quads);\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.Quads = _this.RULE('Quads', function () {\n            log('Quads');\n            _this.OPTION(function () { return _this.SUBRULE(_this.TriplesTemplate); });\n            _this.MANY(function () {\n                _this.SUBRULE(_this.QuadsNotTriples);\n                _this.OPTION1(function () { return _this.CONSUME(sparqlTokenMap.Period); });\n                _this.OPTION2(function () { return _this.SUBRULE1(_this.TriplesTemplate); });\n            });\n        });\n        _this.QuadsNotTriples = _this.RULE('QuadsNotTriples', function () {\n            log('QuadsNotTriples');\n            _this.CONSUME(sparqlTokenMap.GRAPH);\n            _this.SUBRULE(_this.VarOrIri);\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.OPTION(function () { return _this.SUBRULE(_this.TriplesTemplate); });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.TriplesTemplate = _this.RULE('TriplesTemplate', function () {\n            log('TriplesTemplate');\n            _this.SUBRULE(_this.TriplesSameSubject);\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.Period);\n                _this.OPTION1(function () { return _this.SUBRULE(_this.TriplesTemplate); });\n            });\n        });\n        _this.GroupGraphPattern = _this.RULE('GroupGraphPattern', function () {\n            log('GroupGraphPattern');\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.SubSelect); } },\n                { ALT: function () { return _this.SUBRULE(_this.GroupGraphPatternSub); } },\n            ]);\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.GroupGraphPatternSub = _this.RULE('GroupGraphPatternSub', function () {\n            log('GroupGraphPatternSub');\n            _this.OPTION(function () { return _this.SUBRULE(_this.TriplesBlock); });\n            _this.MANY(function () {\n                _this.SUBRULE(_this.GraphPatternNotTriples);\n                _this.OPTION1(function () { return _this.CONSUME(sparqlTokenMap.Period); });\n                _this.OPTION2(function () { return _this.SUBRULE1(_this.TriplesBlock); });\n            });\n        });\n        _this.TriplesBlock = _this.RULE('TriplesBlock', function () {\n            log('TriplesBlock');\n            _this.SUBRULE(_this.TriplesSameSubjectPath);\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.Period);\n                _this.OPTION1(function () { return _this.SUBRULE(_this.TriplesBlock); });\n            });\n        });\n        _this.GraphPatternNotTriples = _this.RULE('GraphPatternNotTriples', function () {\n            log('GraphPatternNotTriples');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.GroupOrUnionGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.OptionalGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.MinusGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.GraphGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.ServiceGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.Filter); } },\n                { ALT: function () { return _this.SUBRULE(_this.Bind); } },\n                { ALT: function () { return _this.SUBRULE(_this.InlineData); } },\n            ]);\n        });\n        _this.OptionalGraphPattern = _this.RULE('OptionalGraphPattern', function () {\n            log('OptionalGraphPattern');\n            _this.CONSUME(sparqlTokenMap.OPTIONAL);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.GraphGraphPattern = _this.RULE('GraphGraphPattern', function () {\n            log('GraphGraphPattern');\n            _this.CONSUME(sparqlTokenMap.GRAPH);\n            _this.SUBRULE(_this.VarOrIri);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.ServiceGraphPattern = _this.RULE('ServiceGraphPattern', function () {\n            log('ServiceGraphPattern');\n            _this.CONSUME(sparqlTokenMap.SERVICE);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.VarOrIri);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.Bind = _this.RULE('Bind', function () {\n            log('Bind');\n            _this.CONSUME(sparqlTokenMap.BIND);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.AS);\n            _this.SUBRULE(_this.Var);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.InlineData = _this.RULE('InlineData', function () {\n            log('InlineData');\n            _this.CONSUME(sparqlTokenMap.VALUES);\n            _this.SUBRULE(_this.DataBlock);\n        });\n        _this.DataBlock = _this.RULE('DataBlock', function () {\n            log('DataBlock');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.InlineDataOneVar); } },\n                { ALT: function () { return _this.SUBRULE(_this.InlineDataFull); } },\n            ]);\n        });\n        _this.InlineDataOneVar = _this.RULE('InlineDataOneVar', function () {\n            log('InlineDataOneVar');\n            _this.SUBRULE(_this.Var);\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.MANY(function () { return _this.SUBRULE(_this.DataBlockValue); });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.InlineDataFull = _this.RULE('InlineDataFull', function () {\n            log('InlineDataFull');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.MANY(function () { return _this.SUBRULE(_this.Var); });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.MANY1(function () {\n                return _this.OR1([\n                    {\n                        ALT: function () {\n                            _this.CONSUME1(sparqlTokenMap.LParen);\n                            _this.MANY2(function () { return _this.SUBRULE(_this.DataBlockValue); });\n                            _this.CONSUME1(sparqlTokenMap.RParen);\n                        },\n                    },\n                    { ALT: function () { return _this.CONSUME1(sparqlTokenMap.NIL); } },\n                ]);\n            });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.DataBlockValue = _this.RULE('DataBlockValue', function () {\n            log('DataBlockValue');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.UNDEF); } },\n            ]);\n        });\n        _this.MinusGraphPattern = _this.RULE('MinusGraphPattern', function () {\n            log('MinusGraphPattern');\n            _this.CONSUME(sparqlTokenMap.MINUS);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.GroupOrUnionGraphPattern = _this.RULE('GroupOrUnionGraphPattern', function () {\n            log('GroupOrUnionGraphPattern');\n            _this.SUBRULE(_this.GroupGraphPattern);\n            _this.MANY(function () {\n                _this.CONSUME(sparqlTokenMap.UNION);\n                _this.SUBRULE1(_this.GroupGraphPattern);\n            });\n        });\n        _this.Filter = _this.RULE('Filter', function () {\n            log('Filter');\n            _this.CONSUME(sparqlTokenMap.FILTER);\n            _this.SUBRULE(_this.Constraint);\n        });\n        _this.Constraint = _this.RULE('Constraint', function () {\n            log('Constraint');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.BrackettedExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall); } },\n                { ALT: function () { return _this.SUBRULE(_this.FunctionCall); } },\n            ]);\n        });\n        _this.FunctionCall = _this.RULE('FunctionCall', function () {\n            log('FunctionCall');\n            _this.SUBRULE(_this.iri);\n            _this.SUBRULE(_this.ArgList);\n        });\n        _this.ArgList = _this.RULE('ArgList', function () {\n            log('ArgList');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.DISTINCT); });\n                        _this.SUBRULE(_this.Expression);\n                        _this.MANY(function () {\n                            _this.CONSUME(sparqlTokenMap.Comma);\n                            _this.SUBRULE1(_this.Expression);\n                        });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n        });\n        _this.ExpressionList = _this.RULE('ExpressionList', function () {\n            log('ExpressionList');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.SUBRULE(_this.Expression);\n                        _this.MANY(function () {\n                            _this.CONSUME(sparqlTokenMap.Comma);\n                            _this.SUBRULE1(_this.Expression);\n                        });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n        });\n        _this.ConstructTemplate = _this.RULE('ConstructTemplate', function () {\n            log('ConstructTemplate');\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.OPTION(function () { return _this.SUBRULE(_this.ConstructTriples); });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.ConstructTriples = _this.RULE('ConstructTriples', function () {\n            log('ConstructTriples');\n            _this.SUBRULE(_this.TriplesSameSubject);\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.Period);\n                _this.OPTION1(function () { return _this.SUBRULE(_this.ConstructTriples); });\n            });\n        });\n        _this.TriplesSameSubject = _this.RULE('TriplesSameSubject', function () {\n            log('TriplesSameSubject');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.VarOrTerm);\n                        _this.SUBRULE(_this.PropertyListNotEmpty);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.TriplesNode);\n                        _this.SUBRULE(_this.PropertyList);\n                    },\n                },\n            ]);\n        });\n        _this.PropertyList = _this.RULE('PropertyList', function () {\n            log('PropertyList');\n            _this.OPTION(function () { return _this.SUBRULE(_this.PropertyListNotEmpty); });\n        });\n        _this.PropertyListNotEmpty = _this.RULE('PropertyListNotEmpty', function () {\n            log('PropertyListNotEmpty');\n            _this.SUBRULE(_this.Verb);\n            _this.SUBRULE(_this.ObjectList);\n            _this.MANY(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.SUBRULE1(_this.Verb);\n                    _this.SUBRULE1(_this.ObjectList);\n                });\n            });\n        });\n        _this.Verb = _this.RULE('Verb', function () {\n            log('Verb');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VarOrIri); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.A); } },\n            ]);\n        });\n        _this.ObjectList = _this.RULE('ObjectList', function () {\n            log('ObjectList');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.Comma,\n                DEF: function () { return _this.SUBRULE(_this.Object); },\n            });\n        });\n        _this.Object = _this.RULE('Object', function () {\n            log('Object');\n            _this.SUBRULE(_this.GraphNode);\n        });\n        _this.TriplesSameSubjectPath = _this.RULE('TriplesSameSubjectPath', function () {\n            log('TriplesSameSubjectPath');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.VarOrTerm);\n                        _this.SUBRULE(_this.PropertyListPathNotEmpty);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.TriplesNodePath);\n                        _this.SUBRULE(_this.PropertyListPath);\n                    },\n                },\n            ]);\n        });\n        _this.PropertyListPath = _this.RULE('PropertyListPath', function () {\n            log('PropertyListPath');\n            _this.OPTION(function () { return _this.SUBRULE(_this.PropertyListPathNotEmpty); });\n        });\n        _this.PropertyListPathNotEmpty = _this.RULE('PropertyListPathNotEmpty', function () {\n            log('PropertyListPathNotEmpty');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VerbPath); } },\n                { ALT: function () { return _this.SUBRULE(_this.VerbSimple); } },\n            ]);\n            _this.SUBRULE(_this.ObjectListPath);\n            _this.MANY(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.OR1([\n                        { ALT: function () { return _this.SUBRULE1(_this.VerbPath); } },\n                        { ALT: function () { return _this.SUBRULE1(_this.VerbSimple); } },\n                    ]);\n                    _this.SUBRULE1(_this.ObjectListPath);\n                });\n            });\n        });\n        _this.VerbPath = _this.RULE('VerbPath', function () {\n            log('VerbPath');\n            _this.SUBRULE(_this.Path);\n        });\n        _this.VerbSimple = _this.RULE('VerbSimple', function () {\n            log('VerbSimple');\n            _this.SUBRULE(_this.Var);\n        });\n        _this.ObjectListPath = _this.RULE('ObjectListPath', function () {\n            log('ObjectListPath');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.Comma,\n                DEF: function () { return _this.SUBRULE(_this.ObjectPath); },\n            });\n        });\n        _this.ObjectPath = _this.RULE('ObjectPath', function () {\n            log('ObjectPath');\n            _this.SUBRULE(_this.GraphNodePath);\n        });\n        _this.Path = _this.RULE('Path', function () {\n            log('Path');\n            _this.SUBRULE(_this.PathAlternative);\n        });\n        _this.PathAlternative = _this.RULE('PathAlternative', function () {\n            log('PathAlternative');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.Pipe,\n                DEF: function () { return _this.SUBRULE(_this.PathSequence); },\n            });\n        });\n        _this.PathSequence = _this.RULE('PathSequence', function () {\n            log('PathSequence');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.ForwardSlash,\n                DEF: function () { return _this.SUBRULE(_this.PathEltOrInverse); },\n            });\n        });\n        _this.PathElt = _this.RULE('PathElt', function () {\n            log('PathElt');\n            _this.SUBRULE(_this.PathPrimary);\n            _this.OPTION(function () { return _this.SUBRULE(_this.PathMod); });\n        });\n        _this.PathEltOrInverse = _this.RULE('PathEltOrInverse', function () {\n            log('PathEltOrInverse');\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.Caret); });\n            _this.SUBRULE(_this.PathElt);\n        });\n        _this.PathMod = _this.RULE('PathMod', function () {\n            log('PathMod');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.QuestionMark); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Star); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Plus); } },\n            ]);\n        });\n        _this.PathPrimary = _this.RULE('PathPrimary', function () {\n            log('PathPrimary');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.A); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.Bang);\n                        _this.SUBRULE(_this.PathNegatedPropertySet);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.SUBRULE(_this.Path);\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n        });\n        _this.PathNegatedPropertySet = _this.RULE('PathNegatedPropertySet', function () {\n            log('PathNegatedPropertySet');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.PathOneInPropertySet); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.MANY_SEP({\n                            SEP: sparqlTokenMap.Pipe,\n                            DEF: function () { return _this.SUBRULE1(_this.PathOneInPropertySet); },\n                        });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n        });\n        _this.PathOneInPropertySet = _this.RULE('PathOneInPropertySet', function () {\n            log('PathOneInPropertySet');\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.Caret); });\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.A); } },\n            ]);\n        });\n        _this.Integer = _this.RULE('Integer', function () {\n            log('Integer');\n            _this.CONSUME(sparqlTokenMap.INTEGER);\n        });\n        _this.TriplesNode = _this.RULE('TriplesNode', function () {\n            log('TriplesNode');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Collection); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNodePropertyList); } },\n            ]);\n        });\n        _this.BlankNodePropertyList = _this.RULE('BlankNodePropertyList', function () {\n            log('BlankNodePropertyList');\n            _this.CONSUME(sparqlTokenMap.LBracket);\n            _this.SUBRULE(_this.PropertyListNotEmpty);\n            _this.CONSUME(sparqlTokenMap.RBracket);\n        });\n        _this.TriplesNodePath = _this.RULE('TriplesNodePath', function () {\n            log('TriplesNodePath');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.CollectionPath); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNodePropertyListPath); } },\n            ]);\n        });\n        _this.BlankNodePropertyListPath = _this.RULE('BlankNodePropertyListPath', function () {\n            log('BlankNodePropertyListPath');\n            _this.CONSUME(sparqlTokenMap.LBracket);\n            _this.SUBRULE(_this.PropertyListPathNotEmpty);\n            _this.CONSUME(sparqlTokenMap.RBracket);\n        });\n        _this.Collection = _this.RULE('Collection', function () {\n            log('Collection');\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.GraphNode); });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.CollectionPath = _this.RULE('CollectionPath', function () {\n            log('CollectionPath');\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.GraphNodePath); });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.GraphNode = _this.RULE('GraphNode', function () {\n            log('GraphNode');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VarOrTerm); } },\n                { ALT: function () { return _this.SUBRULE(_this.TriplesNode); } },\n            ]);\n        });\n        _this.GraphNodePath = _this.RULE('GraphNodePath', function () {\n            log('GraphNodePath');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VarOrTerm); } },\n                { ALT: function () { return _this.SUBRULE(_this.TriplesNodePath); } },\n            ]);\n        });\n        _this.VarOrTerm = _this.RULE('VarOrTerm', function () {\n            log('VarOrTerm');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                { ALT: function () { return _this.SUBRULE(_this.GraphTerm); } },\n            ]);\n        });\n        _this.VarOrIri = _this.RULE('VarOrIri', function () {\n            log('VarOrIri');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n            ]);\n        });\n        _this.Var = _this.RULE('Var', function () {\n            log('Var');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.VAR1); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.VAR2); } },\n            ]);\n        });\n        _this.GraphTerm = _this.RULE('GraphTerm', function () {\n            log('GraphTerm');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n            ]);\n        });\n        _this.Expression = _this.RULE('Expression', function () {\n            log('Expression');\n            _this.SUBRULE(_this.ConditionalOrExpression);\n        });\n        _this.ConditionalOrExpression = _this.RULE('ConditionalOrExpression', function () {\n            log('ConditionalOrExpression');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.LogicalOr,\n                DEF: function () { return _this.SUBRULE(_this.ConditionalAndExpression); },\n            });\n        });\n        _this.ConditionalAndExpression = _this.RULE('ConditionalAndExpression', function () {\n            log('ConditionalAndExpression');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.LogicalAnd,\n                DEF: function () { return _this.SUBRULE(_this.ValueLogical); },\n            });\n        });\n        _this.ValueLogical = _this.RULE('ValueLogical', function () {\n            log('ValueLogical');\n            _this.SUBRULE(_this.RelationalExpression);\n        });\n        _this.RelationalExpression = _this.RULE('RelationalExpression', function () {\n            log('RelationalExpression');\n            _this.SUBRULE(_this.NumericExpression);\n            _this.OPTION(function () {\n                return _this.OR([\n                    {\n                        ALT: function () {\n                            _this.OR1([\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Equals); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NotEquals); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.LessThan); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.GreaterThan); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.LessThanEquals); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.GreaterThanEquals); } },\n                            ]);\n                            _this.SUBRULE1(_this.NumericExpression);\n                        },\n                    },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.IN);\n                            _this.SUBRULE(_this.ExpressionList);\n                        },\n                    },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.NOT_IN);\n                            _this.SUBRULE1(_this.ExpressionList);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.NumericExpression = _this.RULE('NumericExpression', function () {\n            log('NumericExpression');\n            _this.SUBRULE(_this.AdditiveExpression);\n        });\n        _this.AdditiveExpression = _this.RULE('AdditiveExpression', function () {\n            log('AdditiveExpression');\n            _this.SUBRULE(_this.MultiplicativeExpression);\n            _this.MANY(function () {\n                return _this.OR([\n                    {\n                        ALT: function () {\n                            _this.OR1([\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Plus); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Minus); } },\n                            ]);\n                            _this.SUBRULE1(_this.MultiplicativeExpression);\n                        },\n                    },\n                    {\n                        ALT: function () {\n                            _this.OR2([\n                                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralPositive); } },\n                                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralNegative); } },\n                            ]);\n                            _this.MANY1(function () {\n                                return _this.OR3([\n                                    {\n                                        ALT: function () {\n                                            _this.OR4([\n                                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Star); } },\n                                                {\n                                                    ALT: function () { return _this.CONSUME(sparqlTokenMap.ForwardSlash); },\n                                                },\n                                            ]);\n                                            _this.SUBRULE1(_this.UnaryExpression);\n                                        },\n                                    },\n                                ]);\n                            });\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.MultiplicativeExpression = _this.RULE('MultiplicativeExpression', function () {\n            log('MultiplicativeExpression');\n            _this.SUBRULE(_this.UnaryExpression);\n            _this.MANY(function () {\n                return _this.OR([\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.Star);\n                            _this.SUBRULE1(_this.UnaryExpression);\n                        },\n                    },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.ForwardSlash);\n                            _this.SUBRULE2(_this.UnaryExpression);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.UnaryExpression = _this.RULE('UnaryExpression', function () {\n            log('UnaryExpression');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.Bang);\n                        _this.SUBRULE(_this.PrimaryExpression);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.Plus);\n                        _this.SUBRULE1(_this.PrimaryExpression);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.Minus);\n                        _this.SUBRULE2(_this.PrimaryExpression);\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE3(_this.PrimaryExpression); } },\n            ]);\n        });\n        _this.PrimaryExpression = _this.RULE('PrimaryExpression', function () {\n            log('PrimaryExpression');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.BrackettedExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall); } },\n                { ALT: function () { return _this.SUBRULE(_this.iriOrFunction); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n            ]);\n        });\n        _this.BrackettedExpression = _this.RULE('BrackettedExpression', function () {\n            log('BrackettedExpression');\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STR = _this.RULE('BuiltInCall_STR', function () {\n            log('BuiltInCall_STR');\n            _this.CONSUME(sparqlTokenMap.STR);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_LANG = _this.RULE('BuiltInCall_LANG', function () {\n            log('BuiltInCall_LANG');\n            _this.CONSUME(sparqlTokenMap.LANG);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_LANGMATCHES = _this.RULE('BuiltInCall_LANGMATCHES', function () {\n            log('BuiltInCall_LANGMATCHES');\n            _this.CONSUME(sparqlTokenMap.LANGMATCHES);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_DATATYPE = _this.RULE('BuiltInCall_DATATYPE', function () {\n            log('BuiltInCall_DATATYPE');\n            _this.CONSUME(sparqlTokenMap.DATATYPE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_BOUND = _this.RULE('BuiltInCall_BOUND', function () {\n            log('BuiltInCall_BOUND');\n            _this.CONSUME(sparqlTokenMap.BOUND);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Var);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_IRI = _this.RULE('BuiltInCall_IRI', function () {\n            log('BuiltInCall_IRI');\n            _this.CONSUME(sparqlTokenMap.IRI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_URI = _this.RULE('BuiltInCall_URI', function () {\n            log('BuiltInCall_URI');\n            _this.CONSUME(sparqlTokenMap.URI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_BNODE = _this.RULE('BuiltInCall_BNODE', function () {\n            log('BuiltInCall_BNODE');\n            _this.CONSUME(sparqlTokenMap.BNODE);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.SUBRULE(_this.Expression);\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n            ]);\n        });\n        _this.BuiltInCall_RAND = _this.RULE('BuiltInCall_RAND', function () {\n            log('BuiltInCall_RAND');\n            _this.CONSUME(sparqlTokenMap.RAND);\n            _this.CONSUME(sparqlTokenMap.NIL);\n        });\n        _this.BuiltInCall_ABS = _this.RULE('BuiltInCall_ABS', function () {\n            log('BuiltInCall_ABS');\n            _this.CONSUME(sparqlTokenMap.ABS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_CEIL = _this.RULE('BuiltInCall_CEIL', function () {\n            log('BuiltInCall_CEIL');\n            _this.CONSUME(sparqlTokenMap.CEIL);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_FLOOR = _this.RULE('BuiltInCall_FLOOR', function () {\n            log('BuiltInCall_FLOOR');\n            _this.CONSUME(sparqlTokenMap.FLOOR);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_ROUND = _this.RULE('BuiltInCall_ROUND', function () {\n            log('BuiltInCall_ROUND');\n            _this.CONSUME(sparqlTokenMap.ROUND);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_CONCAT = _this.RULE('BuiltInCall_CONCAT', function () {\n            log('BuiltInCall_CONCAT');\n            _this.CONSUME(sparqlTokenMap.CONCAT);\n            _this.SUBRULE(_this.ExpressionList);\n        });\n        _this.BuiltInCall_STRLEN = _this.RULE('BuiltInCall_STRLEN', function () {\n            log('BuiltInCall_STRLEN');\n            _this.CONSUME(sparqlTokenMap.STRLEN);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_UCASE = _this.RULE('BuiltInCall_UCASE', function () {\n            log('BuiltInCall_UCASE');\n            _this.CONSUME(sparqlTokenMap.UCASE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_LCASE = _this.RULE('BuiltInCall_LCASE', function () {\n            log('BuiltInCall_LCASE');\n            _this.CONSUME(sparqlTokenMap.LCASE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_ENCODE_FOR_URI = _this.RULE('BuiltInCall_ENCODE_FOR_URI', function () {\n            log('BuiltInCall_ENCODE_FOR_URI');\n            _this.CONSUME(sparqlTokenMap.ENCODE_FOR_URI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_CONTAINS = _this.RULE('BuiltInCall_CONTAINS', function () {\n            log('BuiltInCall_CONTAINS');\n            _this.CONSUME(sparqlTokenMap.CONTAINS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRSTARTS = _this.RULE('BuiltInCall_STRSTARTS', function () {\n            log('BuiltInCall_STRSTARTS');\n            _this.CONSUME(sparqlTokenMap.STRSTARTS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRENDS = _this.RULE('BuiltInCall_STRENDS', function () {\n            log('BuiltInCall_STRENDS');\n            _this.CONSUME(sparqlTokenMap.STRENDS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRBEFORE = _this.RULE('BuiltInCall_STRBEFORE', function () {\n            log('BuiltInCall_STRBEFORE');\n            _this.CONSUME(sparqlTokenMap.STRBEFORE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRAFTER = _this.RULE('BuiltInCall_STRAFTER', function () {\n            log('BuiltInCall_STRAFTER');\n            _this.CONSUME(sparqlTokenMap.STRAFTER);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_YEAR = _this.RULE('BuiltInCall_YEAR', function () {\n            log('BuiltInCall_YEAR');\n            _this.CONSUME(sparqlTokenMap.YEAR);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_MONTH = _this.RULE('BuiltInCall_MONTH', function () {\n            log('BuiltInCall_MONTH');\n            _this.CONSUME(sparqlTokenMap.MONTH);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_DAY = _this.RULE('BuiltInCall_DAY', function () {\n            log('BuiltInCall_DAY');\n            _this.CONSUME(sparqlTokenMap.DAY);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_HOURS = _this.RULE('BuiltInCall_HOURS', function () {\n            log('BuiltInCall_HOURS');\n            _this.CONSUME(sparqlTokenMap.HOURS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_MINUTES = _this.RULE('BuiltInCall_MINUTES', function () {\n            log('BuiltInCall_MINUTES');\n            _this.CONSUME(sparqlTokenMap.MINUTES);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SECONDS = _this.RULE('BuiltInCall_SECONDS', function () {\n            log('BuiltInCall_SECONDS');\n            _this.CONSUME(sparqlTokenMap.SECONDS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_TIMEZONE = _this.RULE('BuiltInCall_TIMEZONE', function () {\n            log('BuiltInCall_TIMEZONE');\n            _this.CONSUME(sparqlTokenMap.TIMEZONE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_TZ = _this.RULE('BuiltInCall_TZ', function () {\n            log('BuiltInCall_TZ');\n            _this.CONSUME(sparqlTokenMap.TZ);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_NOW = _this.RULE('BuiltInCall_NOW', function () {\n            log('BuiltInCall_NOW');\n            _this.CONSUME(sparqlTokenMap.NOW);\n            _this.CONSUME(sparqlTokenMap.NIL);\n        });\n        _this.BuiltInCall_UUID = _this.RULE('BuiltInCall_UUID', function () {\n            log('BuiltInCall_UUID');\n            _this.CONSUME(sparqlTokenMap.UUID);\n            _this.CONSUME(sparqlTokenMap.NIL);\n        });\n        _this.BuiltInCall_STRUUID = _this.RULE('BuiltInCall_STRUUID', function () {\n            log('BuiltInCall_STRUUID');\n            _this.CONSUME(sparqlTokenMap.STRUUID);\n            _this.CONSUME(sparqlTokenMap.NIL);\n        });\n        _this.BuiltInCall_MD5 = _this.RULE('BuiltInCall_MD5', function () {\n            log('BuiltInCall_MD5');\n            _this.CONSUME(sparqlTokenMap.MD5);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SHA1 = _this.RULE('BuiltInCall_SHA1', function () {\n            log('BuiltInCall_SHA1');\n            _this.CONSUME(sparqlTokenMap.SHA1);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SHA256 = _this.RULE('BuiltInCall_SHA256', function () {\n            log('BuiltInCall_SHA256');\n            _this.CONSUME(sparqlTokenMap.SHA256);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SHA384 = _this.RULE('BuiltInCall_SHA384', function () {\n            log('BuiltInCall_SHA384');\n            _this.CONSUME(sparqlTokenMap.SHA384);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SHA512 = _this.RULE('BuiltInCall_SHA512', function () {\n            log('BuiltInCall_SHA512');\n            _this.CONSUME(sparqlTokenMap.SHA512);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_COALESCE = _this.RULE('BuiltInCall_COALESCE', function () {\n            log('BuiltInCall_COALESCE');\n            _this.CONSUME(sparqlTokenMap.COALESCE);\n            _this.SUBRULE(_this.ExpressionList);\n        });\n        _this.BuiltInCall_IF = _this.RULE('BuiltInCall_IF', function () {\n            log('BuiltInCall_IF');\n            _this.CONSUME(sparqlTokenMap.IF);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME1(sparqlTokenMap.Comma);\n            _this.SUBRULE2(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRLANG = _this.RULE('BuiltInCall_STRLANG', function () {\n            log('BuiltInCall_STRLANG');\n            _this.CONSUME(sparqlTokenMap.STRLANG);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRDT = _this.RULE('BuiltInCall_STRDT', function () {\n            log('BuiltInCall_STRDT');\n            _this.CONSUME(sparqlTokenMap.STRDT);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_sameTerm = _this.RULE('BuiltInCall_sameTerm', function () {\n            log('BuiltInCall_sameTerm');\n            _this.CONSUME(sparqlTokenMap.sameTerm);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isIRI = _this.RULE('BuiltInCall_isIRI', function () {\n            log('BuiltInCall_isIRI');\n            _this.CONSUME(sparqlTokenMap.isIRI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isURI = _this.RULE('BuiltInCall_isURI', function () {\n            log('BuiltInCall_isURI');\n            _this.CONSUME(sparqlTokenMap.isURI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isBLANK = _this.RULE('BuiltInCall_isBLANK', function () {\n            log('BuiltInCall_isBLANK');\n            _this.CONSUME(sparqlTokenMap.isBLANK);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isLITERAL = _this.RULE('BuiltInCall_isLITERAL', function () {\n            log('BuiltInCall_isLITERAL');\n            _this.CONSUME(sparqlTokenMap.isLITERAL);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isNUMERIC = _this.RULE('BuiltInCall_isNUMERIC', function () {\n            log('BuiltInCall_isNUMERIC');\n            _this.CONSUME(sparqlTokenMap.isNUMERIC);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall = _this.RULE('BuiltInCall', function () {\n            log('BuiltInCall');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Aggregate); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LANG); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LANGMATCHES); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_DATATYPE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_BOUND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_IRI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_URI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_BNODE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_RAND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ABS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CEIL); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_FLOOR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ROUND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CONCAT); } },\n                { ALT: function () { return _this.SUBRULE(_this.SubstringExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRLEN); } },\n                { ALT: function () { return _this.SUBRULE(_this.StrReplaceExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_UCASE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LCASE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ENCODE_FOR_URI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CONTAINS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRSTARTS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRENDS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRBEFORE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRAFTER); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_YEAR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MONTH); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_DAY); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_HOURS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MINUTES); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SECONDS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_TIMEZONE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_TZ); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_NOW); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_UUID); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRUUID); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MD5); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA1); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA256); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA384); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA512); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_COALESCE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_IF); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRLANG); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRDT); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_sameTerm); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isIRI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isURI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isBLANK); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isLITERAL); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isNUMERIC); } },\n                { ALT: function () { return _this.SUBRULE(_this.RegexExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.ExistsFunction); } },\n                { ALT: function () { return _this.SUBRULE(_this.NotExistsFunction); } },\n            ]);\n        });\n        _this.RegexExpression = _this.RULE('RegexExpression', function () {\n            log('RegexExpression');\n            _this.CONSUME(sparqlTokenMap.REGEX);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.OPTION(function () {\n                _this.CONSUME1(sparqlTokenMap.Comma);\n                _this.SUBRULE2(_this.Expression);\n            });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.SubstringExpression = _this.RULE('SubstringExpression', function () {\n            log('SubstringExpression');\n            _this.CONSUME(sparqlTokenMap.SUBSTR);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.OPTION(function () {\n                _this.CONSUME1(sparqlTokenMap.Comma);\n                _this.SUBRULE2(_this.Expression);\n            });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.StrReplaceExpression = _this.RULE('StrReplaceExpression', function () {\n            log('StrReplaceExpression');\n            _this.CONSUME(sparqlTokenMap.REPLACE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME1(sparqlTokenMap.Comma);\n            _this.SUBRULE2(_this.Expression);\n            _this.OPTION(function () {\n                _this.CONSUME2(sparqlTokenMap.Comma);\n                _this.SUBRULE3(_this.Expression);\n            });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.ExistsFunction = _this.RULE('ExistsFunction', function () {\n            log('ExistsFunction');\n            _this.CONSUME(sparqlTokenMap.EXISTS);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.NotExistsFunction = _this.RULE('NotExistsFunction', function () {\n            log('NotExistsFunction');\n            _this.CONSUME(sparqlTokenMap.NOT_EXISTS);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.Count = _this.RULE('Count', function () {\n            log('Count');\n            _this.CONSUME(sparqlTokenMap.COUNT);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.OR([\n                { ALT: function () { return _this.CONSUME3(sparqlTokenMap.Star); } },\n                { ALT: function () { return _this.SUBRULE(_this.Expression); } },\n            ]);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Sum = _this.RULE('Sum', function () {\n            log('Sum');\n            _this.CONSUME(sparqlTokenMap.SUM);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Min = _this.RULE('Min', function () {\n            log('Min');\n            _this.CONSUME(sparqlTokenMap.MIN);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Max = _this.RULE('Max', function () {\n            log('Max');\n            _this.CONSUME(sparqlTokenMap.MAX);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Avg = _this.RULE('Avg', function () {\n            log('Avg');\n            _this.CONSUME(sparqlTokenMap.AVG);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Sample = _this.RULE('Sample', function () {\n            log('Sample');\n            _this.CONSUME(sparqlTokenMap.SAMPLE);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.GroupConcat = _this.RULE('GroupConcat', function () {\n            log('GroupConcat');\n            _this.CONSUME(sparqlTokenMap.GROUP_CONCAT);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.OPTION1(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.CONSUME(sparqlTokenMap.SEPARATOR);\n                _this.CONSUME(sparqlTokenMap.Equals);\n                _this.SUBRULE(_this.String);\n            });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Aggregate = _this.RULE('Aggregate', function () {\n            log('Aggregate');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Count); } },\n                { ALT: function () { return _this.SUBRULE(_this.Sum); } },\n                { ALT: function () { return _this.SUBRULE(_this.Min); } },\n                { ALT: function () { return _this.SUBRULE(_this.Max); } },\n                { ALT: function () { return _this.SUBRULE(_this.Avg); } },\n                { ALT: function () { return _this.SUBRULE(_this.Sample); } },\n                { ALT: function () { return _this.SUBRULE(_this.GroupConcat); } },\n            ]);\n        });\n        _this.iriOrFunction = _this.RULE('iriOrFunction', function () {\n            log('iriOrFunction');\n            _this.SUBRULE(_this.iri);\n            _this.OPTION(function () { return _this.SUBRULE(_this.ArgList); });\n        });\n        _this.RDFLiteral = _this.RULE('RDFLiteral', function () {\n            log('RDFLiteral');\n            _this.SUBRULE(_this.String);\n            _this.OPTION(function () {\n                return _this.OR([\n                    { ALT: function () { return _this.CONSUME(sparqlTokenMap.LANGTAG); } },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.DoubleCaret);\n                            _this.SUBRULE(_this.iri);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.NumericLiteral = _this.RULE('NumericLiteral', function () {\n            log('NumericLiteral');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralUnsigned); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralPositive); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralNegative); } },\n            ]);\n        });\n        _this.NumericLiteralUnsigned = _this.RULE('NumericLiteralUnsigned', function () {\n            log('NumericLiteralUnsigned');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.INTEGER); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DECIMAL); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DOUBLE); } },\n            ]);\n        });\n        _this.NumericLiteralPositive = _this.RULE('NumericLiteralPositive', function () {\n            log('NumericLiteralPositive');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.INTEGER_POSITIVE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DECIMAL_POSITIVE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DOUBLE_POSITIVE); } },\n            ]);\n        });\n        _this.NumericLiteralNegative = _this.RULE('NumericLiteralNegative', function () {\n            log('NumericLiteralNegative');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.INTEGER_NEGATIVE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DECIMAL_NEGATIVE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DOUBLE_NEGATIVE); } },\n            ]);\n        });\n        _this.BooleanLiteral = _this.RULE('BooleanLiteral', function () {\n            log('BooleanLiteral');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.TRUE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.FALSE); } },\n            ]);\n        });\n        _this.String = _this.RULE('String', function () {\n            log('String');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.STRING_LITERAL1); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.STRING_LITERAL2); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.STRING_LITERAL_LONG1); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.STRING_LITERAL_LONG2); } },\n            ]);\n        });\n        _this.iri = _this.RULE('iri', function () {\n            log('iri');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.IRIREF); } },\n                { ALT: function () { return _this.SUBRULE(_this.PrefixedName); } },\n            ]);\n        });\n        _this.PrefixedName = _this.RULE('PrefixedName', function () {\n            log('PrefixedName');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.PNAME_LN); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.PNAME_NS); } },\n            ]);\n        });\n        _this.BlankNode = _this.RULE('BlankNode', function () {\n            log('BlankNode');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.BLANK_NODE_LABEL); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.ANON); } },\n            ]);\n        });\n        _this.lexer = new Lexer(tokenVocab);\n        return _this;\n    }\n    return BaseSparqlParser;\n}(Parser));\nexport { BaseSparqlParser };\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nexport var traverse = function (root, visit) {\n    _traverse(root, null, visit);\n};\nexport var unsafeTraverse = function (root, visit) {\n    _traverse(root, null, visit, false);\n};\nexport function isCstNode(object) {\n    return Boolean(object && 'name' in object);\n}\nvar TraverseContext = /** @class */ (function () {\n    function TraverseContext(_a) {\n        var node = _a.node, parentCtx = _a.parentCtx;\n        this.node = __assign({}, node);\n        this.parentCtx = __assign({}, parentCtx);\n    }\n    return TraverseContext;\n}());\nvar _traverse = function (root, ctx, visit, visitSafely) {\n    if (ctx === void 0) { ctx = new TraverseContext({ node: root }); }\n    if (visitSafely === void 0) { visitSafely = true; }\n    if (!isCstNode(root)) {\n        // must be a token\n        return visit(visitSafely ? __assign({}, ctx) : ctx);\n    }\n    // is a grammar rule node\n    var children = root.children;\n    Object.keys(children).forEach(function (key) {\n        var childType = children[key];\n        if (!childType.length) {\n            return;\n        }\n        childType.forEach(function (child) {\n            var childCtx = visitSafely\n                ? new TraverseContext({ node: child, parentCtx: ctx })\n                : { node: child, parentCtx: ctx };\n            var afterVisit = function (transformedCtx) {\n                var nextCtx = childCtx;\n                if (transformedCtx) {\n                    nextCtx = visitSafely\n                        ? new TraverseContext({\n                            node: transformedCtx.node,\n                            parentCtx: transformedCtx.parentCtx,\n                        })\n                        : {\n                            node: transformedCtx.node,\n                            parentCtx: transformedCtx.parentCtx,\n                        };\n                }\n                _traverse(child, nextCtx, visit, visitSafely);\n            };\n            visit(childCtx, afterVisit);\n        });\n    });\n};\n","/*\nCopyright ©2012–2018 Ruben Verborgh\nWith modifications Copyright ©2018 Stardog Union\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nvar escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\[uU]|\\\\(.)/g;\nvar escapeReplacements = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\"': '\"',\n    n: '\\n',\n    r: '\\r',\n    t: '\\t',\n    f: '\\f',\n    b: '\\b',\n    _: '_',\n    '~': '~',\n    '.': '.',\n    '-': '-',\n    '!': '!',\n    $: '$',\n    '&': '&',\n    '(': '(',\n    ')': ')',\n    '*': '*',\n    '+': '+',\n    ',': ',',\n    ';': ';',\n    '=': '=',\n    '/': '/',\n    '?': '?',\n    '#': '#',\n    '@': '@',\n    '%': '%',\n};\nexport var unescapedStringLiteralQuote = /^\"([^\"\\\\\\r\\n]+)\"/; // non-empty string without escape sequences\nexport var unescapedStringLiteralSingleQuote = /^'([^'\\\\\\r\\n]+)'/;\nexport var stringLiteralQuote = /^\"((?:[^\"\\\\\\r\\n]|\\\\.)*)\"(?=[^\"])/;\nexport var stringLiteralSingleQuote = /^'((?:[^'\\\\\\r\\n]|\\\\.)*)'(?=[^'])/;\nexport var stringLiteralLongQuote = /^\"\"\"([^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*)\"\"\"/;\nexport var stringLiteralLongSingleQuote = /^'''([^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*)'''/;\nexport var illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\nexport var escapedIri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/;\nexport var unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/;\n// Handle special unescaping needs related to the IRIREF rule and others.\nexport var unescape = function (item) {\n    try {\n        return item.replace(escapeSequence, function (_, unicode4, unicode8, escapedChar) {\n            if (unicode4) {\n                return String.fromCharCode(parseInt(unicode4, 16));\n            }\n            else if (unicode8) {\n                var charCode = parseInt(unicode8, 16);\n                if (charCode <= 0xffff) {\n                    return String.fromCharCode(charCode);\n                }\n                return String.fromCharCode(0xd800 + (charCode -= 0x10000) / 0x400, 0xdc00 + (charCode & 0x3ff));\n            }\n            else {\n                var replacement = escapeReplacements[escapedChar];\n                if (!replacement) {\n                    throw new Error();\n                }\n                return replacement;\n            }\n        });\n    }\n    catch (error) {\n        return null;\n    }\n};\n","var sparqlTokenMap = require('../sparql/tokens').sparqlTokenMap;\nimport { createToken } from 'chevrotain';\nimport { regex } from '../helpers/regex';\nimport { EXPONENT, ECHAR, PLX, HEX, PN_CHARS_BASE, PN_CHARS_U, PN_CHARS, PN_PREFIX, PN_LOCAL, PN_LOCAL_ESC, } from '../helpers/matchers';\nimport { unescape, stringLiteralLongSingleQuote, stringLiteralLongQuote, unescapedStringLiteralQuote, stringLiteralQuote, unescapedStringLiteralSingleQuote, stringLiteralSingleQuote, unescapedIri, escapedIri, illegalIriChars, } from '../helpers/unescape';\nvar unicodeRegexp = /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nexport var turtleTokenMap = {\n    Comment: createToken({\n        name: 'Comment',\n        pattern: /#[^\\n]*/,\n        group: 'comments',\n    }),\n    LBracket: sparqlTokenMap.LBracket,\n    RBracket: sparqlTokenMap.RBracket,\n    LParen: sparqlTokenMap.LParen,\n    RParen: sparqlTokenMap.RParen,\n    Period: sparqlTokenMap.Period,\n    WhiteSpace: sparqlTokenMap.WhiteSpace,\n    // 'true' and 'false' are case sensitive in Turtle but not in SPARQL\n    TRUE: createToken({\n        name: 'TRUE',\n        pattern: /true/,\n    }),\n    FALSE: createToken({\n        name: 'FALSE',\n        pattern: /false/,\n    }),\n    DoubleCaret: sparqlTokenMap.DoubleCaret,\n    LEmbed: sparqlTokenMap.LEmbed,\n    REmbed: sparqlTokenMap.REmbed,\n    Comma: sparqlTokenMap.Comma,\n    Semicolon: sparqlTokenMap.Semicolon,\n    A: sparqlTokenMap.A,\n    PREFIX: sparqlTokenMap.PREFIX,\n    BASE: sparqlTokenMap.BASE,\n    PNAME_NS: sparqlTokenMap.PNAME_NS,\n    PNAME_LN: sparqlTokenMap.PNAME_LN,\n    BLANK_NODE_LABEL: sparqlTokenMap.BLANK_NODE_LABEL,\n    TTL_BASE: createToken({ name: 'TTL_BASE', pattern: /@base/ }),\n    TTL_PREFIX: createToken({ name: 'TTL_PREFIX', pattern: /@prefix/ }),\n    LANGTAG: sparqlTokenMap.LANGTAG,\n    INTEGER: createToken({\n        name: 'INTEGER',\n        pattern: regex.and(regex.option(/[+-]/), /\\d+/),\n    }),\n    DECIMAL: createToken({\n        name: 'DECIMAL',\n        pattern: regex.and(regex.option(/[+-]/), /(\\d*\\.\\d+)/),\n    }),\n    DOUBLE: createToken({\n        name: 'DOUBLE',\n        pattern: regex.and(regex.option(/[+-]/), regex.or(regex.and(/\\d+\\.\\d*/, EXPONENT), regex.and(/\\.\\d+/, EXPONENT), regex.and(/\\d+/, EXPONENT))),\n    }),\n    EXPONENT: createToken({ name: 'EXPONENT', pattern: EXPONENT }),\n    ECHAR: createToken({ name: 'ECHAR', pattern: ECHAR }),\n    ANON: sparqlTokenMap.ANON,\n    PLX: createToken({ name: 'PLX', pattern: PLX }),\n    PERCENT: sparqlTokenMap.PERCENT,\n    HEX: createToken({ name: 'HEX', pattern: HEX }),\n    STRING_LITERAL_LONG_SINGLE_QUOTE: createToken({\n        name: 'STRING_LITERAL_LONG_SINGLE_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var match = stringLiteralLongSingleQuote.exec(text.slice(startOffset));\n            if (!match || unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: true,\n    }),\n    STRING_LITERAL_LONG_QUOTE: createToken({\n        name: 'STRING_LITERAL_LONG_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var match = stringLiteralLongQuote.exec(text.slice(startOffset));\n            if (!match || unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: true,\n    }),\n    STRING_LITERAL_QUOTE: createToken({\n        name: 'STRING_LITERAL_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedStringLiteralQuote.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = stringLiteralQuote.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            if (unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    STRING_LITERAL_SINGLE_QUOTE: createToken({\n        name: 'STRING_LITERAL_SINGLE_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedStringLiteralSingleQuote.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = stringLiteralSingleQuote.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            if (unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    UCHAR: createToken({\n        name: 'UCHAR',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            return unicodeRegexp.exec(text.slice(startOffset));\n        },\n        line_breaks: false,\n    }),\n    IRIREF: createToken({\n        name: 'IRIREF',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedIri.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = escapedIri.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            var value = unescape(match[1]);\n            if (value === null || illegalIriChars.test(value)) {\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    PN_CHARS_BASE: createToken({ name: 'PN_CHARS_BASE', pattern: PN_CHARS_BASE }),\n    PN_CHARS_U: createToken({ name: 'PN_CHARS_U', pattern: PN_CHARS_U }),\n    PN_CHARS: createToken({ name: 'PN_CHARS', pattern: PN_CHARS }),\n    PN_PREFIX: createToken({ name: 'PN_PREFIX', pattern: PN_PREFIX }),\n    PN_LOCAL: createToken({ name: 'PN_LOCAL', pattern: PN_LOCAL }),\n    PN_LOCAL_ESC: createToken({ name: 'PN_LOCAL_ESC', pattern: PN_LOCAL_ESC }),\n    Unknown: createToken({\n        name: 'Unknown',\n        pattern: /\\w+/,\n    }),\n};\nexport var turtleTokenTypes = [\n    turtleTokenMap.Comment,\n    sparqlTokenMap.ANON,\n    sparqlTokenMap.LBracket,\n    sparqlTokenMap.RBracket,\n    sparqlTokenMap.LParen,\n    sparqlTokenMap.RParen,\n    sparqlTokenMap.WhiteSpace,\n    turtleTokenMap.TRUE,\n    turtleTokenMap.FALSE,\n    sparqlTokenMap.Comma,\n    sparqlTokenMap.Semicolon,\n    sparqlTokenMap.PNAME_NS,\n    sparqlTokenMap.A,\n    sparqlTokenMap.PREFIX,\n    sparqlTokenMap.BASE,\n    sparqlTokenMap.PNAME_LN,\n    sparqlTokenMap.BLANK_NODE_LABEL,\n    turtleTokenMap.TTL_BASE,\n    turtleTokenMap.TTL_PREFIX,\n    sparqlTokenMap.LANGTAG,\n    turtleTokenMap.DOUBLE,\n    turtleTokenMap.DECIMAL,\n    sparqlTokenMap.Period,\n    sparqlTokenMap.DoubleCaret,\n    turtleTokenMap.LEmbed,\n    turtleTokenMap.REmbed,\n    turtleTokenMap.IRIREF,\n    turtleTokenMap.STRING_LITERAL_LONG_SINGLE_QUOTE,\n    turtleTokenMap.STRING_LITERAL_LONG_QUOTE,\n    turtleTokenMap.STRING_LITERAL_QUOTE,\n    turtleTokenMap.STRING_LITERAL_SINGLE_QUOTE,\n    turtleTokenMap.INTEGER,\n    turtleTokenMap.EXPONENT,\n    turtleTokenMap.PLX,\n    sparqlTokenMap.PERCENT,\n    turtleTokenMap.HEX,\n    turtleTokenMap.PN_CHARS_BASE,\n    turtleTokenMap.PN_CHARS_U,\n    turtleTokenMap.PN_CHARS,\n    turtleTokenMap.PN_PREFIX,\n    turtleTokenMap.PN_LOCAL,\n    turtleTokenMap.PN_LOCAL_ESC,\n    turtleTokenMap.ECHAR,\n    turtleTokenMap.UCHAR,\n    turtleTokenMap.Unknown,\n];\n"],"sourceRoot":""}